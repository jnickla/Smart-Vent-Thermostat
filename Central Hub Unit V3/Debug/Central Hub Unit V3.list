
Central Hub Unit V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f0c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  08011050  08011050  00021050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080119ec  080119ec  000219ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080119f4  080119f4  000219f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080119f8  080119f8  000219f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000008  080119fc  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000a76  200000a0  08011a94  000300a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000b18  0801250a  00030b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000b2c  0801251b  00030b2c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  0801251b  00031398  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00030b29  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 .debug_info   00042f09  00000000  00000000  00030b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006a8f  00000000  00000000  00073a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003598  00000000  00000000  0007a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024e8  00000000  00000000  0007da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b0a0  00000000  00000000  0007ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030d5d  00000000  00000000  000ab018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff5fe  00000000  00000000  000dbd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00006b6f  00000000  00000000  001db373  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  00000214  00000000  00000000  001e1ee2  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000038  00000000  00000000  001e20f8  2**2
                  CONTENTS, READONLY
 24 .debug_frame  0000f048  00000000  00000000  001e2130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_types  000028b1  00000000  00000000  001f1178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macinfo 0000075d  00000000  00000000  001f3a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    00006c79  00000000  00000000  001f4186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_pubnames 000017fc  00000000  00000000  001fadff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000b2c 	.word	0x20000b2c
 800015c:	00000000 	.word	0x00000000
 8000160:	08011034 	.word	0x08011034

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000b30 	.word	0x20000b30
 800017c:	08011034 	.word	0x08011034

08000180 <ZbZclBasicClientAlloc>:
 8000180:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000182:	0005      	movs	r5, r0
 8000184:	000e      	movs	r6, r1
 8000186:	2001      	movs	r0, #1
 8000188:	9000      	str	r0, [sp, #0]
 800018a:	0033      	movs	r3, r6
 800018c:	b2db      	uxtb	r3, r3
 800018e:	2200      	movs	r2, #0
 8000190:	216c      	movs	r1, #108	; 0x6c
 8000192:	0028      	movs	r0, r5
 8000194:	f000 f9c9 	bl	800052a <ZbZclClusterAlloc>
 8000198:	0004      	movs	r4, r0
 800019a:	2c00      	cmp	r4, #0
 800019c:	d101      	bne.n	80001a2 <ZbZclBasicClientAlloc+0x22>
 800019e:	2000      	movs	r0, #0
 80001a0:	e006      	b.n	80001b0 <ZbZclBasicClientAlloc+0x30>
 80001a2:	f20f 0011 	addw	r0, pc, #17
 80001a6:	65a0      	str	r0, [r4, #88]	; 0x58
 80001a8:	0020      	movs	r0, r4
 80001aa:	f000 fa4a 	bl	8000642 <ZbZclClusterAttach>
 80001ae:	0020      	movs	r0, r4
 80001b0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

080001b4 <zcl_basic_client_handle_command>:
 80001b4:	0003      	movs	r3, r0
 80001b6:	7888      	ldrb	r0, [r1, #2]
 80001b8:	2801      	cmp	r0, #1
 80001ba:	d001      	beq.n	80001c0 <zcl_basic_client_handle_command+0xc>
 80001bc:	2081      	movs	r0, #129	; 0x81
 80001be:	e000      	b.n	80001c2 <zcl_basic_client_handle_command+0xe>
 80001c0:	2081      	movs	r0, #129	; 0x81
 80001c2:	4770      	bx	lr

080001c4 <zcl_basic_client_reset_rsp_cb>:
 80001c4:	4770      	bx	lr

080001c6 <ZbZclBasicClientResetReq>:
 80001c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	0004      	movs	r4, r0
 80001ce:	000d      	movs	r5, r1
 80001d0:	2620      	movs	r6, #32
 80001d2:	2700      	movs	r7, #0
 80001d4:	46e8      	mov	r8, sp
 80001d6:	003a      	movs	r2, r7
 80001d8:	0031      	movs	r1, r6
 80001da:	4640      	mov	r0, r8
 80001dc:	f006 f965 	bl	80064aa <__aeabi_memset>
 80001e0:	4668      	mov	r0, sp
 80001e2:	0029      	movs	r1, r5
 80001e4:	2210      	movs	r2, #16
 80001e6:	f00f fd07 	bl	800fbf8 <__aeabi_memcpy>
 80001ea:	2000      	movs	r0, #0
 80001ec:	f88d 0010 	strb.w	r0, [sp, #16]
 80001f0:	2000      	movs	r0, #0
 80001f2:	f88d 0011 	strb.w	r0, [sp, #17]
 80001f6:	2000      	movs	r0, #0
 80001f8:	9005      	str	r0, [sp, #20]
 80001fa:	2000      	movs	r0, #0
 80001fc:	9006      	str	r0, [sp, #24]
 80001fe:	0023      	movs	r3, r4
 8000200:	4a03      	ldr	r2, [pc, #12]	; (8000210 <.text_6>)
 8000202:	4669      	mov	r1, sp
 8000204:	0020      	movs	r0, r4
 8000206:	f00c fed0 	bl	800cfaa <ZbZclClusterCommandReq>
 800020a:	b008      	add	sp, #32
 800020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000210 <.text_6>:
 8000210:	080001c5 	.word	0x080001c5

08000214 <ZbZclClusterGetEndpoint>:
 8000214:	7b80      	ldrb	r0, [r0, #14]
 8000216:	4770      	bx	lr

08000218 <ZbZclClusterSetCallbackArg>:
 8000218:	6541      	str	r1, [r0, #84]	; 0x54
 800021a:	4770      	bx	lr

0800021c <ZbZclClusterSetMfrCode>:
 800021c:	8201      	strh	r1, [r0, #16]
 800021e:	4770      	bx	lr

08000220 <ZbZclClusterGetClusterId>:
 8000220:	8980      	ldrh	r0, [r0, #12]
 8000222:	4770      	bx	lr

08000224 <ZbZclClusterSetProfileId>:
 8000224:	b538      	push	{r3, r4, r5, lr}
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	82a5      	strh	r5, [r4, #20]
 800022c:	7ba0      	ldrb	r0, [r4, #14]
 800022e:	28ff      	cmp	r0, #255	; 0xff
 8000230:	d008      	beq.n	8000244 <ZbZclClusterSetProfileId+0x20>
 8000232:	0020      	movs	r0, r4
 8000234:	f00c ffaa 	bl	800d18c <ZbZclClusterUnbind>
 8000238:	7f23      	ldrb	r3, [r4, #28]
 800023a:	8aa2      	ldrh	r2, [r4, #20]
 800023c:	7ba1      	ldrb	r1, [r4, #14]
 800023e:	0020      	movs	r0, r4
 8000240:	f00c ff64 	bl	800d10c <ZbZclClusterBind>
 8000244:	bd31      	pop	{r0, r4, r5, pc}

08000246 <ZbZclClusterGetProfileId>:
 8000246:	b510      	push	{r4, lr}
 8000248:	0004      	movs	r4, r0
 800024a:	7ba1      	ldrb	r1, [r4, #14]
 800024c:	68a0      	ldr	r0, [r4, #8]
 800024e:	f00c fa74 	bl	800c73a <ZbApsEndpointProfile>
 8000252:	0001      	movs	r1, r0
 8000254:	b289      	uxth	r1, r1
 8000256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800025a:	4291      	cmp	r1, r2
 800025c:	d101      	bne.n	8000262 <ZbZclClusterGetProfileId+0x1c>
 800025e:	8aa1      	ldrh	r1, [r4, #20]
 8000260:	0008      	movs	r0, r1
 8000262:	b280      	uxth	r0, r0
 8000264:	bd10      	pop	{r4, pc}

08000266 <ZbZclClusterSetMinSecurity>:
 8000266:	b430      	push	{r4, r5}
 8000268:	0003      	movs	r3, r0
 800026a:	2001      	movs	r0, #1
 800026c:	7d9a      	ldrb	r2, [r3, #22]
 800026e:	f012 0203 	ands.w	r2, r2, #3
 8000272:	2a01      	cmp	r2, #1
 8000274:	d101      	bne.n	800027a <ZbZclClusterSetMinSecurity+0x14>
 8000276:	2401      	movs	r4, #1
 8000278:	e000      	b.n	800027c <ZbZclClusterSetMinSecurity+0x16>
 800027a:	2400      	movs	r4, #0
 800027c:	000a      	movs	r2, r1
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	2aab      	cmp	r2, #171	; 0xab
 8000282:	d01d      	beq.n	80002c0 <ZbZclClusterSetMinSecurity+0x5a>
 8000284:	2aac      	cmp	r2, #172	; 0xac
 8000286:	d00f      	beq.n	80002a8 <ZbZclClusterSetMinSecurity+0x42>
 8000288:	2aaf      	cmp	r2, #175	; 0xaf
 800028a:	d123      	bne.n	80002d4 <ZbZclClusterSetMinSecurity+0x6e>
 800028c:	8add      	ldrh	r5, [r3, #22]
 800028e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000292:	4015      	ands	r5, r2
 8000294:	82dd      	strh	r5, [r3, #22]
 8000296:	8add      	ldrh	r5, [r3, #22]
 8000298:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800029c:	4015      	ands	r5, r2
 800029e:	82dd      	strh	r5, [r3, #22]
 80002a0:	0022      	movs	r2, r4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	2a00      	cmp	r2, #0
 80002a6:	e017      	b.n	80002d8 <ZbZclClusterSetMinSecurity+0x72>
 80002a8:	8ada      	ldrh	r2, [r3, #22]
 80002aa:	f052 0202 	orrs.w	r2, r2, #2
 80002ae:	82da      	strh	r2, [r3, #22]
 80002b0:	8ada      	ldrh	r2, [r3, #22]
 80002b2:	f052 0201 	orrs.w	r2, r2, #1
 80002b6:	82da      	strh	r2, [r3, #22]
 80002b8:	0022      	movs	r2, r4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	2a00      	cmp	r2, #0
 80002be:	e00b      	b.n	80002d8 <ZbZclClusterSetMinSecurity+0x72>
 80002c0:	8add      	ldrh	r5, [r3, #22]
 80002c2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80002c6:	4015      	ands	r5, r2
 80002c8:	82dd      	strh	r5, [r3, #22]
 80002ca:	8ada      	ldrh	r2, [r3, #22]
 80002cc:	f052 0201 	orrs.w	r2, r2, #1
 80002d0:	82da      	strh	r2, [r3, #22]
 80002d2:	e001      	b.n	80002d8 <ZbZclClusterSetMinSecurity+0x72>
 80002d4:	2200      	movs	r2, #0
 80002d6:	0010      	movs	r0, r2
 80002d8:	0002      	movs	r2, r0
 80002da:	b2d2      	uxtb	r2, r2
 80002dc:	2a00      	cmp	r2, #0
 80002de:	d000      	beq.n	80002e2 <ZbZclClusterSetMinSecurity+0x7c>
 80002e0:	7499      	strb	r1, [r3, #18]
 80002e2:	b2c0      	uxtb	r0, r0
 80002e4:	bc30      	pop	{r4, r5}
 80002e6:	4770      	bx	lr

080002e8 <ZbZclClusterCheckMinSecurity>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	0004      	movs	r4, r0
 80002ec:	000d      	movs	r5, r1
 80002ee:	0016      	movs	r6, r2
 80002f0:	2700      	movs	r7, #0
 80002f2:	7ca0      	ldrb	r0, [r4, #18]
 80002f4:	28af      	cmp	r0, #175	; 0xaf
 80002f6:	d102      	bne.n	80002fe <ZbZclClusterCheckMinSecurity+0x16>
 80002f8:	2001      	movs	r0, #1
 80002fa:	0007      	movs	r7, r0
 80002fc:	e075      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 80002fe:	7ca0      	ldrb	r0, [r4, #18]
 8000300:	28ac      	cmp	r0, #172	; 0xac
 8000302:	d10a      	bne.n	800031a <ZbZclClusterCheckMinSecurity+0x32>
 8000304:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000308:	28ac      	cmp	r0, #172	; 0xac
 800030a:	d003      	beq.n	8000314 <ZbZclClusterCheckMinSecurity+0x2c>
 800030c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000310:	28ab      	cmp	r0, #171	; 0xab
 8000312:	d101      	bne.n	8000318 <ZbZclClusterCheckMinSecurity+0x30>
 8000314:	2001      	movs	r0, #1
 8000316:	0007      	movs	r7, r0
 8000318:	e067      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 800031a:	7ca0      	ldrb	r0, [r4, #18]
 800031c:	28ab      	cmp	r0, #171	; 0xab
 800031e:	d164      	bne.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 8000320:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000324:	28ab      	cmp	r0, #171	; 0xab
 8000326:	d102      	bne.n	800032e <ZbZclClusterCheckMinSecurity+0x46>
 8000328:	2001      	movs	r0, #1
 800032a:	0007      	movs	r7, r0
 800032c:	e05d      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 800032e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000332:	28ac      	cmp	r0, #172	; 0xac
 8000334:	d159      	bne.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 8000336:	89a0      	ldrh	r0, [r4, #12]
 8000338:	2819      	cmp	r0, #25
 800033a:	d114      	bne.n	8000366 <ZbZclClusterCheckMinSecurity+0x7e>
 800033c:	7f20      	ldrb	r0, [r4, #28]
 800033e:	2801      	cmp	r0, #1
 8000340:	d111      	bne.n	8000366 <ZbZclClusterCheckMinSecurity+0x7e>
 8000342:	0028      	movs	r0, r5
 8000344:	f00c fa29 	bl	800c79a <ZbApsAddrIsBcast>
 8000348:	2800      	cmp	r0, #0
 800034a:	d00b      	beq.n	8000364 <ZbZclClusterCheckMinSecurity+0x7c>
 800034c:	7830      	ldrb	r0, [r6, #0]
 800034e:	2801      	cmp	r0, #1
 8000350:	d108      	bne.n	8000364 <ZbZclClusterCheckMinSecurity+0x7c>
 8000352:	78b0      	ldrb	r0, [r6, #2]
 8000354:	2801      	cmp	r0, #1
 8000356:	d105      	bne.n	8000364 <ZbZclClusterCheckMinSecurity+0x7c>
 8000358:	79f0      	ldrb	r0, [r6, #7]
 800035a:	2800      	cmp	r0, #0
 800035c:	d102      	bne.n	8000364 <ZbZclClusterCheckMinSecurity+0x7c>
 800035e:	2001      	movs	r0, #1
 8000360:	0007      	movs	r7, r0
 8000362:	e042      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 8000364:	e041      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 8000366:	89a0      	ldrh	r0, [r4, #12]
 8000368:	f240 7102 	movw	r1, #1794	; 0x702
 800036c:	4288      	cmp	r0, r1
 800036e:	d11a      	bne.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 8000370:	7f20      	ldrb	r0, [r4, #28]
 8000372:	2800      	cmp	r0, #0
 8000374:	d117      	bne.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 8000376:	7830      	ldrb	r0, [r6, #0]
 8000378:	2800      	cmp	r0, #0
 800037a:	d114      	bne.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 800037c:	79f0      	ldrb	r0, [r6, #7]
 800037e:	2800      	cmp	r0, #0
 8000380:	d111      	bne.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 8000382:	78b0      	ldrb	r0, [r6, #2]
 8000384:	2800      	cmp	r0, #0
 8000386:	d10e      	bne.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 8000388:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800038a:	2802      	cmp	r0, #2
 800038c:	d30b      	bcc.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 800038e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000390:	f001 fdf6 	bl	8001f80 <pletoh16>
 8000394:	0001      	movs	r1, r0
 8000396:	b289      	uxth	r1, r1
 8000398:	f240 3206 	movw	r2, #774	; 0x306
 800039c:	4291      	cmp	r1, r2
 800039e:	d102      	bne.n	80003a6 <ZbZclClusterCheckMinSecurity+0xbe>
 80003a0:	2101      	movs	r1, #1
 80003a2:	000f      	movs	r7, r1
 80003a4:	e021      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 80003a6:	89a0      	ldrh	r0, [r4, #12]
 80003a8:	f240 7102 	movw	r1, #1794	; 0x702
 80003ac:	4288      	cmp	r0, r1
 80003ae:	d11b      	bne.n	80003e8 <ZbZclClusterCheckMinSecurity+0x100>
 80003b0:	7f20      	ldrb	r0, [r4, #28]
 80003b2:	2801      	cmp	r0, #1
 80003b4:	d118      	bne.n	80003e8 <ZbZclClusterCheckMinSecurity+0x100>
 80003b6:	7830      	ldrb	r0, [r6, #0]
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d114      	bne.n	80003e6 <ZbZclClusterCheckMinSecurity+0xfe>
 80003bc:	79f0      	ldrb	r0, [r6, #7]
 80003be:	2801      	cmp	r0, #1
 80003c0:	d111      	bne.n	80003e6 <ZbZclClusterCheckMinSecurity+0xfe>
 80003c2:	78b0      	ldrb	r0, [r6, #2]
 80003c4:	2801      	cmp	r0, #1
 80003c6:	d10e      	bne.n	80003e6 <ZbZclClusterCheckMinSecurity+0xfe>
 80003c8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80003ca:	2802      	cmp	r0, #2
 80003cc:	d30b      	bcc.n	80003e6 <ZbZclClusterCheckMinSecurity+0xfe>
 80003ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80003d0:	f001 fdd6 	bl	8001f80 <pletoh16>
 80003d4:	0001      	movs	r1, r0
 80003d6:	b289      	uxth	r1, r1
 80003d8:	f240 3206 	movw	r2, #774	; 0x306
 80003dc:	4291      	cmp	r1, r2
 80003de:	d102      	bne.n	80003e6 <ZbZclClusterCheckMinSecurity+0xfe>
 80003e0:	2101      	movs	r1, #1
 80003e2:	000f      	movs	r7, r1
 80003e4:	e001      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 80003e6:	e000      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 80003e8:	e7ff      	b.n	80003ea <ZbZclClusterCheckMinSecurity+0x102>
 80003ea:	0038      	movs	r0, r7
 80003ec:	b2c0      	uxtb	r0, r0
 80003ee:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080003f0 <ZbZclClusterSetTxOptions>:
 80003f0:	05ca      	lsls	r2, r1, #23
 80003f2:	d400      	bmi.n	80003f6 <ZbZclClusterSetTxOptions+0x6>
 80003f4:	82c1      	strh	r1, [r0, #22]
 80003f6:	4770      	bx	lr

080003f8 <ZbZclClusterGetTxOptions>:
 80003f8:	8ac0      	ldrh	r0, [r0, #22]
 80003fa:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 80003fe:	4008      	ands	r0, r1
 8000400:	4770      	bx	lr

08000402 <ZbZclTxOptsFromSecurityStatus>:
 8000402:	0001      	movs	r1, r0
 8000404:	2000      	movs	r0, #0
 8000406:	f050 0004 	orrs.w	r0, r0, #4
 800040a:	f050 0008 	orrs.w	r0, r0, #8
 800040e:	000a      	movs	r2, r1
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	2aab      	cmp	r2, #171	; 0xab
 8000414:	d102      	bne.n	800041c <ZbZclTxOptsFromSecurityStatus+0x1a>
 8000416:	f050 0001 	orrs.w	r0, r0, #1
 800041a:	e007      	b.n	800042c <ZbZclTxOptsFromSecurityStatus+0x2a>
 800041c:	000a      	movs	r2, r1
 800041e:	b2d2      	uxtb	r2, r2
 8000420:	2aac      	cmp	r2, #172	; 0xac
 8000422:	d103      	bne.n	800042c <ZbZclTxOptsFromSecurityStatus+0x2a>
 8000424:	f050 0001 	orrs.w	r0, r0, #1
 8000428:	f050 0002 	orrs.w	r0, r0, #2
 800042c:	b280      	uxth	r0, r0
 800042e:	4770      	bx	lr

08000430 <ZbZclClusterGetDirection>:
 8000430:	7f00      	ldrb	r0, [r0, #28]
 8000432:	4770      	bx	lr

08000434 <ZbZclClusterGetDirectionStr>:
 8000434:	0001      	movs	r1, r0
 8000436:	7f08      	ldrb	r0, [r1, #28]
 8000438:	2800      	cmp	r0, #0
 800043a:	d003      	beq.n	8000444 <ZbZclClusterGetDirectionStr+0x10>
 800043c:	2802      	cmp	r0, #2
 800043e:	d005      	beq.n	800044c <ZbZclClusterGetDirectionStr+0x18>
 8000440:	d302      	bcc.n	8000448 <ZbZclClusterGetDirectionStr+0x14>
 8000442:	e005      	b.n	8000450 <ZbZclClusterGetDirectionStr+0x1c>
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <.text_19>)
 8000446:	e004      	b.n	8000452 <ZbZclClusterGetDirectionStr+0x1e>
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <.text_20>)
 800044a:	e002      	b.n	8000452 <ZbZclClusterGetDirectionStr+0x1e>
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <.text_21>)
 800044e:	e000      	b.n	8000452 <ZbZclClusterGetDirectionStr+0x1e>
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <.text_22>)
 8000452:	4770      	bx	lr

08000454 <.text_19>:
 8000454:	08011524 	.word	0x08011524

08000458 <.text_20>:
 8000458:	0801152c 	.word	0x0801152c

0800045c <.text_21>:
 800045c:	08011534 	.word	0x08011534

08000460 <.text_22>:
 8000460:	0801153c 	.word	0x0801153c

08000464 <ZbZclClusterSetDiscoverRoute>:
 8000464:	7601      	strb	r1, [r0, #24]
 8000466:	4770      	bx	lr

08000468 <ZbZclClusterSetRadius>:
 8000468:	7641      	strb	r1, [r0, #25]
 800046a:	4770      	bx	lr

0800046c <ZbZclClusterGetRadius>:
 800046c:	7e40      	ldrb	r0, [r0, #25]
 800046e:	4770      	bx	lr

08000470 <ZbZclClusterSetMaxAsduLength>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	002e      	movs	r6, r5
 8000478:	f00b ff7c 	bl	800c374 <ZbHeapMaxAlloc>
 800047c:	0031      	movs	r1, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	4288      	cmp	r0, r1
 8000482:	d201      	bcs.n	8000488 <ZbZclClusterSetMaxAsduLength+0x18>
 8000484:	2000      	movs	r0, #0
 8000486:	e007      	b.n	8000498 <ZbZclClusterSetMaxAsduLength+0x28>
 8000488:	0030      	movs	r0, r6
 800048a:	b280      	uxth	r0, r0
 800048c:	2839      	cmp	r0, #57	; 0x39
 800048e:	d201      	bcs.n	8000494 <ZbZclClusterSetMaxAsduLength+0x24>
 8000490:	2039      	movs	r0, #57	; 0x39
 8000492:	0006      	movs	r6, r0
 8000494:	8366      	strh	r6, [r4, #26]
 8000496:	2001      	movs	r0, #1
 8000498:	bd70      	pop	{r4, r5, r6, pc}

0800049a <ZbZclClusterGetMaxAsduLength>:
 800049a:	8b40      	ldrh	r0, [r0, #26]
 800049c:	4770      	bx	lr

0800049e <ZbZclClusterInitCommandReq>:
 800049e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	2630      	movs	r6, #48	; 0x30
 80004a6:	2700      	movs	r7, #0
 80004a8:	003a      	movs	r2, r7
 80004aa:	0031      	movs	r1, r6
 80004ac:	0028      	movs	r0, r5
 80004ae:	f005 fffc 	bl	80064aa <__aeabi_memset>
 80004b2:	8aa0      	ldrh	r0, [r4, #20]
 80004b4:	8228      	strh	r0, [r5, #16]
 80004b6:	89a0      	ldrh	r0, [r4, #12]
 80004b8:	8268      	strh	r0, [r5, #18]
 80004ba:	7ba0      	ldrb	r0, [r4, #14]
 80004bc:	82a8      	strh	r0, [r5, #20]
 80004be:	8ae0      	ldrh	r0, [r4, #22]
 80004c0:	82e8      	strh	r0, [r5, #22]
 80004c2:	7e20      	ldrb	r0, [r4, #24]
 80004c4:	7628      	strb	r0, [r5, #24]
 80004c6:	7e60      	ldrb	r0, [r4, #25]
 80004c8:	7668      	strb	r0, [r5, #25]
 80004ca:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080004cc <ZbZclClusterInitApsdeReq>:
 80004cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004d0:	0005      	movs	r5, r0
 80004d2:	000e      	movs	r6, r1
 80004d4:	0014      	movs	r4, r2
 80004d6:	2730      	movs	r7, #48	; 0x30
 80004d8:	f05f 0800 	movs.w	r8, #0
 80004dc:	4642      	mov	r2, r8
 80004de:	0039      	movs	r1, r7
 80004e0:	0030      	movs	r0, r6
 80004e2:	f005 ffe2 	bl	80064aa <__aeabi_memset>
 80004e6:	8aa8      	ldrh	r0, [r5, #20]
 80004e8:	8230      	strh	r0, [r6, #16]
 80004ea:	89a8      	ldrh	r0, [r5, #12]
 80004ec:	8270      	strh	r0, [r6, #18]
 80004ee:	7ba8      	ldrb	r0, [r5, #14]
 80004f0:	82b0      	strh	r0, [r6, #20]
 80004f2:	8ae8      	ldrh	r0, [r5, #22]
 80004f4:	84b0      	strh	r0, [r6, #36]	; 0x24
 80004f6:	7e28      	ldrb	r0, [r5, #24]
 80004f8:	f886 0026 	strb.w	r0, [r6, #38]	; 0x26
 80004fc:	7e68      	ldrb	r0, [r5, #25]
 80004fe:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
 8000502:	2c00      	cmp	r4, #0
 8000504:	d00b      	beq.n	800051e <ZbZclClusterInitApsdeReq+0x52>
 8000506:	8ab0      	ldrh	r0, [r6, #20]
 8000508:	28ff      	cmp	r0, #255	; 0xff
 800050a:	d101      	bne.n	8000510 <ZbZclClusterInitApsdeReq+0x44>
 800050c:	8860      	ldrh	r0, [r4, #2]
 800050e:	82b0      	strh	r0, [r6, #20]
 8000510:	8c20      	ldrh	r0, [r4, #32]
 8000512:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000516:	4288      	cmp	r0, r1
 8000518:	d001      	beq.n	800051e <ZbZclClusterInitApsdeReq+0x52>
 800051a:	8c20      	ldrh	r0, [r4, #32]
 800051c:	8230      	strh	r0, [r6, #16]
 800051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000524 <zcl_cluster_command_dummy>:
 8000524:	0003      	movs	r3, r0
 8000526:	20ff      	movs	r0, #255	; 0xff
 8000528:	4770      	bx	lr

0800052a <ZbZclClusterAlloc>:
 800052a:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800052e:	0006      	movs	r6, r0
 8000530:	000f      	movs	r7, r1
 8000532:	4690      	mov	r8, r2
 8000534:	4699      	mov	r9, r3
 8000536:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000538:	2f6c      	cmp	r7, #108	; 0x6c
 800053a:	d201      	bcs.n	8000540 <ZbZclClusterAlloc+0x16>
 800053c:	2000      	movs	r0, #0
 800053e:	e07e      	b.n	800063e <ZbZclClusterAlloc+0x114>
 8000540:	2300      	movs	r3, #0
 8000542:	a282      	add	r2, pc, #520	; (adr r2, 800074c <.text_10>)
 8000544:	0039      	movs	r1, r7
 8000546:	0030      	movs	r0, r6
 8000548:	f00c fe74 	bl	800d234 <zb_heap_alloc>
 800054c:	0004      	movs	r4, r0
 800054e:	2c00      	cmp	r4, #0
 8000550:	d101      	bne.n	8000556 <ZbZclClusterAlloc+0x2c>
 8000552:	2000      	movs	r0, #0
 8000554:	e073      	b.n	800063e <ZbZclClusterAlloc+0x114>
 8000556:	f05f 0a00 	movs.w	sl, #0
 800055a:	4652      	mov	r2, sl
 800055c:	0039      	movs	r1, r7
 800055e:	0020      	movs	r0, r4
 8000560:	f005 ffa3 	bl	80064aa <__aeabi_memset>
 8000564:	6024      	str	r4, [r4, #0]
 8000566:	6064      	str	r4, [r4, #4]
 8000568:	60a6      	str	r6, [r4, #8]
 800056a:	f8a4 800c 	strh.w	r8, [r4, #12]
 800056e:	f884 900e 	strb.w	r9, [r4, #14]
 8000572:	2000      	movs	r0, #0
 8000574:	8220      	strh	r0, [r4, #16]
 8000576:	f44f 7082 	mov.w	r0, #260	; 0x104
 800057a:	82a0      	strh	r0, [r4, #20]
 800057c:	200f      	movs	r0, #15
 800057e:	82e0      	strh	r0, [r4, #22]
 8000580:	2001      	movs	r0, #1
 8000582:	7620      	strb	r0, [r4, #24]
 8000584:	2000      	movs	r0, #0
 8000586:	7660      	strb	r0, [r4, #25]
 8000588:	2039      	movs	r0, #57	; 0x39
 800058a:	8360      	strh	r0, [r4, #26]
 800058c:	7725      	strb	r5, [r4, #28]
 800058e:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8000592:	6260      	str	r0, [r4, #36]	; 0x24
 8000594:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8000598:	62a0      	str	r0, [r4, #40]	; 0x28
 800059a:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 800059e:	6320      	str	r0, [r4, #48]	; 0x30
 80005a0:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 80005a4:	6360      	str	r0, [r4, #52]	; 0x34
 80005a6:	9400      	str	r4, [sp, #0]
 80005a8:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 8000968 <.text_13>
 80005ac:	2281      	movs	r2, #129	; 0x81
 80005ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b2:	0030      	movs	r0, r6
 80005b4:	f00c f9f0 	bl	800c998 <ZbMsgFilterRegister>
 80005b8:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80005bc:	2800      	cmp	r0, #0
 80005be:	d104      	bne.n	80005ca <ZbZclClusterAlloc+0xa0>
 80005c0:	0020      	movs	r0, r4
 80005c2:	f000 f870 	bl	80006a6 <ZbZclClusterFree>
 80005c6:	2000      	movs	r0, #0
 80005c8:	e039      	b.n	800063e <ZbZclClusterAlloc+0x114>
 80005ca:	0022      	movs	r2, r4
 80005cc:	f8df 139c 	ldr.w	r1, [pc, #924]	; 800096c <.text_14>
 80005d0:	0030      	movs	r0, r6
 80005d2:	f00c fa99 	bl	800cb08 <ZbTimerAlloc>
 80005d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80005d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80005da:	2800      	cmp	r0, #0
 80005dc:	d104      	bne.n	80005e8 <ZbZclClusterAlloc+0xbe>
 80005de:	0020      	movs	r0, r4
 80005e0:	f000 f861 	bl	80006a6 <ZbZclClusterFree>
 80005e4:	2000      	movs	r0, #0
 80005e6:	e02a      	b.n	800063e <ZbZclClusterAlloc+0x114>
 80005e8:	0022      	movs	r2, r4
 80005ea:	f20f 1125 	addw	r1, pc, #293	; 0x125
 80005ee:	0030      	movs	r0, r6
 80005f0:	f00c fa8a 	bl	800cb08 <ZbTimerAlloc>
 80005f4:	6520      	str	r0, [r4, #80]	; 0x50
 80005f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d104      	bne.n	8000606 <ZbZclClusterAlloc+0xdc>
 80005fc:	0020      	movs	r0, r4
 80005fe:	f000 f852 	bl	80006a6 <ZbZclClusterFree>
 8000602:	2000      	movs	r0, #0
 8000604:	e01b      	b.n	800063e <ZbZclClusterAlloc+0x114>
 8000606:	21ac      	movs	r1, #172	; 0xac
 8000608:	0020      	movs	r0, r4
 800060a:	f7ff fe2c 	bl	8000266 <ZbZclClusterSetMinSecurity>
 800060e:	2201      	movs	r2, #1
 8000610:	f8df 135c 	ldr.w	r1, [pc, #860]	; 8000970 <.text_15>
 8000614:	0020      	movs	r0, r4
 8000616:	f003 fb15 	bl	8003c44 <ZbZclAttrAppendList>
 800061a:	2800      	cmp	r0, #0
 800061c:	d007      	beq.n	800062e <ZbZclClusterAlloc+0x104>
 800061e:	2300      	movs	r3, #0
 8000620:	a24a      	add	r2, pc, #296	; (adr r2, 800074c <.text_10>)
 8000622:	0021      	movs	r1, r4
 8000624:	0030      	movs	r0, r6
 8000626:	f00c fe14 	bl	800d252 <zb_heap_free>
 800062a:	2000      	movs	r0, #0
 800062c:	e007      	b.n	800063e <ZbZclClusterAlloc+0x114>
 800062e:	2201      	movs	r2, #1
 8000630:	2300      	movs	r3, #0
 8000632:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8000636:	0020      	movs	r0, r4
 8000638:	f003 f9f1 	bl	8003a1e <ZbZclAttrIntegerWrite>
 800063c:	0020      	movs	r0, r4
 800063e:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08000642 <ZbZclClusterAttach>:
 8000642:	b510      	push	{r4, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	7ba0      	ldrb	r0, [r4, #14]
 8000648:	28ff      	cmp	r0, #255	; 0xff
 800064a:	d104      	bne.n	8000656 <ZbZclClusterAttach+0x14>
 800064c:	89a0      	ldrh	r0, [r4, #12]
 800064e:	2800      	cmp	r0, #0
 8000650:	d001      	beq.n	8000656 <ZbZclClusterAttach+0x14>
 8000652:	89a0      	ldrh	r0, [r4, #12]
 8000654:	280a      	cmp	r0, #10
 8000656:	7ba0      	ldrb	r0, [r4, #14]
 8000658:	28ff      	cmp	r0, #255	; 0xff
 800065a:	d00b      	beq.n	8000674 <ZbZclClusterAttach+0x32>
 800065c:	7f23      	ldrb	r3, [r4, #28]
 800065e:	8aa2      	ldrh	r2, [r4, #20]
 8000660:	7ba1      	ldrb	r1, [r4, #14]
 8000662:	0020      	movs	r0, r4
 8000664:	f00c fd52 	bl	800d10c <ZbZclClusterBind>
 8000668:	0001      	movs	r1, r0
 800066a:	b2c9      	uxtb	r1, r1
 800066c:	2900      	cmp	r1, #0
 800066e:	d001      	beq.n	8000674 <ZbZclClusterAttach+0x32>
 8000670:	b2c0      	uxtb	r0, r0
 8000672:	e005      	b.n	8000680 <ZbZclClusterAttach+0x3e>
 8000674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000676:	2800      	cmp	r0, #0
 8000678:	d101      	bne.n	800067e <ZbZclClusterAttach+0x3c>
 800067a:	48be      	ldr	r0, [pc, #760]	; (8000974 <.text_16>)
 800067c:	65a0      	str	r0, [r4, #88]	; 0x58
 800067e:	2000      	movs	r0, #0
 8000680:	bd10      	pop	{r4, pc}

08000682 <ZbZclClusterDetach>:
 8000682:	b510      	push	{r4, lr}
 8000684:	0004      	movs	r4, r0
 8000686:	68a0      	ldr	r0, [r4, #8]
 8000688:	2800      	cmp	r0, #0
 800068a:	d00b      	beq.n	80006a4 <ZbZclClusterDetach+0x22>
 800068c:	0020      	movs	r0, r4
 800068e:	f00c fd7d 	bl	800d18c <ZbZclClusterUnbind>
 8000692:	0020      	movs	r0, r4
 8000694:	f00c fda4 	bl	800d1e0 <ZbZclClusterRemoveAlarmResetHandler>
 8000698:	7ba0      	ldrb	r0, [r4, #14]
 800069a:	28ff      	cmp	r0, #255	; 0xff
 800069c:	d002      	beq.n	80006a4 <ZbZclClusterDetach+0x22>
 800069e:	0020      	movs	r0, r4
 80006a0:	f00c fd01 	bl	800d0a6 <ZbZclClusterEndpointRemove>
 80006a4:	bd10      	pop	{r4, pc}

080006a6 <ZbZclClusterFree>:
 80006a6:	b538      	push	{r3, r4, r5, lr}
 80006a8:	0005      	movs	r5, r0
 80006aa:	68ac      	ldr	r4, [r5, #8]
 80006ac:	2c00      	cmp	r4, #0
 80006ae:	d02d      	beq.n	800070c <ZbZclClusterFree+0x66>
 80006b0:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80006b2:	2800      	cmp	r0, #0
 80006b4:	d004      	beq.n	80006c0 <ZbZclClusterFree+0x1a>
 80006b6:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80006b8:	f00c fa76 	bl	800cba8 <ZbTimerFree>
 80006bc:	2000      	movs	r0, #0
 80006be:	6528      	str	r0, [r5, #80]	; 0x50
 80006c0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d004      	beq.n	80006d0 <ZbZclClusterFree+0x2a>
 80006c6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80006c8:	f00c fa6e 	bl	800cba8 <ZbTimerFree>
 80006cc:	2000      	movs	r0, #0
 80006ce:	63a8      	str	r0, [r5, #56]	; 0x38
 80006d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80006d2:	2800      	cmp	r0, #0
 80006d4:	d005      	beq.n	80006e2 <ZbZclClusterFree+0x3c>
 80006d6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80006d8:	0020      	movs	r0, r4
 80006da:	f00c f9bf 	bl	800ca5c <ZbMsgFilterRemove>
 80006de:	2000      	movs	r0, #0
 80006e0:	62e8      	str	r0, [r5, #44]	; 0x2c
 80006e2:	0028      	movs	r0, r5
 80006e4:	f004 f866 	bl	80047b4 <ZbZclReportCleanup>
 80006e8:	0028      	movs	r0, r5
 80006ea:	f7ff ffca 	bl	8000682 <ZbZclClusterDetach>
 80006ee:	0028      	movs	r0, r5
 80006f0:	f003 fbb6 	bl	8003e60 <ZbZclAttrFreeList>
 80006f4:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d002      	beq.n	8000700 <ZbZclClusterFree+0x5a>
 80006fa:	0028      	movs	r0, r5
 80006fc:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80006fe:	4788      	blx	r1
 8000700:	2300      	movs	r3, #0
 8000702:	a212      	add	r2, pc, #72	; (adr r2, 800074c <.text_10>)
 8000704:	0029      	movs	r1, r5
 8000706:	0020      	movs	r0, r4
 8000708:	f00c fda3 	bl	800d252 <zb_heap_free>
 800070c:	bd31      	pop	{r0, r4, r5, pc}
	...

08000710 <zcl_cluster_persist_timer>:
 8000710:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000712:	0005      	movs	r5, r0
 8000714:	000e      	movs	r6, r1
 8000716:	0037      	movs	r7, r6
 8000718:	a902      	add	r1, sp, #8
 800071a:	0038      	movs	r0, r7
 800071c:	f000 f818 	bl	8000750 <zcl_persist_read_attrs>
 8000720:	0004      	movs	r4, r0
 8000722:	2c00      	cmp	r4, #0
 8000724:	d010      	beq.n	8000748 <zcl_cluster_persist_timer+0x38>
 8000726:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800072a:	9001      	str	r0, [sp, #4]
 800072c:	9400      	str	r4, [sp, #0]
 800072e:	7bbb      	ldrb	r3, [r7, #14]
 8000730:	b29b      	uxth	r3, r3
 8000732:	7f3a      	ldrb	r2, [r7, #28]
 8000734:	89b9      	ldrh	r1, [r7, #12]
 8000736:	68b8      	ldr	r0, [r7, #8]
 8000738:	f000 f91e 	bl	8000978 <zcl_persist_send_cache>
 800073c:	2300      	movs	r3, #0
 800073e:	a203      	add	r2, pc, #12	; (adr r2, 800074c <.text_10>)
 8000740:	0021      	movs	r1, r4
 8000742:	68b8      	ldr	r0, [r7, #8]
 8000744:	f00c fd85 	bl	800d252 <zb_heap_free>
 8000748:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0800074c <.text_10>:
 800074c:	00000000 	.word	0x00000000

08000750 <zcl_persist_read_attrs>:
 8000750:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000754:	b08c      	sub	sp, #48	; 0x30
 8000756:	0006      	movs	r6, r0
 8000758:	f05f 0900 	movs.w	r9, #0
 800075c:	f05f 0800 	movs.w	r8, #0
 8000760:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000762:	f116 0124 	adds.w	r1, r6, #36	; 0x24
 8000766:	4288      	cmp	r0, r1
 8000768:	d001      	beq.n	800076e <zcl_persist_read_attrs+0x1e>
 800076a:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800076c:	e000      	b.n	8000770 <zcl_persist_read_attrs+0x20>
 800076e:	2400      	movs	r4, #0
 8000770:	2c00      	cmp	r4, #0
 8000772:	d01a      	beq.n	80007aa <zcl_persist_read_attrs+0x5a>
 8000774:	0027      	movs	r7, r4
 8000776:	68b8      	ldr	r0, [r7, #8]
 8000778:	7900      	ldrb	r0, [r0, #4]
 800077a:	0740      	lsls	r0, r0, #29
 800077c:	d50c      	bpl.n	8000798 <zcl_persist_read_attrs+0x48>
 800077e:	6938      	ldr	r0, [r7, #16]
 8000780:	2800      	cmp	r0, #0
 8000782:	d003      	beq.n	800078c <zcl_persist_read_attrs+0x3c>
 8000784:	6938      	ldr	r0, [r7, #16]
 8000786:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800078a:	d300      	bcc.n	800078e <zcl_persist_read_attrs+0x3e>
 800078c:	e004      	b.n	8000798 <zcl_persist_read_attrs+0x48>
 800078e:	f118 0804 	adds.w	r8, r8, #4
 8000792:	6938      	ldr	r0, [r7, #16]
 8000794:	eb10 0808 	adds.w	r8, r0, r8
 8000798:	6820      	ldr	r0, [r4, #0]
 800079a:	f116 0124 	adds.w	r1, r6, #36	; 0x24
 800079e:	4288      	cmp	r0, r1
 80007a0:	d001      	beq.n	80007a6 <zcl_persist_read_attrs+0x56>
 80007a2:	6824      	ldr	r4, [r4, #0]
 80007a4:	e7e4      	b.n	8000770 <zcl_persist_read_attrs+0x20>
 80007a6:	2400      	movs	r4, #0
 80007a8:	e7e2      	b.n	8000770 <zcl_persist_read_attrs+0x20>
 80007aa:	4640      	mov	r0, r8
 80007ac:	b280      	uxth	r0, r0
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d101      	bne.n	80007b6 <zcl_persist_read_attrs+0x66>
 80007b2:	2000      	movs	r0, #0
 80007b4:	e0d2      	b.n	800095c <zcl_persist_read_attrs+0x20c>
 80007b6:	2300      	movs	r3, #0
 80007b8:	a26a      	add	r2, pc, #424	; (adr r2, 8000964 <.text_12>)
 80007ba:	4641      	mov	r1, r8
 80007bc:	b289      	uxth	r1, r1
 80007be:	68b0      	ldr	r0, [r6, #8]
 80007c0:	f00c fd38 	bl	800d234 <zb_heap_alloc>
 80007c4:	0005      	movs	r5, r0
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d101      	bne.n	80007ce <zcl_persist_read_attrs+0x7e>
 80007ca:	2000      	movs	r0, #0
 80007cc:	e0c6      	b.n	800095c <zcl_persist_read_attrs+0x20c>
 80007ce:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80007d0:	f116 0124 	adds.w	r1, r6, #36	; 0x24
 80007d4:	4288      	cmp	r0, r1
 80007d6:	d001      	beq.n	80007dc <zcl_persist_read_attrs+0x8c>
 80007d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80007da:	e000      	b.n	80007de <zcl_persist_read_attrs+0x8e>
 80007dc:	2400      	movs	r4, #0
 80007de:	2c00      	cmp	r4, #0
 80007e0:	f000 80b8 	beq.w	8000954 <zcl_persist_read_attrs+0x204>
 80007e4:	0027      	movs	r7, r4
 80007e6:	68b8      	ldr	r0, [r7, #8]
 80007e8:	7900      	ldrb	r0, [r0, #4]
 80007ea:	0740      	lsls	r0, r0, #29
 80007ec:	f140 80a9 	bpl.w	8000942 <zcl_persist_read_attrs+0x1f2>
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	7900      	ldrb	r0, [r0, #4]
 80007f4:	06c0      	lsls	r0, r0, #27
 80007f6:	d564      	bpl.n	80008c2 <zcl_persist_read_attrs+0x172>
 80007f8:	4648      	mov	r0, r9
 80007fa:	b280      	uxth	r0, r0
 80007fc:	4428      	add	r0, r5
 80007fe:	1d00      	adds	r0, r0, #4
 8000800:	9001      	str	r0, [sp, #4]
 8000802:	4641      	mov	r1, r8
 8000804:	b289      	uxth	r1, r1
 8000806:	4648      	mov	r0, r9
 8000808:	b280      	uxth	r0, r0
 800080a:	1a09      	subs	r1, r1, r0
 800080c:	1f08      	subs	r0, r1, #4
 800080e:	f8ad 0000 	strh.w	r0, [sp]
 8000812:	2020      	movs	r0, #32
 8000814:	9003      	str	r0, [sp, #12]
 8000816:	2000      	movs	r0, #0
 8000818:	9002      	str	r0, [sp, #8]
 800081a:	f10d 0a10 	add.w	sl, sp, #16
 800081e:	9a02      	ldr	r2, [sp, #8]
 8000820:	9903      	ldr	r1, [sp, #12]
 8000822:	4650      	mov	r0, sl
 8000824:	f005 fe41 	bl	80064aa <__aeabi_memset>
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	9004      	str	r0, [sp, #16]
 800082c:	2000      	movs	r0, #0
 800082e:	f88d 0014 	strb.w	r0, [sp, #20]
 8000832:	9801      	ldr	r0, [sp, #4]
 8000834:	9006      	str	r0, [sp, #24]
 8000836:	f8bd 0000 	ldrh.w	r0, [sp]
 800083a:	9007      	str	r0, [sp, #28]
 800083c:	6d70      	ldr	r0, [r6, #84]	; 0x54
 800083e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000840:	aa04      	add	r2, sp, #16
 8000842:	0039      	movs	r1, r7
 8000844:	0030      	movs	r0, r6
 8000846:	f003 fad7 	bl	8003df8 <ZbZclAttrCallbackExec>
 800084a:	4682      	mov	sl, r0
 800084c:	4650      	mov	r0, sl
 800084e:	b2c0      	uxtb	r0, r0
 8000850:	2800      	cmp	r0, #0
 8000852:	d176      	bne.n	8000942 <zcl_persist_read_attrs+0x1f2>
 8000854:	2300      	movs	r3, #0
 8000856:	f8bd 2000 	ldrh.w	r2, [sp]
 800085a:	9901      	ldr	r1, [sp, #4]
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	7880      	ldrb	r0, [r0, #2]
 8000860:	f002 fb85 	bl	8002f6e <ZbZclAttrParseLength>
 8000864:	4683      	mov	fp, r0
 8000866:	f1bb 0f01 	cmp.w	fp, #1
 800086a:	db02      	blt.n	8000872 <zcl_persist_read_attrs+0x122>
 800086c:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 8000870:	db00      	blt.n	8000874 <zcl_persist_read_attrs+0x124>
 8000872:	e066      	b.n	8000942 <zcl_persist_read_attrs+0x1f2>
 8000874:	4640      	mov	r0, r8
 8000876:	b280      	uxth	r0, r0
 8000878:	4649      	mov	r1, r9
 800087a:	b289      	uxth	r1, r1
 800087c:	fa11 f18b 	uxtah	r1, r1, fp
 8000880:	1d09      	adds	r1, r1, #4
 8000882:	4288      	cmp	r0, r1
 8000884:	d207      	bcs.n	8000896 <zcl_persist_read_attrs+0x146>
 8000886:	2300      	movs	r3, #0
 8000888:	a236      	add	r2, pc, #216	; (adr r2, 8000964 <.text_12>)
 800088a:	0029      	movs	r1, r5
 800088c:	68b0      	ldr	r0, [r6, #8]
 800088e:	f00c fce0 	bl	800d252 <zb_heap_free>
 8000892:	2000      	movs	r0, #0
 8000894:	e062      	b.n	800095c <zcl_persist_read_attrs+0x20c>
 8000896:	68b8      	ldr	r0, [r7, #8]
 8000898:	8801      	ldrh	r1, [r0, #0]
 800089a:	4648      	mov	r0, r9
 800089c:	b280      	uxth	r0, r0
 800089e:	4428      	add	r0, r5
 80008a0:	f001 fbba 	bl	8002018 <putle16>
 80008a4:	f119 0902 	adds.w	r9, r9, #2
 80008a8:	4658      	mov	r0, fp
 80008aa:	0001      	movs	r1, r0
 80008ac:	b289      	uxth	r1, r1
 80008ae:	4648      	mov	r0, r9
 80008b0:	b280      	uxth	r0, r0
 80008b2:	4428      	add	r0, r5
 80008b4:	f001 fbb0 	bl	8002018 <putle16>
 80008b8:	f119 0902 	adds.w	r9, r9, #2
 80008bc:	eb1b 0909 	adds.w	r9, fp, r9
 80008c0:	e03f      	b.n	8000942 <zcl_persist_read_attrs+0x1f2>
 80008c2:	2300      	movs	r3, #0
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	68f9      	ldr	r1, [r7, #12]
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	7880      	ldrb	r0, [r0, #2]
 80008cc:	f002 fb4f 	bl	8002f6e <ZbZclAttrParseLength>
 80008d0:	4683      	mov	fp, r0
 80008d2:	f1bb 0f01 	cmp.w	fp, #1
 80008d6:	db02      	blt.n	80008de <zcl_persist_read_attrs+0x18e>
 80008d8:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 80008dc:	db00      	blt.n	80008e0 <zcl_persist_read_attrs+0x190>
 80008de:	e030      	b.n	8000942 <zcl_persist_read_attrs+0x1f2>
 80008e0:	4640      	mov	r0, r8
 80008e2:	b280      	uxth	r0, r0
 80008e4:	4649      	mov	r1, r9
 80008e6:	b289      	uxth	r1, r1
 80008e8:	fa11 f18b 	uxtah	r1, r1, fp
 80008ec:	1d09      	adds	r1, r1, #4
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d207      	bcs.n	8000902 <zcl_persist_read_attrs+0x1b2>
 80008f2:	2300      	movs	r3, #0
 80008f4:	a21b      	add	r2, pc, #108	; (adr r2, 8000964 <.text_12>)
 80008f6:	0029      	movs	r1, r5
 80008f8:	68b0      	ldr	r0, [r6, #8]
 80008fa:	f00c fcaa 	bl	800d252 <zb_heap_free>
 80008fe:	2000      	movs	r0, #0
 8000900:	e02c      	b.n	800095c <zcl_persist_read_attrs+0x20c>
 8000902:	68b8      	ldr	r0, [r7, #8]
 8000904:	8801      	ldrh	r1, [r0, #0]
 8000906:	4648      	mov	r0, r9
 8000908:	b280      	uxth	r0, r0
 800090a:	4428      	add	r0, r5
 800090c:	f001 fb84 	bl	8002018 <putle16>
 8000910:	f119 0902 	adds.w	r9, r9, #2
 8000914:	4658      	mov	r0, fp
 8000916:	0001      	movs	r1, r0
 8000918:	b289      	uxth	r1, r1
 800091a:	4648      	mov	r0, r9
 800091c:	b280      	uxth	r0, r0
 800091e:	4428      	add	r0, r5
 8000920:	f001 fb7a 	bl	8002018 <putle16>
 8000924:	f119 0902 	adds.w	r9, r9, #2
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	9000      	str	r0, [sp, #0]
 800092c:	4648      	mov	r0, r9
 800092e:	b280      	uxth	r0, r0
 8000930:	eb05 0a00 	add.w	sl, r5, r0
 8000934:	465a      	mov	r2, fp
 8000936:	9900      	ldr	r1, [sp, #0]
 8000938:	4650      	mov	r0, sl
 800093a:	f00f f95d 	bl	800fbf8 <__aeabi_memcpy>
 800093e:	eb1b 0909 	adds.w	r9, fp, r9
 8000942:	6820      	ldr	r0, [r4, #0]
 8000944:	f116 0124 	adds.w	r1, r6, #36	; 0x24
 8000948:	4288      	cmp	r0, r1
 800094a:	d001      	beq.n	8000950 <zcl_persist_read_attrs+0x200>
 800094c:	6824      	ldr	r4, [r4, #0]
 800094e:	e746      	b.n	80007de <zcl_persist_read_attrs+0x8e>
 8000950:	2400      	movs	r4, #0
 8000952:	e744      	b.n	80007de <zcl_persist_read_attrs+0x8e>
 8000954:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000956:	f8a0 9000 	strh.w	r9, [r0]
 800095a:	0028      	movs	r0, r5
 800095c:	b00d      	add	sp, #52	; 0x34
 800095e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000964 <.text_12>:
 8000964:	00000000 	.word	0x00000000

08000968 <.text_13>:
 8000968:	08004829 	.word	0x08004829

0800096c <.text_14>:
 800096c:	0800429d 	.word	0x0800429d

08000970 <.text_15>:
 8000970:	08011548 	.word	0x08011548

08000974 <.text_16>:
 8000974:	08000525 	.word	0x08000525

08000978 <zcl_persist_send_cache>:
 8000978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800097c:	b098      	sub	sp, #96	; 0x60
 800097e:	0005      	movs	r5, r0
 8000980:	001e      	movs	r6, r3
 8000982:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8000986:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8000988:	f05f 0800 	movs.w	r8, #0
 800098c:	0030      	movs	r0, r6
 800098e:	b280      	uxth	r0, r0
 8000990:	28ff      	cmp	r0, #255	; 0xff
 8000992:	d101      	bne.n	8000998 <zcl_persist_send_cache+0x20>
 8000994:	2085      	movs	r0, #133	; 0x85
 8000996:	e0a3      	b.n	8000ae0 <zcl_persist_send_cache+0x168>
 8000998:	0020      	movs	r0, r4
 800099a:	b280      	uxth	r0, r0
 800099c:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 80009a0:	4288      	cmp	r0, r1
 80009a2:	d301      	bcc.n	80009a8 <zcl_persist_send_cache+0x30>
 80009a4:	2089      	movs	r0, #137	; 0x89
 80009a6:	e09b      	b.n	8000ae0 <zcl_persist_send_cache+0x168>
 80009a8:	f05f 0908 	movs.w	r9, #8
 80009ac:	f05f 0b00 	movs.w	fp, #0
 80009b0:	466f      	mov	r7, sp
 80009b2:	465a      	mov	r2, fp
 80009b4:	4649      	mov	r1, r9
 80009b6:	0038      	movs	r0, r7
 80009b8:	f005 fd77 	bl	80064aa <__aeabi_memset>
 80009bc:	2001      	movs	r0, #1
 80009be:	f88d 0000 	strb.w	r0, [sp]
 80009c2:	2001      	movs	r0, #1
 80009c4:	f88d 0001 	strb.w	r0, [sp, #1]
 80009c8:	2000      	movs	r0, #0
 80009ca:	f88d 0002 	strb.w	r0, [sp, #2]
 80009ce:	2001      	movs	r0, #1
 80009d0:	f88d 0003 	strb.w	r0, [sp, #3]
 80009d4:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80009d8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80009dc:	f00c fa3a 	bl	800ce54 <ZbZclGetNextSeqnum>
 80009e0:	f88d 0006 	strb.w	r0, [sp, #6]
 80009e4:	2000      	movs	r0, #0
 80009e6:	f88d 0007 	strb.w	r0, [sp, #7]
 80009ea:	2205      	movs	r2, #5
 80009ec:	a904      	add	r1, sp, #16
 80009ee:	4668      	mov	r0, sp
 80009f0:	f000 fda2 	bl	8001538 <ZbZclAppendHeader>
 80009f4:	0007      	movs	r7, r0
 80009f6:	2f00      	cmp	r7, #0
 80009f8:	d501      	bpl.n	80009fe <zcl_persist_send_cache+0x86>
 80009fa:	2085      	movs	r0, #133	; 0x85
 80009fc:	e070      	b.n	8000ae0 <zcl_persist_send_cache+0x168>
 80009fe:	a804      	add	r0, sp, #16
 8000a00:	a912      	add	r1, sp, #72	; 0x48
 8000a02:	f841 0038 	str.w	r0, [r1, r8, lsl #3]
 8000a06:	a812      	add	r0, sp, #72	; 0x48
 8000a08:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8000a0c:	6047      	str	r7, [r0, #4]
 8000a0e:	f118 0801 	adds.w	r8, r8, #1
 8000a12:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8000a16:	a802      	add	r0, sp, #8
 8000a18:	f001 fafe 	bl	8002018 <putle16>
 8000a1c:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8000a20:	f88d 000a 	strb.w	r0, [sp, #10]
 8000a24:	a802      	add	r0, sp, #8
 8000a26:	a912      	add	r1, sp, #72	; 0x48
 8000a28:	f841 0038 	str.w	r0, [r1, r8, lsl #3]
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	a912      	add	r1, sp, #72	; 0x48
 8000a30:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8000a34:	6048      	str	r0, [r1, #4]
 8000a36:	f118 0801 	adds.w	r8, r8, #1
 8000a3a:	a812      	add	r0, sp, #72	; 0x48
 8000a3c:	f840 a038 	str.w	sl, [r0, r8, lsl #3]
 8000a40:	0020      	movs	r0, r4
 8000a42:	b280      	uxth	r0, r0
 8000a44:	a912      	add	r1, sp, #72	; 0x48
 8000a46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8000a4a:	6048      	str	r0, [r1, #4]
 8000a4c:	f118 0801 	adds.w	r8, r8, #1
 8000a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a54:	f05f 0830 	movs.w	r8, #48	; 0x30
 8000a58:	f05f 0900 	movs.w	r9, #0
 8000a5c:	f10d 0b18 	add.w	fp, sp, #24
 8000a60:	464a      	mov	r2, r9
 8000a62:	4641      	mov	r1, r8
 8000a64:	4658      	mov	r0, fp
 8000a66:	f005 fd20 	bl	80064aa <__aeabi_memset>
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f88d 0018 	strb.w	r0, [sp, #24]
 8000a70:	0028      	movs	r0, r5
 8000a72:	f00b fd19 	bl	800c4a8 <ZbExtendedAddress>
 8000a76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000a7a:	20ff      	movs	r0, #255	; 0xff
 8000a7c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8000a80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a84:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8000a88:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8000a8c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8000a90:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8000a94:	a812      	add	r0, sp, #72	; 0x48
 8000a96:	900c      	str	r0, [sp, #48]	; 0x30
 8000a98:	9803      	ldr	r0, [sp, #12]
 8000a9a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8000aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000aae:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8000ab2:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8000ab6:	f050 0008 	orrs.w	r0, r0, #8
 8000aba:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8000abe:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8000ac2:	f050 0004 	orrs.w	r0, r0, #4
 8000ac6:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8000aca:	2300      	movs	r3, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	a906      	add	r1, sp, #24
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	f00b fded 	bl	800c6b0 <ZbApsdeDataReqCallback>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d001      	beq.n	8000ade <zcl_persist_send_cache+0x166>
 8000ada:	2001      	movs	r0, #1
 8000adc:	e000      	b.n	8000ae0 <zcl_persist_send_cache+0x168>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	b01b      	add	sp, #108	; 0x6c
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000ae8 <zcl_persist_handle_set>:
 8000ae8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	0004      	movs	r4, r0
 8000aee:	000d      	movs	r5, r1
 8000af0:	0016      	movs	r6, r2
 8000af2:	f05f 0b00 	movs.w	fp, #0
 8000af6:	4658      	mov	r0, fp
 8000af8:	0031      	movs	r1, r6
 8000afa:	b280      	uxth	r0, r0
 8000afc:	b289      	uxth	r1, r1
 8000afe:	4288      	cmp	r0, r1
 8000b00:	d23c      	bcs.n	8000b7c <zcl_persist_handle_set+0x94>
 8000b02:	0030      	movs	r0, r6
 8000b04:	b280      	uxth	r0, r0
 8000b06:	4659      	mov	r1, fp
 8000b08:	b289      	uxth	r1, r1
 8000b0a:	1d09      	adds	r1, r1, #4
 8000b0c:	4288      	cmp	r0, r1
 8000b0e:	d201      	bcs.n	8000b14 <zcl_persist_handle_set+0x2c>
 8000b10:	2087      	movs	r0, #135	; 0x87
 8000b12:	e034      	b.n	8000b7e <zcl_persist_handle_set+0x96>
 8000b14:	4658      	mov	r0, fp
 8000b16:	b280      	uxth	r0, r0
 8000b18:	4428      	add	r0, r5
 8000b1a:	f001 fa31 	bl	8001f80 <pletoh16>
 8000b1e:	0007      	movs	r7, r0
 8000b20:	f11b 0b02 	adds.w	fp, fp, #2
 8000b24:	4658      	mov	r0, fp
 8000b26:	b280      	uxth	r0, r0
 8000b28:	4428      	add	r0, r5
 8000b2a:	f001 fa29 	bl	8001f80 <pletoh16>
 8000b2e:	4680      	mov	r8, r0
 8000b30:	f11b 0b02 	adds.w	fp, fp, #2
 8000b34:	0030      	movs	r0, r6
 8000b36:	b280      	uxth	r0, r0
 8000b38:	4641      	mov	r1, r8
 8000b3a:	b289      	uxth	r1, r1
 8000b3c:	fa11 f18b 	uxtah	r1, r1, fp
 8000b40:	4288      	cmp	r0, r1
 8000b42:	da01      	bge.n	8000b48 <zcl_persist_handle_set+0x60>
 8000b44:	2087      	movs	r0, #135	; 0x87
 8000b46:	e01a      	b.n	8000b7e <zcl_persist_handle_set+0x96>
 8000b48:	4658      	mov	r0, fp
 8000b4a:	b280      	uxth	r0, r0
 8000b4c:	4428      	add	r0, r5
 8000b4e:	4681      	mov	r9, r0
 8000b50:	eb18 0b0b 	adds.w	fp, r8, fp
 8000b54:	2006      	movs	r0, #6
 8000b56:	9001      	str	r0, [sp, #4]
 8000b58:	4640      	mov	r0, r8
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	464b      	mov	r3, r9
 8000b60:	003a      	movs	r2, r7
 8000b62:	b292      	uxth	r2, r2
 8000b64:	2100      	movs	r1, #0
 8000b66:	0020      	movs	r0, r4
 8000b68:	f001 fd2c 	bl	80025c4 <ZbZclAttrWrite>
 8000b6c:	4682      	mov	sl, r0
 8000b6e:	4650      	mov	r0, sl
 8000b70:	b2c0      	uxtb	r0, r0
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d0bf      	beq.n	8000af6 <zcl_persist_handle_set+0xe>
 8000b76:	4650      	mov	r0, sl
 8000b78:	b2c0      	uxtb	r0, r0
 8000b7a:	e000      	b.n	8000b7e <zcl_persist_handle_set+0x96>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b82 <ZbZclHandleReadAttr>:
 8000b82:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b86:	b092      	sub	sp, #72	; 0x48
 8000b88:	0005      	movs	r5, r0
 8000b8a:	000e      	movs	r6, r1
 8000b8c:	0017      	movs	r7, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	a267      	add	r2, pc, #412	; (adr r2, 8000d30 <.text_5>)
 8000b92:	8b69      	ldrh	r1, [r5, #26]
 8000b94:	68a8      	ldr	r0, [r5, #8]
 8000b96:	f00c fb4d 	bl	800d234 <zb_heap_alloc>
 8000b9a:	0004      	movs	r4, r0
 8000b9c:	2c00      	cmp	r4, #0
 8000b9e:	d106      	bne.n	8000bae <ZbZclHandleReadAttr+0x2c>
 8000ba0:	2389      	movs	r3, #137	; 0x89
 8000ba2:	0032      	movs	r2, r6
 8000ba4:	0039      	movs	r1, r7
 8000ba6:	0028      	movs	r0, r5
 8000ba8:	f00c f9c9 	bl	800cf3e <ZbZclSendDefaultResponse>
 8000bac:	e0bc      	b.n	8000d28 <ZbZclHandleReadAttr+0x1a6>
 8000bae:	f05f 0908 	movs.w	r9, #8
 8000bb2:	f05f 0a00 	movs.w	sl, #0
 8000bb6:	f10d 0b0c 	add.w	fp, sp, #12
 8000bba:	4652      	mov	r2, sl
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	4658      	mov	r0, fp
 8000bc0:	f005 fc73 	bl	80064aa <__aeabi_memset>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f88d 000c 	strb.w	r0, [sp, #12]
 8000bca:	7870      	ldrb	r0, [r6, #1]
 8000bcc:	f88d 000d 	strb.w	r0, [sp, #13]
 8000bd0:	78b0      	ldrb	r0, [r6, #2]
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d101      	bne.n	8000bda <ZbZclHandleReadAttr+0x58>
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	e000      	b.n	8000bdc <ZbZclHandleReadAttr+0x5a>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f88d 000e 	strb.w	r0, [sp, #14]
 8000be0:	2001      	movs	r0, #1
 8000be2:	f88d 000f 	strb.w	r0, [sp, #15]
 8000be6:	88b0      	ldrh	r0, [r6, #4]
 8000be8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8000bec:	79b0      	ldrb	r0, [r6, #6]
 8000bee:	f88d 0012 	strb.w	r0, [sp, #18]
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f88d 0013 	strb.w	r0, [sp, #19]
 8000bf8:	8b6a      	ldrh	r2, [r5, #26]
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	a803      	add	r0, sp, #12
 8000bfe:	f000 fc9b 	bl	8001538 <ZbZclAppendHeader>
 8000c02:	4681      	mov	r9, r0
 8000c04:	f1b9 0f00 	cmp.w	r9, #0
 8000c08:	d50c      	bpl.n	8000c24 <ZbZclHandleReadAttr+0xa2>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	a248      	add	r2, pc, #288	; (adr r2, 8000d30 <.text_5>)
 8000c0e:	0021      	movs	r1, r4
 8000c10:	68a8      	ldr	r0, [r5, #8]
 8000c12:	f00c fb1e 	bl	800d252 <zb_heap_free>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	0032      	movs	r2, r6
 8000c1a:	0039      	movs	r1, r7
 8000c1c:	0028      	movs	r0, r5
 8000c1e:	f00c f98e 	bl	800cf3e <ZbZclSendDefaultResponse>
 8000c22:	e081      	b.n	8000d28 <ZbZclHandleReadAttr+0x1a6>
 8000c24:	46cb      	mov	fp, r9
 8000c26:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8000c28:	2802      	cmp	r0, #2
 8000c2a:	d352      	bcc.n	8000cd2 <ZbZclHandleReadAttr+0x150>
 8000c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c2e:	f001 f9a7 	bl	8001f80 <pletoh16>
 8000c32:	4680      	mov	r8, r0
 8000c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c36:	1c80      	adds	r0, r0, #2
 8000c38:	6278      	str	r0, [r7, #36]	; 0x24
 8000c3a:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8000c3c:	1e80      	subs	r0, r0, #2
 8000c3e:	8538      	strh	r0, [r7, #40]	; 0x28
 8000c40:	f11b 0004 	adds.w	r0, fp, #4
 8000c44:	8b69      	ldrh	r1, [r5, #26]
 8000c46:	4288      	cmp	r0, r1
 8000c48:	d243      	bcs.n	8000cd2 <ZbZclHandleReadAttr+0x150>
 8000c4a:	4641      	mov	r1, r8
 8000c4c:	b289      	uxth	r1, r1
 8000c4e:	eb04 000b 	add.w	r0, r4, fp
 8000c52:	f001 f9e1 	bl	8002018 <putle16>
 8000c56:	f11b 0b02 	adds.w	fp, fp, #2
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	9001      	str	r0, [sp, #4]
 8000c5e:	8b68      	ldrh	r0, [r5, #26]
 8000c60:	ebb0 000b 	subs.w	r0, r0, fp
 8000c64:	1e80      	subs	r0, r0, #2
 8000c66:	9000      	str	r0, [sp, #0]
 8000c68:	eb04 000b 	add.w	r0, r4, fp
 8000c6c:	1c83      	adds	r3, r0, #2
 8000c6e:	aa02      	add	r2, sp, #8
 8000c70:	4641      	mov	r1, r8
 8000c72:	b289      	uxth	r1, r1
 8000c74:	0028      	movs	r0, r5
 8000c76:	f001 fb56 	bl	8002326 <ZbZclAttrRead>
 8000c7a:	4682      	mov	sl, r0
 8000c7c:	f804 a00b 	strb.w	sl, [r4, fp]
 8000c80:	f11b 0b01 	adds.w	fp, fp, #1
 8000c84:	4650      	mov	r0, sl
 8000c86:	b2c0      	uxtb	r0, r0
 8000c88:	2889      	cmp	r0, #137	; 0x89
 8000c8a:	d022      	beq.n	8000cd2 <ZbZclHandleReadAttr+0x150>
 8000c8c:	4650      	mov	r0, sl
 8000c8e:	b2c0      	uxtb	r0, r0
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d1c8      	bne.n	8000c26 <ZbZclHandleReadAttr+0xa4>
 8000c94:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c98:	f804 000b 	strb.w	r0, [r4, fp]
 8000c9c:	f11b 0b01 	adds.w	fp, fp, #1
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	8b6a      	ldrh	r2, [r5, #26]
 8000ca4:	ebb2 020b 	subs.w	r2, r2, fp
 8000ca8:	eb04 010b 	add.w	r1, r4, fp
 8000cac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000cb0:	f002 f95d 	bl	8002f6e <ZbZclAttrParseLength>
 8000cb4:	4681      	mov	r9, r0
 8000cb6:	f1b9 0f00 	cmp.w	r9, #0
 8000cba:	d507      	bpl.n	8000ccc <ZbZclHandleReadAttr+0x14a>
 8000cbc:	f1bb 0b01 	subs.w	fp, fp, #1
 8000cc0:	2087      	movs	r0, #135	; 0x87
 8000cc2:	eb04 010b 	add.w	r1, r4, fp
 8000cc6:	f801 0c01 	strb.w	r0, [r1, #-1]
 8000cca:	e7ac      	b.n	8000c26 <ZbZclHandleReadAttr+0xa4>
 8000ccc:	eb19 0b0b 	adds.w	fp, r9, fp
 8000cd0:	e7a9      	b.n	8000c26 <ZbZclHandleReadAttr+0xa4>
 8000cd2:	003a      	movs	r2, r7
 8000cd4:	a906      	add	r1, sp, #24
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f7ff fbf8 	bl	80004cc <ZbZclClusterInitApsdeReq>
 8000cdc:	a806      	add	r0, sp, #24
 8000cde:	f117 0110 	adds.w	r1, r7, #16
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	f00e ff88 	bl	800fbf8 <__aeabi_memcpy>
 8000ce8:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000cec:	f7ff fb89 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 8000cf0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8000cf4:	7da8      	ldrb	r0, [r5, #22]
 8000cf6:	0700      	lsls	r0, r0, #28
 8000cf8:	d406      	bmi.n	8000d08 <ZbZclHandleReadAttr+0x186>
 8000cfa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8000cfe:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 8000d02:	4001      	ands	r1, r0
 8000d04:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 8000d08:	940c      	str	r4, [sp, #48]	; 0x30
 8000d0a:	4658      	mov	r0, fp
 8000d0c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8000d10:	2300      	movs	r3, #0
 8000d12:	2200      	movs	r2, #0
 8000d14:	a906      	add	r1, sp, #24
 8000d16:	68a8      	ldr	r0, [r5, #8]
 8000d18:	f00b fcca 	bl	800c6b0 <ZbApsdeDataReqCallback>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	a204      	add	r2, pc, #16	; (adr r2, 8000d30 <.text_5>)
 8000d20:	0021      	movs	r1, r4
 8000d22:	68a8      	ldr	r0, [r5, #8]
 8000d24:	f00c fa95 	bl	800d252 <zb_heap_free>
 8000d28:	b013      	add	sp, #76	; 0x4c
 8000d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000d30 <.text_5>:
 8000d30:	00000000 	.word	0x00000000

08000d34 <ZbZclHandleWriteAttr>:
 8000d34:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d38:	b0a3      	sub	sp, #140	; 0x8c
 8000d3a:	0016      	movs	r6, r2
 8000d3c:	2701      	movs	r7, #1
 8000d3e:	2500      	movs	r5, #0
 8000d40:	2400      	movs	r4, #0
 8000d42:	f05f 0800 	movs.w	r8, #0
 8000d46:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000d48:	79c0      	ldrb	r0, [r0, #7]
 8000d4a:	f88d 0008 	strb.w	r0, [sp, #8]
 8000d4e:	f05f 0900 	movs.w	r9, #0
 8000d52:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d007      	beq.n	8000d6a <ZbZclHandleWriteAttr+0x36>
 8000d5a:	2803      	cmp	r0, #3
 8000d5c:	d003      	beq.n	8000d66 <ZbZclHandleWriteAttr+0x32>
 8000d5e:	2805      	cmp	r0, #5
 8000d60:	f000 80c3 	beq.w	8000eea <ZbZclHandleWriteAttr+0x1b6>
 8000d64:	e116      	b.n	8000f94 <ZbZclHandleWriteAttr+0x260>
 8000d66:	f059 0901 	orrs.w	r9, r9, #1
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	9001      	str	r0, [sp, #4]
 8000d6e:	2000      	movs	r0, #0
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	f10d 0b14 	add.w	fp, sp, #20
 8000d76:	9a00      	ldr	r2, [sp, #0]
 8000d78:	9901      	ldr	r1, [sp, #4]
 8000d7a:	4658      	mov	r0, fp
 8000d7c:	f005 fb95 	bl	80064aa <__aeabi_memset>
 8000d80:	2000      	movs	r0, #0
 8000d82:	f88d 0014 	strb.w	r0, [sp, #20]
 8000d86:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000d88:	7840      	ldrb	r0, [r0, #1]
 8000d8a:	f88d 0015 	strb.w	r0, [sp, #21]
 8000d8e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000d90:	7880      	ldrb	r0, [r0, #2]
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d101      	bne.n	8000d9a <ZbZclHandleWriteAttr+0x66>
 8000d96:	2001      	movs	r0, #1
 8000d98:	e000      	b.n	8000d9c <ZbZclHandleWriteAttr+0x68>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f88d 0016 	strb.w	r0, [sp, #22]
 8000da0:	2001      	movs	r0, #1
 8000da2:	f88d 0017 	strb.w	r0, [sp, #23]
 8000da6:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000da8:	8880      	ldrh	r0, [r0, #4]
 8000daa:	f8ad 0018 	strh.w	r0, [sp, #24]
 8000dae:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000db0:	7980      	ldrb	r0, [r0, #6]
 8000db2:	f88d 001a 	strb.w	r0, [sp, #26]
 8000db6:	2004      	movs	r0, #4
 8000db8:	f88d 001b 	strb.w	r0, [sp, #27]
 8000dbc:	2239      	movs	r2, #57	; 0x39
 8000dbe:	a907      	add	r1, sp, #28
 8000dc0:	a805      	add	r0, sp, #20
 8000dc2:	f000 fbb9 	bl	8001538 <ZbZclAppendHeader>
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d502      	bpl.n	8000dd2 <ZbZclHandleWriteAttr+0x9e>
 8000dcc:	2080      	movs	r0, #128	; 0x80
 8000dce:	4680      	mov	r8, r0
 8000dd0:	e0e2      	b.n	8000f98 <ZbZclHandleWriteAttr+0x264>
 8000dd2:	0032      	movs	r2, r6
 8000dd4:	a916      	add	r1, sp, #88	; 0x58
 8000dd6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000dd8:	f7ff fb78 	bl	80004cc <ZbZclClusterInitApsdeReq>
 8000ddc:	a816      	add	r0, sp, #88	; 0x58
 8000dde:	f116 0110 	adds.w	r1, r6, #16
 8000de2:	2210      	movs	r2, #16
 8000de4:	f00e ff08 	bl	800fbf8 <__aeabi_memcpy>
 8000de8:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8000dec:	f7ff fb09 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 8000df0:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
 8000df4:	2000      	movs	r0, #0
 8000df6:	4682      	mov	sl, r0
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	0007      	movs	r7, r0
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f88d 0009 	strb.w	r0, [sp, #9]
 8000e02:	2000      	movs	r0, #0
 8000e04:	0004      	movs	r4, r0
 8000e06:	f11a 0003 	adds.w	r0, sl, #3
 8000e0a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	d302      	bcc.n	8000e16 <ZbZclHandleWriteAttr+0xe2>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0007      	movs	r7, r0
 8000e14:	e05c      	b.n	8000ed0 <ZbZclHandleWriteAttr+0x19c>
 8000e16:	1ce8      	adds	r0, r5, #3
 8000e18:	283a      	cmp	r0, #58	; 0x3a
 8000e1a:	d305      	bcc.n	8000e28 <ZbZclHandleWriteAttr+0xf4>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f88d 0009 	strb.w	r0, [sp, #9]
 8000e22:	2089      	movs	r0, #137	; 0x89
 8000e24:	0007      	movs	r7, r0
 8000e26:	e053      	b.n	8000ed0 <ZbZclHandleWriteAttr+0x19c>
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f88d 0009 	strb.w	r0, [sp, #9]
 8000e2e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000e30:	4450      	add	r0, sl
 8000e32:	f001 f8a5 	bl	8001f80 <pletoh16>
 8000e36:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000e3a:	f11a 0a02 	adds.w	sl, sl, #2
 8000e3e:	4650      	mov	r0, sl
 8000e40:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8000e42:	5c09      	ldrb	r1, [r1, r0]
 8000e44:	f88d 100a 	strb.w	r1, [sp, #10]
 8000e48:	4682      	mov	sl, r0
 8000e4a:	f11a 0a01 	adds.w	sl, sl, #1
 8000e4e:	2300      	movs	r3, #0
 8000e50:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8000e52:	ebb2 020a 	subs.w	r2, r2, sl
 8000e56:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000e58:	eb00 010a 	add.w	r1, r0, sl
 8000e5c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000e60:	f002 f885 	bl	8002f6e <ZbZclAttrParseLength>
 8000e64:	9004      	str	r0, [sp, #16]
 8000e66:	9804      	ldr	r0, [sp, #16]
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d50c      	bpl.n	8000e86 <ZbZclHandleWriteAttr+0x152>
 8000e6c:	1c64      	adds	r4, r4, #1
 8000e6e:	2087      	movs	r0, #135	; 0x87
 8000e70:	a907      	add	r1, sp, #28
 8000e72:	5548      	strb	r0, [r1, r5]
 8000e74:	1c6d      	adds	r5, r5, #1
 8000e76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000e7a:	a807      	add	r0, sp, #28
 8000e7c:	4428      	add	r0, r5
 8000e7e:	f001 f8cb 	bl	8002018 <putle16>
 8000e82:	1cad      	adds	r5, r5, #2
 8000e84:	e024      	b.n	8000ed0 <ZbZclHandleWriteAttr+0x19c>
 8000e86:	4648      	mov	r0, r9
 8000e88:	b280      	uxth	r0, r0
 8000e8a:	9001      	str	r0, [sp, #4]
 8000e8c:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8000e8e:	ebb0 000a 	subs.w	r0, r0, sl
 8000e92:	9000      	str	r0, [sp, #0]
 8000e94:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000e96:	eb00 030a 	add.w	r3, r0, sl
 8000e9a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000e9e:	f116 0110 	adds.w	r1, r6, #16
 8000ea2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000ea4:	f001 fb8e 	bl	80025c4 <ZbZclAttrWrite>
 8000ea8:	0007      	movs	r7, r0
 8000eaa:	9804      	ldr	r0, [sp, #16]
 8000eac:	eb10 0a0a 	adds.w	sl, r0, sl
 8000eb0:	0038      	movs	r0, r7
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d0a6      	beq.n	8000e06 <ZbZclHandleWriteAttr+0xd2>
 8000eb8:	1c64      	adds	r4, r4, #1
 8000eba:	a807      	add	r0, sp, #28
 8000ebc:	5547      	strb	r7, [r0, r5]
 8000ebe:	1c6d      	adds	r5, r5, #1
 8000ec0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000ec4:	a807      	add	r0, sp, #28
 8000ec6:	4428      	add	r0, r5
 8000ec8:	f001 f8a6 	bl	8002018 <putle16>
 8000ecc:	1cad      	adds	r5, r5, #2
 8000ece:	e79a      	b.n	8000e06 <ZbZclHandleWriteAttr+0xd2>
 8000ed0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d001      	beq.n	8000edc <ZbZclHandleWriteAttr+0x1a8>
 8000ed8:	46b8      	mov	r8, r7
 8000eda:	e05d      	b.n	8000f98 <ZbZclHandleWriteAttr+0x264>
 8000edc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	d001      	beq.n	8000ee8 <ZbZclHandleWriteAttr+0x1b4>
 8000ee4:	2c00      	cmp	r4, #0
 8000ee6:	d000      	beq.n	8000eea <ZbZclHandleWriteAttr+0x1b6>
 8000ee8:	e056      	b.n	8000f98 <ZbZclHandleWriteAttr+0x264>
 8000eea:	2000      	movs	r0, #0
 8000eec:	4682      	mov	sl, r0
 8000eee:	f05f 0b00 	movs.w	fp, #0
 8000ef2:	f11a 0003 	adds.w	r0, sl, #3
 8000ef6:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	d302      	bcc.n	8000f02 <ZbZclHandleWriteAttr+0x1ce>
 8000efc:	465c      	mov	r4, fp
 8000efe:	1c64      	adds	r4, r4, #1
 8000f00:	e03b      	b.n	8000f7a <ZbZclHandleWriteAttr+0x246>
 8000f02:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000f04:	4450      	add	r0, sl
 8000f06:	f001 f83b 	bl	8001f80 <pletoh16>
 8000f0a:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000f0e:	f11a 0a02 	adds.w	sl, sl, #2
 8000f12:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000f14:	f810 000a 	ldrb.w	r0, [r0, sl]
 8000f18:	f88d 000a 	strb.w	r0, [sp, #10]
 8000f1c:	f11a 0a01 	adds.w	sl, sl, #1
 8000f20:	2300      	movs	r3, #0
 8000f22:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8000f24:	ebb2 020a 	subs.w	r2, r2, sl
 8000f28:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000f2a:	eb00 010a 	add.w	r1, r0, sl
 8000f2e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000f32:	f002 f81c 	bl	8002f6e <ZbZclAttrParseLength>
 8000f36:	9004      	str	r0, [sp, #16]
 8000f38:	9804      	ldr	r0, [sp, #16]
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d502      	bpl.n	8000f44 <ZbZclHandleWriteAttr+0x210>
 8000f3e:	465c      	mov	r4, fp
 8000f40:	1c64      	adds	r4, r4, #1
 8000f42:	e01a      	b.n	8000f7a <ZbZclHandleWriteAttr+0x246>
 8000f44:	2000      	movs	r0, #0
 8000f46:	9001      	str	r0, [sp, #4]
 8000f48:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8000f4a:	ebb0 000a 	subs.w	r0, r0, sl
 8000f4e:	9000      	str	r0, [sp, #0]
 8000f50:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000f52:	eb00 030a 	add.w	r3, r0, sl
 8000f56:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000f5a:	f116 0110 	adds.w	r1, r6, #16
 8000f5e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000f60:	f001 fb30 	bl	80025c4 <ZbZclAttrWrite>
 8000f64:	0007      	movs	r7, r0
 8000f66:	0038      	movs	r0, r7
 8000f68:	b2c0      	uxtb	r0, r0
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d001      	beq.n	8000f72 <ZbZclHandleWriteAttr+0x23e>
 8000f6e:	f11b 0b01 	adds.w	fp, fp, #1
 8000f72:	9804      	ldr	r0, [sp, #16]
 8000f74:	eb10 0a0a 	adds.w	sl, r0, sl
 8000f78:	e7bb      	b.n	8000ef2 <ZbZclHandleWriteAttr+0x1be>
 8000f7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000f7e:	2803      	cmp	r0, #3
 8000f80:	d105      	bne.n	8000f8e <ZbZclHandleWriteAttr+0x25a>
 8000f82:	2c00      	cmp	r4, #0
 8000f84:	d002      	beq.n	8000f8c <ZbZclHandleWriteAttr+0x258>
 8000f86:	2001      	movs	r0, #1
 8000f88:	4680      	mov	r8, r0
 8000f8a:	e005      	b.n	8000f98 <ZbZclHandleWriteAttr+0x264>
 8000f8c:	e004      	b.n	8000f98 <ZbZclHandleWriteAttr+0x264>
 8000f8e:	20ff      	movs	r0, #255	; 0xff
 8000f90:	4680      	mov	r8, r0
 8000f92:	e001      	b.n	8000f98 <ZbZclHandleWriteAttr+0x264>
 8000f94:	2081      	movs	r0, #129	; 0x81
 8000f96:	4680      	mov	r8, r0
 8000f98:	4640      	mov	r0, r8
 8000f9a:	b2c0      	uxtb	r0, r0
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d00b      	beq.n	8000fb8 <ZbZclHandleWriteAttr+0x284>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	b2c0      	uxtb	r0, r0
 8000fa4:	28ff      	cmp	r0, #255	; 0xff
 8000fa6:	d006      	beq.n	8000fb6 <ZbZclHandleWriteAttr+0x282>
 8000fa8:	4643      	mov	r3, r8
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fae:	0031      	movs	r1, r6
 8000fb0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000fb2:	f00b ffc4 	bl	800cf3e <ZbZclSendDefaultResponse>
 8000fb6:	e01a      	b.n	8000fee <ZbZclHandleWriteAttr+0x2ba>
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d10c      	bne.n	8000fd6 <ZbZclHandleWriteAttr+0x2a2>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d106      	bne.n	8000fce <ZbZclHandleWriteAttr+0x29a>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fc4:	0031      	movs	r1, r6
 8000fc6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000fc8:	f00b ffb9 	bl	800cf3e <ZbZclSendDefaultResponse>
 8000fcc:	e00f      	b.n	8000fee <ZbZclHandleWriteAttr+0x2ba>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	a907      	add	r1, sp, #28
 8000fd2:	5548      	strb	r0, [r1, r5]
 8000fd4:	1c6d      	adds	r5, r5, #1
 8000fd6:	a807      	add	r0, sp, #28
 8000fd8:	901c      	str	r0, [sp, #112]	; 0x70
 8000fda:	0028      	movs	r0, r5
 8000fdc:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	a916      	add	r1, sp, #88	; 0x58
 8000fe6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000fe8:	6880      	ldr	r0, [r0, #8]
 8000fea:	f00b fb61 	bl	800c6b0 <ZbApsdeDataReqCallback>
 8000fee:	b025      	add	sp, #148	; 0x94
 8000ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ff4 <zcl_handle_command>:
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff8:	0004      	movs	r4, r0
 8000ffa:	000d      	movs	r5, r1
 8000ffc:	0016      	movs	r6, r2
 8000ffe:	79f7      	ldrb	r7, [r6, #7]
 8001000:	f115 0110 	adds.w	r1, r5, #16
 8001004:	68a0      	ldr	r0, [r4, #8]
 8001006:	f00b fbeb 	bl	800c7e0 <ZbApsAddrIsLocal>
 800100a:	2800      	cmp	r0, #0
 800100c:	d121      	bne.n	8001052 <zcl_handle_command+0x5e>
 800100e:	89a0      	ldrh	r0, [r4, #12]
 8001010:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001014:	d01d      	beq.n	8001052 <zcl_handle_command+0x5e>
 8001016:	0032      	movs	r2, r6
 8001018:	0029      	movs	r1, r5
 800101a:	0020      	movs	r0, r4
 800101c:	f7ff f964 	bl	80002e8 <ZbZclClusterCheckMinSecurity>
 8001020:	2800      	cmp	r0, #0
 8001022:	d107      	bne.n	8001034 <zcl_handle_command+0x40>
 8001024:	2301      	movs	r3, #1
 8001026:	0032      	movs	r2, r6
 8001028:	0029      	movs	r1, r5
 800102a:	0020      	movs	r0, r4
 800102c:	f00b ff87 	bl	800cf3e <ZbZclSendDefaultResponse>
 8001030:	2001      	movs	r0, #1
 8001032:	e0f7      	b.n	8001224 <zcl_handle_command+0x230>
 8001034:	0032      	movs	r2, r6
 8001036:	0029      	movs	r1, r5
 8001038:	68a0      	ldr	r0, [r4, #8]
 800103a:	f00b fea7 	bl	800cd8c <ZbZclDeviceLogCheckAllow>
 800103e:	2800      	cmp	r0, #0
 8001040:	d107      	bne.n	8001052 <zcl_handle_command+0x5e>
 8001042:	2301      	movs	r3, #1
 8001044:	0032      	movs	r2, r6
 8001046:	0029      	movs	r1, r5
 8001048:	0020      	movs	r0, r4
 800104a:	f00b ff78 	bl	800cf3e <ZbZclSendDefaultResponse>
 800104e:	2001      	movs	r0, #1
 8001050:	e0e8      	b.n	8001224 <zcl_handle_command+0x230>
 8001052:	7830      	ldrb	r0, [r6, #0]
 8001054:	2801      	cmp	r0, #1
 8001056:	d13a      	bne.n	80010ce <zcl_handle_command+0xda>
 8001058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800105a:	2800      	cmp	r0, #0
 800105c:	d107      	bne.n	800106e <zcl_handle_command+0x7a>
 800105e:	2381      	movs	r3, #129	; 0x81
 8001060:	0032      	movs	r2, r6
 8001062:	0029      	movs	r1, r5
 8001064:	0020      	movs	r0, r4
 8001066:	f00b ff6a 	bl	800cf3e <ZbZclSendDefaultResponse>
 800106a:	2001      	movs	r0, #1
 800106c:	e0da      	b.n	8001224 <zcl_handle_command+0x230>
 800106e:	7870      	ldrb	r0, [r6, #1]
 8001070:	2800      	cmp	r0, #0
 8001072:	d00e      	beq.n	8001092 <zcl_handle_command+0x9e>
 8001074:	8a20      	ldrh	r0, [r4, #16]
 8001076:	2800      	cmp	r0, #0
 8001078:	d003      	beq.n	8001082 <zcl_handle_command+0x8e>
 800107a:	8a20      	ldrh	r0, [r4, #16]
 800107c:	88b1      	ldrh	r1, [r6, #4]
 800107e:	4288      	cmp	r0, r1
 8001080:	d012      	beq.n	80010a8 <zcl_handle_command+0xb4>
 8001082:	2381      	movs	r3, #129	; 0x81
 8001084:	0032      	movs	r2, r6
 8001086:	0029      	movs	r1, r5
 8001088:	0020      	movs	r0, r4
 800108a:	f00b ff58 	bl	800cf3e <ZbZclSendDefaultResponse>
 800108e:	2001      	movs	r0, #1
 8001090:	e0c8      	b.n	8001224 <zcl_handle_command+0x230>
 8001092:	8a20      	ldrh	r0, [r4, #16]
 8001094:	2800      	cmp	r0, #0
 8001096:	d007      	beq.n	80010a8 <zcl_handle_command+0xb4>
 8001098:	2381      	movs	r3, #129	; 0x81
 800109a:	0032      	movs	r2, r6
 800109c:	0029      	movs	r1, r5
 800109e:	0020      	movs	r0, r4
 80010a0:	f00b ff4d 	bl	800cf3e <ZbZclSendDefaultResponse>
 80010a4:	2001      	movs	r0, #1
 80010a6:	e0bd      	b.n	8001224 <zcl_handle_command+0x230>
 80010a8:	002a      	movs	r2, r5
 80010aa:	0031      	movs	r1, r6
 80010ac:	0020      	movs	r0, r4
 80010ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010b0:	4798      	blx	r3
 80010b2:	4680      	mov	r8, r0
 80010b4:	4640      	mov	r0, r8
 80010b6:	b2c0      	uxtb	r0, r0
 80010b8:	28ff      	cmp	r0, #255	; 0xff
 80010ba:	d006      	beq.n	80010ca <zcl_handle_command+0xd6>
 80010bc:	4643      	mov	r3, r8
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	0032      	movs	r2, r6
 80010c2:	0029      	movs	r1, r5
 80010c4:	0020      	movs	r0, r4
 80010c6:	f00b ff3a 	bl	800cf3e <ZbZclSendDefaultResponse>
 80010ca:	2001      	movs	r0, #1
 80010cc:	e0aa      	b.n	8001224 <zcl_handle_command+0x230>
 80010ce:	7830      	ldrb	r0, [r6, #0]
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d007      	beq.n	80010e4 <zcl_handle_command+0xf0>
 80010d4:	2385      	movs	r3, #133	; 0x85
 80010d6:	0032      	movs	r2, r6
 80010d8:	0029      	movs	r1, r5
 80010da:	0020      	movs	r0, r4
 80010dc:	f00b ff2f 	bl	800cf3e <ZbZclSendDefaultResponse>
 80010e0:	2001      	movs	r0, #1
 80010e2:	e09f      	b.n	8001224 <zcl_handle_command+0x230>
 80010e4:	0038      	movs	r0, r7
 80010e6:	b2c0      	uxtb	r0, r0
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d01c      	beq.n	8001126 <zcl_handle_command+0x132>
 80010ec:	2801      	cmp	r0, #1
 80010ee:	d03f      	beq.n	8001170 <zcl_handle_command+0x17c>
 80010f0:	2802      	cmp	r0, #2
 80010f2:	d01e      	beq.n	8001132 <zcl_handle_command+0x13e>
 80010f4:	2803      	cmp	r0, #3
 80010f6:	d01c      	beq.n	8001132 <zcl_handle_command+0x13e>
 80010f8:	2804      	cmp	r0, #4
 80010fa:	d039      	beq.n	8001170 <zcl_handle_command+0x17c>
 80010fc:	2805      	cmp	r0, #5
 80010fe:	d018      	beq.n	8001132 <zcl_handle_command+0x13e>
 8001100:	2806      	cmp	r0, #6
 8001102:	d01c      	beq.n	800113e <zcl_handle_command+0x14a>
 8001104:	2807      	cmp	r0, #7
 8001106:	d033      	beq.n	8001170 <zcl_handle_command+0x17c>
 8001108:	2808      	cmp	r0, #8
 800110a:	d01e      	beq.n	800114a <zcl_handle_command+0x156>
 800110c:	2809      	cmp	r0, #9
 800110e:	d02f      	beq.n	8001170 <zcl_handle_command+0x17c>
 8001110:	280a      	cmp	r0, #10
 8001112:	d020      	beq.n	8001156 <zcl_handle_command+0x162>
 8001114:	280b      	cmp	r0, #11
 8001116:	d02a      	beq.n	800116e <zcl_handle_command+0x17a>
 8001118:	280c      	cmp	r0, #12
 800111a:	d022      	beq.n	8001162 <zcl_handle_command+0x16e>
 800111c:	280d      	cmp	r0, #13
 800111e:	d027      	beq.n	8001170 <zcl_handle_command+0x17c>
 8001120:	2810      	cmp	r0, #16
 8001122:	d025      	beq.n	8001170 <zcl_handle_command+0x17c>
 8001124:	e025      	b.n	8001172 <zcl_handle_command+0x17e>
 8001126:	002a      	movs	r2, r5
 8001128:	0031      	movs	r1, r6
 800112a:	0020      	movs	r0, r4
 800112c:	f7ff fd29 	bl	8000b82 <ZbZclHandleReadAttr>
 8001130:	e077      	b.n	8001222 <zcl_handle_command+0x22e>
 8001132:	002a      	movs	r2, r5
 8001134:	0031      	movs	r1, r6
 8001136:	0020      	movs	r0, r4
 8001138:	f7ff fdfc 	bl	8000d34 <ZbZclHandleWriteAttr>
 800113c:	e071      	b.n	8001222 <zcl_handle_command+0x22e>
 800113e:	002a      	movs	r2, r5
 8001140:	0031      	movs	r1, r6
 8001142:	0020      	movs	r0, r4
 8001144:	f003 fdf3 	bl	8004d2e <ZbZclHandleConfigReport>
 8001148:	e06b      	b.n	8001222 <zcl_handle_command+0x22e>
 800114a:	002a      	movs	r2, r5
 800114c:	0031      	movs	r1, r6
 800114e:	0020      	movs	r0, r4
 8001150:	f004 f86b 	bl	800522a <ZbZclHandleReadReport>
 8001154:	e065      	b.n	8001222 <zcl_handle_command+0x22e>
 8001156:	002a      	movs	r2, r5
 8001158:	0031      	movs	r1, r6
 800115a:	0020      	movs	r0, r4
 800115c:	f004 f98a 	bl	8005474 <ZbZclHandleReportAttr>
 8001160:	e05f      	b.n	8001222 <zcl_handle_command+0x22e>
 8001162:	002a      	movs	r2, r5
 8001164:	0031      	movs	r1, r6
 8001166:	0020      	movs	r0, r4
 8001168:	f000 fffb 	bl	8002162 <ZbZclAttrHandleDiscover>
 800116c:	e059      	b.n	8001222 <zcl_handle_command+0x22e>
 800116e:	e058      	b.n	8001222 <zcl_handle_command+0x22e>
 8001170:	e057      	b.n	8001222 <zcl_handle_command+0x22e>
 8001172:	7870      	ldrb	r0, [r6, #1]
 8001174:	2800      	cmp	r0, #0
 8001176:	d04e      	beq.n	8001216 <zcl_handle_command+0x222>
 8001178:	88b0      	ldrh	r0, [r6, #4]
 800117a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800117e:	4288      	cmp	r0, r1
 8001180:	d141      	bne.n	8001206 <zcl_handle_command+0x212>
 8001182:	f115 0110 	adds.w	r1, r5, #16
 8001186:	68a0      	ldr	r0, [r4, #8]
 8001188:	f00b fb2a 	bl	800c7e0 <ZbApsAddrIsLocal>
 800118c:	2800      	cmp	r0, #0
 800118e:	d107      	bne.n	80011a0 <zcl_handle_command+0x1ac>
 8001190:	2381      	movs	r3, #129	; 0x81
 8001192:	0032      	movs	r2, r6
 8001194:	0029      	movs	r1, r5
 8001196:	0020      	movs	r0, r4
 8001198:	f00b fed1 	bl	800cf3e <ZbZclSendDefaultResponse>
 800119c:	2001      	movs	r0, #1
 800119e:	e041      	b.n	8001224 <zcl_handle_command+0x230>
 80011a0:	0038      	movs	r0, r7
 80011a2:	b2c0      	uxtb	r0, r0
 80011a4:	28f0      	cmp	r0, #240	; 0xf0
 80011a6:	d108      	bne.n	80011ba <zcl_handle_command+0x1c6>
 80011a8:	78b0      	ldrb	r0, [r6, #2]
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d131      	bne.n	8001212 <zcl_handle_command+0x21e>
 80011ae:	002a      	movs	r2, r5
 80011b0:	0031      	movs	r1, r6
 80011b2:	0020      	movs	r0, r4
 80011b4:	f004 fbea 	bl	800598c <ZbZclHandleGetSceneData>
 80011b8:	e02b      	b.n	8001212 <zcl_handle_command+0x21e>
 80011ba:	0038      	movs	r0, r7
 80011bc:	b2c0      	uxtb	r0, r0
 80011be:	28f1      	cmp	r0, #241	; 0xf1
 80011c0:	d108      	bne.n	80011d4 <zcl_handle_command+0x1e0>
 80011c2:	78b0      	ldrb	r0, [r6, #2]
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d124      	bne.n	8001212 <zcl_handle_command+0x21e>
 80011c8:	002a      	movs	r2, r5
 80011ca:	0031      	movs	r1, r6
 80011cc:	0020      	movs	r0, r4
 80011ce:	f004 fc5c 	bl	8005a8a <ZbZclHandleSetSceneData>
 80011d2:	e01e      	b.n	8001212 <zcl_handle_command+0x21e>
 80011d4:	0038      	movs	r0, r7
 80011d6:	b2c0      	uxtb	r0, r0
 80011d8:	28f2      	cmp	r0, #242	; 0xf2
 80011da:	d10d      	bne.n	80011f8 <zcl_handle_command+0x204>
 80011dc:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 80011de:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80011e0:	0020      	movs	r0, r4
 80011e2:	f7ff fc81 	bl	8000ae8 <zcl_persist_handle_set>
 80011e6:	4680      	mov	r8, r0
 80011e8:	4643      	mov	r3, r8
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	0032      	movs	r2, r6
 80011ee:	0029      	movs	r1, r5
 80011f0:	0020      	movs	r0, r4
 80011f2:	f00b fea4 	bl	800cf3e <ZbZclSendDefaultResponse>
 80011f6:	e00c      	b.n	8001212 <zcl_handle_command+0x21e>
 80011f8:	2381      	movs	r3, #129	; 0x81
 80011fa:	0032      	movs	r2, r6
 80011fc:	0029      	movs	r1, r5
 80011fe:	0020      	movs	r0, r4
 8001200:	f00b fe9d 	bl	800cf3e <ZbZclSendDefaultResponse>
 8001204:	e005      	b.n	8001212 <zcl_handle_command+0x21e>
 8001206:	2381      	movs	r3, #129	; 0x81
 8001208:	0032      	movs	r2, r6
 800120a:	0029      	movs	r1, r5
 800120c:	0020      	movs	r0, r4
 800120e:	f00b fe96 	bl	800cf3e <ZbZclSendDefaultResponse>
 8001212:	2001      	movs	r0, #1
 8001214:	e006      	b.n	8001224 <zcl_handle_command+0x230>
 8001216:	2381      	movs	r3, #129	; 0x81
 8001218:	0032      	movs	r2, r6
 800121a:	0029      	movs	r1, r5
 800121c:	0020      	movs	r0, r4
 800121e:	f00b fe8e 	bl	800cf3e <ZbZclSendDefaultResponse>
 8001222:	2001      	movs	r0, #1
 8001224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001228 <zcl_cluster_data_ind>:
 8001228:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800122a:	0004      	movs	r4, r0
 800122c:	000d      	movs	r5, r1
 800122e:	002e      	movs	r6, r5
 8001230:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001232:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001234:	4668      	mov	r0, sp
 8001236:	f000 f8fd 	bl	8001434 <ZbZclParseHeader>
 800123a:	0007      	movs	r7, r0
 800123c:	2f00      	cmp	r7, #0
 800123e:	d501      	bpl.n	8001244 <zcl_cluster_data_ind+0x1c>
 8001240:	2000      	movs	r0, #0
 8001242:	e00a      	b.n	800125a <zcl_cluster_data_ind+0x32>
 8001244:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001246:	4438      	add	r0, r7
 8001248:	6260      	str	r0, [r4, #36]	; 0x24
 800124a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800124c:	1bc0      	subs	r0, r0, r7
 800124e:	8520      	strh	r0, [r4, #40]	; 0x28
 8001250:	466a      	mov	r2, sp
 8001252:	0021      	movs	r1, r4
 8001254:	0030      	movs	r0, r6
 8001256:	f7ff fecd 	bl	8000ff4 <zcl_handle_command>
 800125a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800125c <zcl_cluster_alarm_data_ind>:
 800125c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001260:	b098      	sub	sp, #96	; 0x60
 8001262:	0004      	movs	r4, r0
 8001264:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8001266:	26ff      	movs	r6, #255	; 0xff
 8001268:	2700      	movs	r7, #0
 800126a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800126c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800126e:	a802      	add	r0, sp, #8
 8001270:	f000 f8e0 	bl	8001434 <ZbZclParseHeader>
 8001274:	4680      	mov	r8, r0
 8001276:	f1b8 0f00 	cmp.w	r8, #0
 800127a:	d501      	bpl.n	8001280 <zcl_cluster_alarm_data_ind+0x24>
 800127c:	2000      	movs	r0, #0
 800127e:	e0d6      	b.n	800142e <zcl_cluster_alarm_data_ind+0x1d2>
 8001280:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8001282:	ebb0 0008 	subs.w	r0, r0, r8
 8001286:	8520      	strh	r0, [r4, #40]	; 0x28
 8001288:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800128a:	2809      	cmp	r0, #9
 800128c:	d001      	beq.n	8001292 <zcl_cluster_alarm_data_ind+0x36>
 800128e:	2000      	movs	r0, #0
 8001290:	e0cd      	b.n	800142e <zcl_cluster_alarm_data_ind+0x1d2>
 8001292:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8001296:	2800      	cmp	r0, #0
 8001298:	d001      	beq.n	800129e <zcl_cluster_alarm_data_ind+0x42>
 800129a:	2000      	movs	r0, #0
 800129c:	e0c7      	b.n	800142e <zcl_cluster_alarm_data_ind+0x1d2>
 800129e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80012a2:	2801      	cmp	r0, #1
 80012a4:	d001      	beq.n	80012aa <zcl_cluster_alarm_data_ind+0x4e>
 80012a6:	2000      	movs	r0, #0
 80012a8:	e0c1      	b.n	800142e <zcl_cluster_alarm_data_ind+0x1d2>
 80012aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d002      	beq.n	80012b8 <zcl_cluster_alarm_data_ind+0x5c>
 80012b2:	2801      	cmp	r0, #1
 80012b4:	d02a      	beq.n	800130c <zcl_cluster_alarm_data_ind+0xb0>
 80012b6:	e03f      	b.n	8001338 <zcl_cluster_alarm_data_ind+0xdc>
 80012b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80012ba:	f810 0008 	ldrb.w	r0, [r0, r8]
 80012be:	f88d 0004 	strb.w	r0, [sp, #4]
 80012c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80012c4:	4440      	add	r0, r8
 80012c6:	1c40      	adds	r0, r0, #1
 80012c8:	f000 fe5a 	bl	8001f80 <pletoh16>
 80012cc:	f8ad 0006 	strh.w	r0, [sp, #6]
 80012d0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80012d4:	0028      	movs	r0, r5
 80012d6:	f7fe ffa3 	bl	8000220 <ZbZclClusterGetClusterId>
 80012da:	4581      	cmp	r9, r0
 80012dc:	d12c      	bne.n	8001338 <zcl_cluster_alarm_data_ind+0xdc>
 80012de:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d104      	bne.n	80012ee <zcl_cluster_alarm_data_ind+0x92>
 80012e4:	2081      	movs	r0, #129	; 0x81
 80012e6:	0006      	movs	r6, r0
 80012e8:	2001      	movs	r0, #1
 80012ea:	0007      	movs	r7, r0
 80012ec:	e024      	b.n	8001338 <zcl_cluster_alarm_data_ind+0xdc>
 80012ee:	a802      	add	r0, sp, #8
 80012f0:	9000      	str	r0, [sp, #0]
 80012f2:	0023      	movs	r3, r4
 80012f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80012f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80012fc:	0028      	movs	r0, r5
 80012fe:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8001302:	47e0      	blx	ip
 8001304:	0006      	movs	r6, r0
 8001306:	2001      	movs	r0, #1
 8001308:	0007      	movs	r7, r0
 800130a:	e015      	b.n	8001338 <zcl_cluster_alarm_data_ind+0xdc>
 800130c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800130e:	2800      	cmp	r0, #0
 8001310:	d104      	bne.n	800131c <zcl_cluster_alarm_data_ind+0xc0>
 8001312:	2081      	movs	r0, #129	; 0x81
 8001314:	0006      	movs	r6, r0
 8001316:	2001      	movs	r0, #1
 8001318:	0007      	movs	r7, r0
 800131a:	e00d      	b.n	8001338 <zcl_cluster_alarm_data_ind+0xdc>
 800131c:	a802      	add	r0, sp, #8
 800131e:	9000      	str	r0, [sp, #0]
 8001320:	0023      	movs	r3, r4
 8001322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001326:	21ff      	movs	r1, #255	; 0xff
 8001328:	0028      	movs	r0, r5
 800132a:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 800132e:	47e0      	blx	ip
 8001330:	0006      	movs	r6, r0
 8001332:	2001      	movs	r0, #1
 8001334:	0007      	movs	r7, r0
 8001336:	e7ff      	b.n	8001338 <zcl_cluster_alarm_data_ind+0xdc>
 8001338:	0030      	movs	r0, r6
 800133a:	b2c0      	uxtb	r0, r0
 800133c:	28ff      	cmp	r0, #255	; 0xff
 800133e:	d075      	beq.n	800142c <zcl_cluster_alarm_data_ind+0x1d0>
 8001340:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001344:	f88d 0000 	strb.w	r0, [sp]
 8001348:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800134c:	f88d 0002 	strb.w	r0, [sp, #2]
 8001350:	f88d 6003 	strb.w	r6, [sp, #3]
 8001354:	f05f 0a08 	movs.w	sl, #8
 8001358:	f05f 0b00 	movs.w	fp, #0
 800135c:	f10d 0908 	add.w	r9, sp, #8
 8001360:	465a      	mov	r2, fp
 8001362:	4651      	mov	r1, sl
 8001364:	4648      	mov	r0, r9
 8001366:	f005 f8a0 	bl	80064aa <__aeabi_memset>
 800136a:	2000      	movs	r0, #0
 800136c:	f88d 0008 	strb.w	r0, [sp, #8]
 8001370:	2000      	movs	r0, #0
 8001372:	f88d 0009 	strb.w	r0, [sp, #9]
 8001376:	2001      	movs	r0, #1
 8001378:	f88d 000a 	strb.w	r0, [sp, #10]
 800137c:	2001      	movs	r0, #1
 800137e:	f88d 000b 	strb.w	r0, [sp, #11]
 8001382:	2000      	movs	r0, #0
 8001384:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001388:	f89d 0000 	ldrb.w	r0, [sp]
 800138c:	f88d 000e 	strb.w	r0, [sp, #14]
 8001390:	200b      	movs	r0, #11
 8001392:	f88d 000f 	strb.w	r0, [sp, #15]
 8001396:	2205      	movs	r2, #5
 8001398:	a909      	add	r1, sp, #36	; 0x24
 800139a:	a802      	add	r0, sp, #8
 800139c:	f000 f8cc 	bl	8001538 <ZbZclAppendHeader>
 80013a0:	4681      	mov	r9, r0
 80013a2:	f1b9 0f00 	cmp.w	r9, #0
 80013a6:	d501      	bpl.n	80013ac <zcl_cluster_alarm_data_ind+0x150>
 80013a8:	2089      	movs	r0, #137	; 0x89
 80013aa:	e040      	b.n	800142e <zcl_cluster_alarm_data_ind+0x1d2>
 80013ac:	a809      	add	r0, sp, #36	; 0x24
 80013ae:	9005      	str	r0, [sp, #20]
 80013b0:	f8cd 9018 	str.w	r9, [sp, #24]
 80013b4:	f10d 0002 	add.w	r0, sp, #2
 80013b8:	9007      	str	r0, [sp, #28]
 80013ba:	2002      	movs	r0, #2
 80013bc:	9008      	str	r0, [sp, #32]
 80013be:	2030      	movs	r0, #48	; 0x30
 80013c0:	9004      	str	r0, [sp, #16]
 80013c2:	f05f 0a00 	movs.w	sl, #0
 80013c6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80013ca:	4652      	mov	r2, sl
 80013cc:	9904      	ldr	r1, [sp, #16]
 80013ce:	4658      	mov	r0, fp
 80013d0:	f005 f86b 	bl	80064aa <__aeabi_memset>
 80013d4:	a80c      	add	r0, sp, #48	; 0x30
 80013d6:	f114 0110 	adds.w	r1, r4, #16
 80013da:	2210      	movs	r2, #16
 80013dc:	f00e fc0c 	bl	800fbf8 <__aeabi_memcpy>
 80013e0:	8aa8      	ldrh	r0, [r5, #20]
 80013e2:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80013e6:	2009      	movs	r0, #9
 80013e8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80013ec:	7ba8      	ldrb	r0, [r5, #14]
 80013ee:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 80013f2:	a805      	add	r0, sp, #20
 80013f4:	9012      	str	r0, [sp, #72]	; 0x48
 80013f6:	2002      	movs	r0, #2
 80013f8:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 80013fc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001400:	f7fe ffff 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 8001404:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8001408:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800140c:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8001410:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8001414:	2000      	movs	r0, #0
 8001416:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
 800141a:	2000      	movs	r0, #0
 800141c:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
 8001420:	2300      	movs	r3, #0
 8001422:	2200      	movs	r2, #0
 8001424:	a90c      	add	r1, sp, #48	; 0x30
 8001426:	68a8      	ldr	r0, [r5, #8]
 8001428:	f00b f942 	bl	800c6b0 <ZbApsdeDataReqCallback>
 800142c:	0038      	movs	r0, r7
 800142e:	b019      	add	sp, #100	; 0x64
 8001430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001434 <ZbZclParseHeader>:
 8001434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001438:	0004      	movs	r4, r0
 800143a:	000d      	movs	r5, r1
 800143c:	0016      	movs	r6, r2
 800143e:	2700      	movs	r7, #0
 8001440:	2e03      	cmp	r6, #3
 8001442:	d202      	bcs.n	800144a <ZbZclParseHeader+0x16>
 8001444:	f05f 30ff 	movs.w	r0, #4294967295
 8001448:	e034      	b.n	80014b4 <ZbZclParseHeader+0x80>
 800144a:	f05f 0808 	movs.w	r8, #8
 800144e:	f05f 0900 	movs.w	r9, #0
 8001452:	464a      	mov	r2, r9
 8001454:	4641      	mov	r1, r8
 8001456:	0020      	movs	r0, r4
 8001458:	f005 f827 	bl	80064aa <__aeabi_memset>
 800145c:	5de8      	ldrb	r0, [r5, r7]
 800145e:	f010 0003 	ands.w	r0, r0, #3
 8001462:	7020      	strb	r0, [r4, #0]
 8001464:	5de8      	ldrb	r0, [r5, r7]
 8001466:	b2c0      	uxtb	r0, r0
 8001468:	0880      	lsrs	r0, r0, #2
 800146a:	f010 0001 	ands.w	r0, r0, #1
 800146e:	7060      	strb	r0, [r4, #1]
 8001470:	5de8      	ldrb	r0, [r5, r7]
 8001472:	b2c0      	uxtb	r0, r0
 8001474:	08c0      	lsrs	r0, r0, #3
 8001476:	f010 0001 	ands.w	r0, r0, #1
 800147a:	70a0      	strb	r0, [r4, #2]
 800147c:	5de8      	ldrb	r0, [r5, r7]
 800147e:	b2c0      	uxtb	r0, r0
 8001480:	0900      	lsrs	r0, r0, #4
 8001482:	f010 0001 	ands.w	r0, r0, #1
 8001486:	70e0      	strb	r0, [r4, #3]
 8001488:	1c7f      	adds	r7, r7, #1
 800148a:	7860      	ldrb	r0, [r4, #1]
 800148c:	2800      	cmp	r0, #0
 800148e:	d00a      	beq.n	80014a6 <ZbZclParseHeader+0x72>
 8001490:	2e05      	cmp	r6, #5
 8001492:	d202      	bcs.n	800149a <ZbZclParseHeader+0x66>
 8001494:	f05f 30ff 	movs.w	r0, #4294967295
 8001498:	e00c      	b.n	80014b4 <ZbZclParseHeader+0x80>
 800149a:	eb05 0007 	add.w	r0, r5, r7
 800149e:	f000 fd6f 	bl	8001f80 <pletoh16>
 80014a2:	80a0      	strh	r0, [r4, #4]
 80014a4:	1cbf      	adds	r7, r7, #2
 80014a6:	5de8      	ldrb	r0, [r5, r7]
 80014a8:	71a0      	strb	r0, [r4, #6]
 80014aa:	1c7f      	adds	r7, r7, #1
 80014ac:	5de8      	ldrb	r0, [r5, r7]
 80014ae:	71e0      	strb	r0, [r4, #7]
 80014b0:	1c7f      	adds	r7, r7, #1
 80014b2:	0038      	movs	r0, r7
 80014b4:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

080014b8 <ZbZclPrependHeader>:
 80014b8:	b470      	push	{r4, r5, r6}
 80014ba:	0003      	movs	r3, r0
 80014bc:	2400      	movs	r4, #0
 80014be:	0015      	movs	r5, r2
 80014c0:	2600      	movs	r6, #0
 80014c2:	7858      	ldrb	r0, [r3, #1]
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d004      	beq.n	80014d2 <ZbZclPrependHeader+0x1a>
 80014c8:	2a05      	cmp	r2, #5
 80014ca:	d202      	bcs.n	80014d2 <ZbZclPrependHeader+0x1a>
 80014cc:	f05f 30ff 	movs.w	r0, #4294967295
 80014d0:	e030      	b.n	8001534 <ZbZclPrependHeader+0x7c>
 80014d2:	2a03      	cmp	r2, #3
 80014d4:	d202      	bcs.n	80014dc <ZbZclPrependHeader+0x24>
 80014d6:	f05f 30ff 	movs.w	r0, #4294967295
 80014da:	e02b      	b.n	8001534 <ZbZclPrependHeader+0x7c>
 80014dc:	1e6d      	subs	r5, r5, #1
 80014de:	79d8      	ldrb	r0, [r3, #7]
 80014e0:	5548      	strb	r0, [r1, r5]
 80014e2:	1c76      	adds	r6, r6, #1
 80014e4:	1e6d      	subs	r5, r5, #1
 80014e6:	7998      	ldrb	r0, [r3, #6]
 80014e8:	5548      	strb	r0, [r1, r5]
 80014ea:	1c76      	adds	r6, r6, #1
 80014ec:	7858      	ldrb	r0, [r3, #1]
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d009      	beq.n	8001506 <ZbZclPrependHeader+0x4e>
 80014f2:	1e6d      	subs	r5, r5, #1
 80014f4:	8898      	ldrh	r0, [r3, #4]
 80014f6:	b280      	uxth	r0, r0
 80014f8:	0a00      	lsrs	r0, r0, #8
 80014fa:	5548      	strb	r0, [r1, r5]
 80014fc:	1c76      	adds	r6, r6, #1
 80014fe:	1e6d      	subs	r5, r5, #1
 8001500:	8898      	ldrh	r0, [r3, #4]
 8001502:	5548      	strb	r0, [r1, r5]
 8001504:	1c76      	adds	r6, r6, #1
 8001506:	7818      	ldrb	r0, [r3, #0]
 8001508:	f010 0003 	ands.w	r0, r0, #3
 800150c:	4304      	orrs	r4, r0
 800150e:	7858      	ldrb	r0, [r3, #1]
 8001510:	2800      	cmp	r0, #0
 8001512:	d001      	beq.n	8001518 <ZbZclPrependHeader+0x60>
 8001514:	f054 0404 	orrs.w	r4, r4, #4
 8001518:	7898      	ldrb	r0, [r3, #2]
 800151a:	2801      	cmp	r0, #1
 800151c:	d101      	bne.n	8001522 <ZbZclPrependHeader+0x6a>
 800151e:	f054 0408 	orrs.w	r4, r4, #8
 8001522:	78d8      	ldrb	r0, [r3, #3]
 8001524:	2801      	cmp	r0, #1
 8001526:	d101      	bne.n	800152c <ZbZclPrependHeader+0x74>
 8001528:	f054 0410 	orrs.w	r4, r4, #16
 800152c:	1e6d      	subs	r5, r5, #1
 800152e:	554c      	strb	r4, [r1, r5]
 8001530:	1c76      	adds	r6, r6, #1
 8001532:	0030      	movs	r0, r6
 8001534:	bc70      	pop	{r4, r5, r6}
 8001536:	4770      	bx	lr

08001538 <ZbZclAppendHeader>:
 8001538:	b430      	push	{r4, r5}
 800153a:	0003      	movs	r3, r0
 800153c:	2400      	movs	r4, #0
 800153e:	2500      	movs	r5, #0
 8001540:	7858      	ldrb	r0, [r3, #1]
 8001542:	2800      	cmp	r0, #0
 8001544:	d004      	beq.n	8001550 <ZbZclAppendHeader+0x18>
 8001546:	2a05      	cmp	r2, #5
 8001548:	d202      	bcs.n	8001550 <ZbZclAppendHeader+0x18>
 800154a:	f05f 30ff 	movs.w	r0, #4294967295
 800154e:	e02b      	b.n	80015a8 <ZbZclAppendHeader+0x70>
 8001550:	2a03      	cmp	r2, #3
 8001552:	d202      	bcs.n	800155a <ZbZclAppendHeader+0x22>
 8001554:	f05f 30ff 	movs.w	r0, #4294967295
 8001558:	e026      	b.n	80015a8 <ZbZclAppendHeader+0x70>
 800155a:	7818      	ldrb	r0, [r3, #0]
 800155c:	f010 0003 	ands.w	r0, r0, #3
 8001560:	4304      	orrs	r4, r0
 8001562:	7858      	ldrb	r0, [r3, #1]
 8001564:	2800      	cmp	r0, #0
 8001566:	d001      	beq.n	800156c <ZbZclAppendHeader+0x34>
 8001568:	f054 0404 	orrs.w	r4, r4, #4
 800156c:	7898      	ldrb	r0, [r3, #2]
 800156e:	2801      	cmp	r0, #1
 8001570:	d101      	bne.n	8001576 <ZbZclAppendHeader+0x3e>
 8001572:	f054 0408 	orrs.w	r4, r4, #8
 8001576:	78d8      	ldrb	r0, [r3, #3]
 8001578:	2801      	cmp	r0, #1
 800157a:	d101      	bne.n	8001580 <ZbZclAppendHeader+0x48>
 800157c:	f054 0410 	orrs.w	r4, r4, #16
 8001580:	554c      	strb	r4, [r1, r5]
 8001582:	1c6d      	adds	r5, r5, #1
 8001584:	7858      	ldrb	r0, [r3, #1]
 8001586:	2800      	cmp	r0, #0
 8001588:	d007      	beq.n	800159a <ZbZclAppendHeader+0x62>
 800158a:	8898      	ldrh	r0, [r3, #4]
 800158c:	5548      	strb	r0, [r1, r5]
 800158e:	1c6d      	adds	r5, r5, #1
 8001590:	8898      	ldrh	r0, [r3, #4]
 8001592:	b280      	uxth	r0, r0
 8001594:	0a00      	lsrs	r0, r0, #8
 8001596:	5548      	strb	r0, [r1, r5]
 8001598:	1c6d      	adds	r5, r5, #1
 800159a:	7998      	ldrb	r0, [r3, #6]
 800159c:	5548      	strb	r0, [r1, r5]
 800159e:	1c6d      	adds	r5, r5, #1
 80015a0:	79d8      	ldrb	r0, [r3, #7]
 80015a2:	5548      	strb	r0, [r1, r5]
 80015a4:	1c6d      	adds	r5, r5, #1
 80015a6:	0028      	movs	r0, r5
 80015a8:	bc30      	pop	{r4, r5}
 80015aa:	4770      	bx	lr

080015ac <zb_zcl_append_uint32>:
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	0005      	movs	r5, r0
 80015b0:	000e      	movs	r6, r1
 80015b2:	0014      	movs	r4, r2
 80015b4:	001f      	movs	r7, r3
 80015b6:	2d00      	cmp	r5, #0
 80015b8:	d102      	bne.n	80015c0 <zb_zcl_append_uint32+0x14>
 80015ba:	f05f 30ff 	movs.w	r0, #4294967295
 80015be:	e014      	b.n	80015ea <zb_zcl_append_uint32+0x3e>
 80015c0:	2c00      	cmp	r4, #0
 80015c2:	d102      	bne.n	80015ca <zb_zcl_append_uint32+0x1e>
 80015c4:	f05f 30ff 	movs.w	r0, #4294967295
 80015c8:	e00f      	b.n	80015ea <zb_zcl_append_uint32+0x3e>
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	1d00      	adds	r0, r0, #4
 80015ce:	4286      	cmp	r6, r0
 80015d0:	d202      	bcs.n	80015d8 <zb_zcl_append_uint32+0x2c>
 80015d2:	f05f 30ff 	movs.w	r0, #4294967295
 80015d6:	e008      	b.n	80015ea <zb_zcl_append_uint32+0x3e>
 80015d8:	0039      	movs	r1, r7
 80015da:	6820      	ldr	r0, [r4, #0]
 80015dc:	4428      	add	r0, r5
 80015de:	f000 fd2d 	bl	800203c <putle32>
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	1d00      	adds	r0, r0, #4
 80015e6:	6020      	str	r0, [r4, #0]
 80015e8:	6820      	ldr	r0, [r4, #0]
 80015ea:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080015ec <ZbZclMsgClientAlloc>:
 80015ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f0:	0006      	movs	r6, r0
 80015f2:	000f      	movs	r7, r1
 80015f4:	0015      	movs	r5, r2
 80015f6:	4698      	mov	r8, r3
 80015f8:	2001      	movs	r0, #1
 80015fa:	9000      	str	r0, [sp, #0]
 80015fc:	003b      	movs	r3, r7
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f240 7203 	movw	r2, #1795	; 0x703
 8001604:	217c      	movs	r1, #124	; 0x7c
 8001606:	0030      	movs	r0, r6
 8001608:	f7fe ff8f 	bl	800052a <ZbZclClusterAlloc>
 800160c:	0004      	movs	r4, r0
 800160e:	2c00      	cmp	r4, #0
 8001610:	d101      	bne.n	8001616 <ZbZclMsgClientAlloc+0x2a>
 8001612:	2000      	movs	r0, #0
 8001614:	e03c      	b.n	8001690 <ZbZclMsgClientAlloc+0xa4>
 8001616:	f20f 007d 	addw	r0, pc, #125	; 0x7d
 800161a:	65a0      	str	r0, [r4, #88]	; 0x58
 800161c:	2d00      	cmp	r5, #0
 800161e:	d009      	beq.n	8001634 <ZbZclMsgClientAlloc+0x48>
 8001620:	f05f 0910 	movs.w	r9, #16
 8001624:	f114 0a6c 	adds.w	sl, r4, #108	; 0x6c
 8001628:	464a      	mov	r2, r9
 800162a:	0029      	movs	r1, r5
 800162c:	4650      	mov	r0, sl
 800162e:	f00e fae3 	bl	800fbf8 <__aeabi_memcpy>
 8001632:	e00a      	b.n	800164a <ZbZclMsgClientAlloc+0x5e>
 8001634:	f05f 0910 	movs.w	r9, #16
 8001638:	f05f 0a00 	movs.w	sl, #0
 800163c:	f114 0b6c 	adds.w	fp, r4, #108	; 0x6c
 8001640:	4652      	mov	r2, sl
 8001642:	4649      	mov	r1, r9
 8001644:	4658      	mov	r0, fp
 8001646:	f004 ff30 	bl	80064aa <__aeabi_memset>
 800164a:	f240 1109 	movw	r1, #265	; 0x109
 800164e:	0020      	movs	r0, r4
 8001650:	f7fe fde8 	bl	8000224 <ZbZclClusterSetProfileId>
 8001654:	21ab      	movs	r1, #171	; 0xab
 8001656:	0020      	movs	r0, r4
 8001658:	f7fe fe05 	bl	8000266 <ZbZclClusterSetMinSecurity>
 800165c:	2800      	cmp	r0, #0
 800165e:	d104      	bne.n	800166a <ZbZclMsgClientAlloc+0x7e>
 8001660:	0020      	movs	r0, r4
 8001662:	f7ff f820 	bl	80006a6 <ZbZclClusterFree>
 8001666:	2000      	movs	r0, #0
 8001668:	e012      	b.n	8001690 <ZbZclMsgClientAlloc+0xa4>
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	0020      	movs	r0, r4
 800166e:	f7fe feff 	bl	8000470 <ZbZclClusterSetMaxAsduLength>
 8001672:	2800      	cmp	r0, #0
 8001674:	d104      	bne.n	8001680 <ZbZclMsgClientAlloc+0x94>
 8001676:	0020      	movs	r0, r4
 8001678:	f7ff f815 	bl	80006a6 <ZbZclClusterFree>
 800167c:	2000      	movs	r0, #0
 800167e:	e007      	b.n	8001690 <ZbZclMsgClientAlloc+0xa4>
 8001680:	4641      	mov	r1, r8
 8001682:	0020      	movs	r0, r4
 8001684:	f7fe fdc8 	bl	8000218 <ZbZclClusterSetCallbackArg>
 8001688:	0020      	movs	r0, r4
 800168a:	f7fe ffda 	bl	8000642 <ZbZclClusterAttach>
 800168e:	0020      	movs	r0, r4
 8001690:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001694 <ZbZclMessageClientCommand>:
 8001694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001698:	b09c      	sub	sp, #112	; 0x70
 800169a:	0005      	movs	r5, r0
 800169c:	000e      	movs	r6, r1
 800169e:	0017      	movs	r7, r2
 80016a0:	46a8      	mov	r8, r5
 80016a2:	2400      	movs	r4, #0
 80016a4:	7870      	ldrb	r0, [r6, #1]
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d001      	beq.n	80016ae <ZbZclMessageClientCommand+0x1a>
 80016aa:	2081      	movs	r0, #129	; 0x81
 80016ac:	e0d9      	b.n	8001862 <ZbZclMessageClientCommand+0x1ce>
 80016ae:	f05f 0918 	movs.w	r9, #24
 80016b2:	f05f 0a00 	movs.w	sl, #0
 80016b6:	f10d 0b10 	add.w	fp, sp, #16
 80016ba:	4652      	mov	r2, sl
 80016bc:	4649      	mov	r1, r9
 80016be:	4658      	mov	r0, fp
 80016c0:	f004 fef3 	bl	80064aa <__aeabi_memset>
 80016c4:	a804      	add	r0, sp, #16
 80016c6:	f117 0110 	adds.w	r1, r7, #16
 80016ca:	2210      	movs	r2, #16
 80016cc:	f00e fa94 	bl	800fbf8 <__aeabi_memcpy>
 80016d0:	79b0      	ldrb	r0, [r6, #6]
 80016d2:	f88d 0020 	strb.w	r0, [sp, #32]
 80016d6:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 80016da:	f7fe fe92 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 80016de:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80016e2:	79f0      	ldrb	r0, [r6, #7]
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d006      	beq.n	80016f6 <ZbZclMessageClientCommand+0x62>
 80016e8:	2802      	cmp	r0, #2
 80016ea:	d004      	beq.n	80016f6 <ZbZclMessageClientCommand+0x62>
 80016ec:	d36b      	bcc.n	80017c6 <ZbZclMessageClientCommand+0x132>
 80016ee:	2803      	cmp	r0, #3
 80016f0:	f000 8092 	beq.w	8001818 <ZbZclMessageClientCommand+0x184>
 80016f4:	e0b3      	b.n	800185e <ZbZclMessageClientCommand+0x1ca>
 80016f6:	f05f 0948 	movs.w	r9, #72	; 0x48
 80016fa:	f05f 0a00 	movs.w	sl, #0
 80016fe:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8001702:	4652      	mov	r2, sl
 8001704:	4649      	mov	r1, r9
 8001706:	4658      	mov	r0, fp
 8001708:	f004 fecf 	bl	80064aa <__aeabi_memset>
 800170c:	f8d8 006c 	ldr.w	r0, [r8, #108]	; 0x6c
 8001710:	2800      	cmp	r0, #0
 8001712:	d101      	bne.n	8001718 <ZbZclMessageClientCommand+0x84>
 8001714:	2081      	movs	r0, #129	; 0x81
 8001716:	e0a3      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 8001718:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800171a:	280c      	cmp	r0, #12
 800171c:	d201      	bcs.n	8001722 <ZbZclMessageClientCommand+0x8e>
 800171e:	2080      	movs	r0, #128	; 0x80
 8001720:	e09e      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 8001722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001724:	4420      	add	r0, r4
 8001726:	f000 fc3c 	bl	8001fa2 <pletoh32>
 800172a:	900a      	str	r0, [sp, #40]	; 0x28
 800172c:	1d24      	adds	r4, r4, #4
 800172e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001730:	5d00      	ldrb	r0, [r0, r4]
 8001732:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 8001736:	1c64      	adds	r4, r4, #1
 8001738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800173a:	4420      	add	r0, r4
 800173c:	f000 fc31 	bl	8001fa2 <pletoh32>
 8001740:	900b      	str	r0, [sp, #44]	; 0x2c
 8001742:	1d24      	adds	r4, r4, #4
 8001744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001746:	4420      	add	r0, r4
 8001748:	f000 fc1a 	bl	8001f80 <pletoh16>
 800174c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8001750:	1ca4      	adds	r4, r4, #2
 8001752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001754:	f810 9004 	ldrb.w	r9, [r0, r4]
 8001758:	1c64      	adds	r4, r4, #1
 800175a:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800175c:	fa54 f189 	uxtab	r1, r4, r9
 8001760:	4288      	cmp	r0, r1
 8001762:	d303      	bcc.n	800176c <ZbZclMessageClientCommand+0xd8>
 8001764:	4648      	mov	r0, r9
 8001766:	b2c0      	uxtb	r0, r0
 8001768:	283c      	cmp	r0, #60	; 0x3c
 800176a:	d301      	bcc.n	8001770 <ZbZclMessageClientCommand+0xdc>
 800176c:	2080      	movs	r0, #128	; 0x80
 800176e:	e077      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 8001770:	46ca      	mov	sl, r9
 8001772:	fa5f fa8a 	uxtb.w	sl, sl
 8001776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001778:	4420      	add	r0, r4
 800177a:	9003      	str	r0, [sp, #12]
 800177c:	f10d 0b33 	add.w	fp, sp, #51	; 0x33
 8001780:	4652      	mov	r2, sl
 8001782:	9903      	ldr	r1, [sp, #12]
 8001784:	4658      	mov	r0, fp
 8001786:	f00e fa37 	bl	800fbf8 <__aeabi_memcpy>
 800178a:	fa54 f489 	uxtab	r4, r4, r9
 800178e:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8001790:	4284      	cmp	r4, r0
 8001792:	d203      	bcs.n	800179c <ZbZclMessageClientCommand+0x108>
 8001794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001796:	5d00      	ldrb	r0, [r0, r4]
 8001798:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
 800179c:	79f0      	ldrb	r0, [r6, #7]
 800179e:	2800      	cmp	r0, #0
 80017a0:	d108      	bne.n	80017b4 <ZbZclMessageClientCommand+0x120>
 80017a2:	ab04      	add	r3, sp, #16
 80017a4:	aa0a      	add	r2, sp, #40	; 0x28
 80017a6:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 80017aa:	0028      	movs	r0, r5
 80017ac:	f8d8 c06c 	ldr.w	ip, [r8, #108]	; 0x6c
 80017b0:	47e0      	blx	ip
 80017b2:	e007      	b.n	80017c4 <ZbZclMessageClientCommand+0x130>
 80017b4:	ab04      	add	r3, sp, #16
 80017b6:	aa0a      	add	r2, sp, #40	; 0x28
 80017b8:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 80017bc:	0028      	movs	r0, r5
 80017be:	f8d8 c078 	ldr.w	ip, [r8, #120]	; 0x78
 80017c2:	47e0      	blx	ip
 80017c4:	e04c      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 80017c6:	f05f 0908 	movs.w	r9, #8
 80017ca:	f05f 0a00 	movs.w	sl, #0
 80017ce:	f10d 0b04 	add.w	fp, sp, #4
 80017d2:	4652      	mov	r2, sl
 80017d4:	4649      	mov	r1, r9
 80017d6:	4658      	mov	r0, fp
 80017d8:	f004 fe67 	bl	80064aa <__aeabi_memset>
 80017dc:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d101      	bne.n	80017e8 <ZbZclMessageClientCommand+0x154>
 80017e4:	2081      	movs	r0, #129	; 0x81
 80017e6:	e03b      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 80017e8:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 80017ea:	2805      	cmp	r0, #5
 80017ec:	d201      	bcs.n	80017f2 <ZbZclMessageClientCommand+0x15e>
 80017ee:	2080      	movs	r0, #128	; 0x80
 80017f0:	e036      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 80017f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017f4:	4420      	add	r0, r4
 80017f6:	f000 fbd4 	bl	8001fa2 <pletoh32>
 80017fa:	9001      	str	r0, [sp, #4]
 80017fc:	1d24      	adds	r4, r4, #4
 80017fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001800:	5d00      	ldrb	r0, [r0, r4]
 8001802:	f88d 0008 	strb.w	r0, [sp, #8]
 8001806:	ab04      	add	r3, sp, #16
 8001808:	aa01      	add	r2, sp, #4
 800180a:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 800180e:	0028      	movs	r0, r5
 8001810:	f8d8 c070 	ldr.w	ip, [r8, #112]	; 0x70
 8001814:	47e0      	blx	ip
 8001816:	e023      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 8001818:	f05f 0904 	movs.w	r9, #4
 800181c:	f05f 0a00 	movs.w	sl, #0
 8001820:	46eb      	mov	fp, sp
 8001822:	4652      	mov	r2, sl
 8001824:	4649      	mov	r1, r9
 8001826:	4658      	mov	r0, fp
 8001828:	f004 fe3f 	bl	80064aa <__aeabi_memset>
 800182c:	f8d8 0074 	ldr.w	r0, [r8, #116]	; 0x74
 8001830:	2800      	cmp	r0, #0
 8001832:	d101      	bne.n	8001838 <ZbZclMessageClientCommand+0x1a4>
 8001834:	2081      	movs	r0, #129	; 0x81
 8001836:	e013      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 8001838:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800183a:	2804      	cmp	r0, #4
 800183c:	d201      	bcs.n	8001842 <ZbZclMessageClientCommand+0x1ae>
 800183e:	2080      	movs	r0, #128	; 0x80
 8001840:	e00e      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 8001842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001844:	4420      	add	r0, r4
 8001846:	f000 fbac 	bl	8001fa2 <pletoh32>
 800184a:	9000      	str	r0, [sp, #0]
 800184c:	ab04      	add	r3, sp, #16
 800184e:	466a      	mov	r2, sp
 8001850:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 8001854:	0028      	movs	r0, r5
 8001856:	f8d8 c074 	ldr.w	ip, [r8, #116]	; 0x74
 800185a:	47e0      	blx	ip
 800185c:	e000      	b.n	8001860 <ZbZclMessageClientCommand+0x1cc>
 800185e:	2081      	movs	r0, #129	; 0x81
 8001860:	b2c0      	uxtb	r0, r0
 8001862:	b01d      	add	sp, #116	; 0x74
 8001864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001868 <ZbZclMsgClientGetLastReq>:
 8001868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800186c:	b088      	sub	sp, #32
 800186e:	0004      	movs	r4, r0
 8001870:	000d      	movs	r5, r1
 8001872:	0016      	movs	r6, r2
 8001874:	001f      	movs	r7, r3
 8001876:	f05f 0820 	movs.w	r8, #32
 800187a:	f05f 0900 	movs.w	r9, #0
 800187e:	46ea      	mov	sl, sp
 8001880:	464a      	mov	r2, r9
 8001882:	4641      	mov	r1, r8
 8001884:	4650      	mov	r0, sl
 8001886:	f004 fe10 	bl	80064aa <__aeabi_memset>
 800188a:	4668      	mov	r0, sp
 800188c:	0029      	movs	r1, r5
 800188e:	2210      	movs	r2, #16
 8001890:	f00e f9b2 	bl	800fbf8 <__aeabi_memcpy>
 8001894:	2000      	movs	r0, #0
 8001896:	f88d 0010 	strb.w	r0, [sp, #16]
 800189a:	2000      	movs	r0, #0
 800189c:	f88d 0011 	strb.w	r0, [sp, #17]
 80018a0:	2000      	movs	r0, #0
 80018a2:	9005      	str	r0, [sp, #20]
 80018a4:	2000      	movs	r0, #0
 80018a6:	9006      	str	r0, [sp, #24]
 80018a8:	003b      	movs	r3, r7
 80018aa:	0032      	movs	r2, r6
 80018ac:	4669      	mov	r1, sp
 80018ae:	0020      	movs	r0, r4
 80018b0:	f00b fb7b 	bl	800cfaa <ZbZclClusterCommandReq>
 80018b4:	b008      	add	sp, #32
 80018b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080018ba <ZbZclMsgClientConfReq>:
 80018ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018be:	b098      	sub	sp, #96	; 0x60
 80018c0:	0004      	movs	r4, r0
 80018c2:	000d      	movs	r5, r1
 80018c4:	0016      	movs	r6, r2
 80018c6:	001f      	movs	r7, r3
 80018c8:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 80018cc:	2000      	movs	r0, #0
 80018ce:	9000      	str	r0, [sp, #0]
 80018d0:	6833      	ldr	r3, [r6, #0]
 80018d2:	466a      	mov	r2, sp
 80018d4:	2136      	movs	r1, #54	; 0x36
 80018d6:	a80a      	add	r0, sp, #40	; 0x28
 80018d8:	f7ff fe68 	bl	80015ac <zb_zcl_append_uint32>
 80018dc:	2800      	cmp	r0, #0
 80018de:	d501      	bpl.n	80018e4 <ZbZclMsgClientConfReq+0x2a>
 80018e0:	2089      	movs	r0, #137	; 0x89
 80018e2:	e029      	b.n	8001938 <ZbZclMsgClientConfReq+0x7e>
 80018e4:	6873      	ldr	r3, [r6, #4]
 80018e6:	466a      	mov	r2, sp
 80018e8:	2136      	movs	r1, #54	; 0x36
 80018ea:	a80a      	add	r0, sp, #40	; 0x28
 80018ec:	f7ff fe5e 	bl	80015ac <zb_zcl_append_uint32>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d501      	bpl.n	80018f8 <ZbZclMsgClientConfReq+0x3e>
 80018f4:	2089      	movs	r0, #137	; 0x89
 80018f6:	e01f      	b.n	8001938 <ZbZclMsgClientConfReq+0x7e>
 80018f8:	f05f 0920 	movs.w	r9, #32
 80018fc:	f05f 0a00 	movs.w	sl, #0
 8001900:	f10d 0b08 	add.w	fp, sp, #8
 8001904:	4652      	mov	r2, sl
 8001906:	4649      	mov	r1, r9
 8001908:	4658      	mov	r0, fp
 800190a:	f004 fdce 	bl	80064aa <__aeabi_memset>
 800190e:	a802      	add	r0, sp, #8
 8001910:	0029      	movs	r1, r5
 8001912:	2210      	movs	r2, #16
 8001914:	f00e f970 	bl	800fbf8 <__aeabi_memcpy>
 8001918:	2001      	movs	r0, #1
 800191a:	f88d 0018 	strb.w	r0, [sp, #24]
 800191e:	2000      	movs	r0, #0
 8001920:	f88d 0019 	strb.w	r0, [sp, #25]
 8001924:	a80a      	add	r0, sp, #40	; 0x28
 8001926:	9007      	str	r0, [sp, #28]
 8001928:	9800      	ldr	r0, [sp, #0]
 800192a:	9008      	str	r0, [sp, #32]
 800192c:	4643      	mov	r3, r8
 800192e:	003a      	movs	r2, r7
 8001930:	a902      	add	r1, sp, #8
 8001932:	0020      	movs	r0, r4
 8001934:	f00b fb39 	bl	800cfaa <ZbZclClusterCommandReq>
 8001938:	b019      	add	sp, #100	; 0x64
 800193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800193e <ZbZclMsgClientGetMsgCancelReq>:
 800193e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001942:	b098      	sub	sp, #96	; 0x60
 8001944:	0004      	movs	r4, r0
 8001946:	000d      	movs	r5, r1
 8001948:	0016      	movs	r6, r2
 800194a:	001f      	movs	r7, r3
 800194c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001950:	2000      	movs	r0, #0
 8001952:	9000      	str	r0, [sp, #0]
 8001954:	0033      	movs	r3, r6
 8001956:	466a      	mov	r2, sp
 8001958:	2136      	movs	r1, #54	; 0x36
 800195a:	a80a      	add	r0, sp, #40	; 0x28
 800195c:	f7ff fe26 	bl	80015ac <zb_zcl_append_uint32>
 8001960:	2800      	cmp	r0, #0
 8001962:	d501      	bpl.n	8001968 <ZbZclMsgClientGetMsgCancelReq+0x2a>
 8001964:	2089      	movs	r0, #137	; 0x89
 8001966:	e01f      	b.n	80019a8 <ZbZclMsgClientGetMsgCancelReq+0x6a>
 8001968:	f05f 0920 	movs.w	r9, #32
 800196c:	f05f 0a00 	movs.w	sl, #0
 8001970:	f10d 0b08 	add.w	fp, sp, #8
 8001974:	4652      	mov	r2, sl
 8001976:	4649      	mov	r1, r9
 8001978:	4658      	mov	r0, fp
 800197a:	f004 fd96 	bl	80064aa <__aeabi_memset>
 800197e:	a802      	add	r0, sp, #8
 8001980:	0029      	movs	r1, r5
 8001982:	2210      	movs	r2, #16
 8001984:	f00e f938 	bl	800fbf8 <__aeabi_memcpy>
 8001988:	2002      	movs	r0, #2
 800198a:	f88d 0018 	strb.w	r0, [sp, #24]
 800198e:	2000      	movs	r0, #0
 8001990:	f88d 0019 	strb.w	r0, [sp, #25]
 8001994:	a80a      	add	r0, sp, #40	; 0x28
 8001996:	9007      	str	r0, [sp, #28]
 8001998:	9800      	ldr	r0, [sp, #0]
 800199a:	9008      	str	r0, [sp, #32]
 800199c:	4643      	mov	r3, r8
 800199e:	003a      	movs	r2, r7
 80019a0:	a902      	add	r1, sp, #8
 80019a2:	0020      	movs	r0, r4
 80019a4:	f00b fb01 	bl	800cfaa <ZbZclClusterCommandReq>
 80019a8:	b019      	add	sp, #100	; 0x64
 80019aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019b0 <zb_zcl_append_uint8>:
 80019b0:	b410      	push	{r4}
 80019b2:	0004      	movs	r4, r0
 80019b4:	2c00      	cmp	r4, #0
 80019b6:	d102      	bne.n	80019be <zb_zcl_append_uint8+0xe>
 80019b8:	f05f 30ff 	movs.w	r0, #4294967295
 80019bc:	e011      	b.n	80019e2 <zb_zcl_append_uint8+0x32>
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d102      	bne.n	80019c8 <zb_zcl_append_uint8+0x18>
 80019c2:	f05f 30ff 	movs.w	r0, #4294967295
 80019c6:	e00c      	b.n	80019e2 <zb_zcl_append_uint8+0x32>
 80019c8:	6810      	ldr	r0, [r2, #0]
 80019ca:	1c40      	adds	r0, r0, #1
 80019cc:	4281      	cmp	r1, r0
 80019ce:	d202      	bcs.n	80019d6 <zb_zcl_append_uint8+0x26>
 80019d0:	f05f 30ff 	movs.w	r0, #4294967295
 80019d4:	e005      	b.n	80019e2 <zb_zcl_append_uint8+0x32>
 80019d6:	6810      	ldr	r0, [r2, #0]
 80019d8:	5423      	strb	r3, [r4, r0]
 80019da:	6810      	ldr	r0, [r2, #0]
 80019dc:	1c40      	adds	r0, r0, #1
 80019de:	6010      	str	r0, [r2, #0]
 80019e0:	6810      	ldr	r0, [r2, #0]
 80019e2:	bc10      	pop	{r4}
 80019e4:	4770      	bx	lr

080019e6 <zb_zcl_append_uint16>:
 80019e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e8:	0005      	movs	r5, r0
 80019ea:	000e      	movs	r6, r1
 80019ec:	0014      	movs	r4, r2
 80019ee:	001f      	movs	r7, r3
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	d102      	bne.n	80019fa <zb_zcl_append_uint16+0x14>
 80019f4:	f05f 30ff 	movs.w	r0, #4294967295
 80019f8:	e015      	b.n	8001a26 <zb_zcl_append_uint16+0x40>
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	d102      	bne.n	8001a04 <zb_zcl_append_uint16+0x1e>
 80019fe:	f05f 30ff 	movs.w	r0, #4294967295
 8001a02:	e010      	b.n	8001a26 <zb_zcl_append_uint16+0x40>
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	1c80      	adds	r0, r0, #2
 8001a08:	4286      	cmp	r6, r0
 8001a0a:	d202      	bcs.n	8001a12 <zb_zcl_append_uint16+0x2c>
 8001a0c:	f05f 30ff 	movs.w	r0, #4294967295
 8001a10:	e009      	b.n	8001a26 <zb_zcl_append_uint16+0x40>
 8001a12:	0039      	movs	r1, r7
 8001a14:	b289      	uxth	r1, r1
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	4428      	add	r0, r5
 8001a1a:	f000 fafd 	bl	8002018 <putle16>
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	1c80      	adds	r0, r0, #2
 8001a22:	6020      	str	r0, [r4, #0]
 8001a24:	6820      	ldr	r0, [r4, #0]
 8001a26:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001a28 <zb_zcl_append_uint32>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	0005      	movs	r5, r0
 8001a2c:	000e      	movs	r6, r1
 8001a2e:	0014      	movs	r4, r2
 8001a30:	001f      	movs	r7, r3
 8001a32:	2d00      	cmp	r5, #0
 8001a34:	d102      	bne.n	8001a3c <zb_zcl_append_uint32+0x14>
 8001a36:	f05f 30ff 	movs.w	r0, #4294967295
 8001a3a:	e014      	b.n	8001a66 <zb_zcl_append_uint32+0x3e>
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d102      	bne.n	8001a46 <zb_zcl_append_uint32+0x1e>
 8001a40:	f05f 30ff 	movs.w	r0, #4294967295
 8001a44:	e00f      	b.n	8001a66 <zb_zcl_append_uint32+0x3e>
 8001a46:	6820      	ldr	r0, [r4, #0]
 8001a48:	1d00      	adds	r0, r0, #4
 8001a4a:	4286      	cmp	r6, r0
 8001a4c:	d202      	bcs.n	8001a54 <zb_zcl_append_uint32+0x2c>
 8001a4e:	f05f 30ff 	movs.w	r0, #4294967295
 8001a52:	e008      	b.n	8001a66 <zb_zcl_append_uint32+0x3e>
 8001a54:	0039      	movs	r1, r7
 8001a56:	6820      	ldr	r0, [r4, #0]
 8001a58:	4428      	add	r0, r5
 8001a5a:	f000 faef 	bl	800203c <putle32>
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	1d00      	adds	r0, r0, #4
 8001a62:	6020      	str	r0, [r4, #0]
 8001a64:	6820      	ldr	r0, [r4, #0]
 8001a66:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001a68 <ZbZclMsgServerAlloc>:
 8001a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a6c:	0006      	movs	r6, r0
 8001a6e:	000f      	movs	r7, r1
 8001a70:	0014      	movs	r4, r2
 8001a72:	4698      	mov	r8, r3
 8001a74:	2c00      	cmp	r4, #0
 8001a76:	d101      	bne.n	8001a7c <ZbZclMsgServerAlloc+0x14>
 8001a78:	2000      	movs	r0, #0
 8001a7a:	e053      	b.n	8001b24 <ZbZclMsgServerAlloc+0xbc>
 8001a7c:	6820      	ldr	r0, [r4, #0]
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d002      	beq.n	8001a88 <ZbZclMsgServerAlloc+0x20>
 8001a82:	6860      	ldr	r0, [r4, #4]
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d101      	bne.n	8001a8c <ZbZclMsgServerAlloc+0x24>
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e04b      	b.n	8001b24 <ZbZclMsgServerAlloc+0xbc>
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	9000      	str	r0, [sp, #0]
 8001a90:	003b      	movs	r3, r7
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f240 7203 	movw	r2, #1795	; 0x703
 8001a98:	2178      	movs	r1, #120	; 0x78
 8001a9a:	0030      	movs	r0, r6
 8001a9c:	f7fe fd45 	bl	800052a <ZbZclClusterAlloc>
 8001aa0:	0005      	movs	r5, r0
 8001aa2:	2d00      	cmp	r5, #0
 8001aa4:	d101      	bne.n	8001aaa <ZbZclMsgServerAlloc+0x42>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e03c      	b.n	8001b24 <ZbZclMsgServerAlloc+0xbc>
 8001aaa:	f20f 3035 	addw	r0, pc, #821	; 0x335
 8001aae:	65a8      	str	r0, [r5, #88]	; 0x58
 8001ab0:	2c00      	cmp	r4, #0
 8001ab2:	d009      	beq.n	8001ac8 <ZbZclMsgServerAlloc+0x60>
 8001ab4:	f05f 090c 	movs.w	r9, #12
 8001ab8:	f115 0a6c 	adds.w	sl, r5, #108	; 0x6c
 8001abc:	464a      	mov	r2, r9
 8001abe:	0021      	movs	r1, r4
 8001ac0:	4650      	mov	r0, sl
 8001ac2:	f00e f899 	bl	800fbf8 <__aeabi_memcpy>
 8001ac6:	e00a      	b.n	8001ade <ZbZclMsgServerAlloc+0x76>
 8001ac8:	f05f 090c 	movs.w	r9, #12
 8001acc:	f05f 0a00 	movs.w	sl, #0
 8001ad0:	f115 0b6c 	adds.w	fp, r5, #108	; 0x6c
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	4658      	mov	r0, fp
 8001ada:	f004 fce6 	bl	80064aa <__aeabi_memset>
 8001ade:	f240 1109 	movw	r1, #265	; 0x109
 8001ae2:	0028      	movs	r0, r5
 8001ae4:	f7fe fb9e 	bl	8000224 <ZbZclClusterSetProfileId>
 8001ae8:	21ab      	movs	r1, #171	; 0xab
 8001aea:	0028      	movs	r0, r5
 8001aec:	f7fe fbbb 	bl	8000266 <ZbZclClusterSetMinSecurity>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d104      	bne.n	8001afe <ZbZclMsgServerAlloc+0x96>
 8001af4:	0028      	movs	r0, r5
 8001af6:	f7fe fdd6 	bl	80006a6 <ZbZclClusterFree>
 8001afa:	2000      	movs	r0, #0
 8001afc:	e012      	b.n	8001b24 <ZbZclMsgServerAlloc+0xbc>
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0028      	movs	r0, r5
 8001b02:	f7fe fcb5 	bl	8000470 <ZbZclClusterSetMaxAsduLength>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d104      	bne.n	8001b14 <ZbZclMsgServerAlloc+0xac>
 8001b0a:	0028      	movs	r0, r5
 8001b0c:	f7fe fdcb 	bl	80006a6 <ZbZclClusterFree>
 8001b10:	2000      	movs	r0, #0
 8001b12:	e007      	b.n	8001b24 <ZbZclMsgServerAlloc+0xbc>
 8001b14:	4641      	mov	r1, r8
 8001b16:	0028      	movs	r0, r5
 8001b18:	f7fe fb7e 	bl	8000218 <ZbZclClusterSetCallbackArg>
 8001b1c:	0028      	movs	r0, r5
 8001b1e:	f7fe fd90 	bl	8000642 <ZbZclClusterAttach>
 8001b22:	0028      	movs	r0, r5
 8001b24:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b28 <display_message_build>:
 8001b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b2c:	0005      	movs	r5, r0
 8001b2e:	000e      	movs	r6, r1
 8001b30:	0017      	movs	r7, r2
 8001b32:	2000      	movs	r0, #0
 8001b34:	9000      	str	r0, [sp, #0]
 8001b36:	f117 000b 	adds.w	r0, r7, #11
 8001b3a:	f004 fd03 	bl	8006544 <strlen>
 8001b3e:	0004      	movs	r4, r0
 8001b40:	2c3c      	cmp	r4, #60	; 0x3c
 8001b42:	d302      	bcc.n	8001b4a <display_message_build+0x22>
 8001b44:	f05f 30ff 	movs.w	r0, #4294967295
 8001b48:	e055      	b.n	8001bf6 <display_message_build+0xce>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	466a      	mov	r2, sp
 8001b4e:	0031      	movs	r1, r6
 8001b50:	0028      	movs	r0, r5
 8001b52:	f7ff ff69 	bl	8001a28 <zb_zcl_append_uint32>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d502      	bpl.n	8001b60 <display_message_build+0x38>
 8001b5a:	f05f 30ff 	movs.w	r0, #4294967295
 8001b5e:	e04a      	b.n	8001bf6 <display_message_build+0xce>
 8001b60:	7abb      	ldrb	r3, [r7, #10]
 8001b62:	466a      	mov	r2, sp
 8001b64:	0031      	movs	r1, r6
 8001b66:	0028      	movs	r0, r5
 8001b68:	f7ff ff22 	bl	80019b0 <zb_zcl_append_uint8>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d502      	bpl.n	8001b76 <display_message_build+0x4e>
 8001b70:	f05f 30ff 	movs.w	r0, #4294967295
 8001b74:	e03f      	b.n	8001bf6 <display_message_build+0xce>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	466a      	mov	r2, sp
 8001b7a:	0031      	movs	r1, r6
 8001b7c:	0028      	movs	r0, r5
 8001b7e:	f7ff ff53 	bl	8001a28 <zb_zcl_append_uint32>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d502      	bpl.n	8001b8c <display_message_build+0x64>
 8001b86:	f05f 30ff 	movs.w	r0, #4294967295
 8001b8a:	e034      	b.n	8001bf6 <display_message_build+0xce>
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	466a      	mov	r2, sp
 8001b90:	0031      	movs	r1, r6
 8001b92:	0028      	movs	r0, r5
 8001b94:	f7ff ff27 	bl	80019e6 <zb_zcl_append_uint16>
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d502      	bpl.n	8001ba2 <display_message_build+0x7a>
 8001b9c:	f05f 30ff 	movs.w	r0, #4294967295
 8001ba0:	e029      	b.n	8001bf6 <display_message_build+0xce>
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	466a      	mov	r2, sp
 8001ba8:	0031      	movs	r1, r6
 8001baa:	0028      	movs	r0, r5
 8001bac:	f7ff ff00 	bl	80019b0 <zb_zcl_append_uint8>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d502      	bpl.n	8001bba <display_message_build+0x92>
 8001bb4:	f05f 30ff 	movs.w	r0, #4294967295
 8001bb8:	e01d      	b.n	8001bf6 <display_message_build+0xce>
 8001bba:	2c00      	cmp	r4, #0
 8001bbc:	d013      	beq.n	8001be6 <display_message_build+0xbe>
 8001bbe:	9800      	ldr	r0, [sp, #0]
 8001bc0:	1900      	adds	r0, r0, r4
 8001bc2:	4286      	cmp	r6, r0
 8001bc4:	d202      	bcs.n	8001bcc <display_message_build+0xa4>
 8001bc6:	f05f 30ff 	movs.w	r0, #4294967295
 8001bca:	e014      	b.n	8001bf6 <display_message_build+0xce>
 8001bcc:	f117 080b 	adds.w	r8, r7, #11
 8001bd0:	9800      	ldr	r0, [sp, #0]
 8001bd2:	eb05 0900 	add.w	r9, r5, r0
 8001bd6:	0022      	movs	r2, r4
 8001bd8:	4641      	mov	r1, r8
 8001bda:	4648      	mov	r0, r9
 8001bdc:	f00e f80c 	bl	800fbf8 <__aeabi_memcpy>
 8001be0:	9800      	ldr	r0, [sp, #0]
 8001be2:	1820      	adds	r0, r4, r0
 8001be4:	9000      	str	r0, [sp, #0]
 8001be6:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 8001bea:	9900      	ldr	r1, [sp, #0]
 8001bec:	5468      	strb	r0, [r5, r1]
 8001bee:	9800      	ldr	r0, [sp, #0]
 8001bf0:	1c40      	adds	r0, r0, #1
 8001bf2:	9000      	str	r0, [sp, #0]
 8001bf4:	9800      	ldr	r0, [sp, #0]
 8001bf6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08001bfa <ZbZclMsgServerDisplayMessageReq>:
 8001bfa:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bfe:	b096      	sub	sp, #88	; 0x58
 8001c00:	000c      	movs	r4, r1
 8001c02:	0015      	movs	r5, r2
 8001c04:	001e      	movs	r6, r3
 8001c06:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8001c08:	002a      	movs	r2, r5
 8001c0a:	2136      	movs	r1, #54	; 0x36
 8001c0c:	a808      	add	r0, sp, #32
 8001c0e:	f7ff ff8b 	bl	8001b28 <display_message_build>
 8001c12:	4680      	mov	r8, r0
 8001c14:	f1b8 0f00 	cmp.w	r8, #0
 8001c18:	d501      	bpl.n	8001c1e <ZbZclMsgServerDisplayMessageReq+0x24>
 8001c1a:	2089      	movs	r0, #137	; 0x89
 8001c1c:	e01e      	b.n	8001c5c <ZbZclMsgServerDisplayMessageReq+0x62>
 8001c1e:	f05f 0920 	movs.w	r9, #32
 8001c22:	f05f 0a00 	movs.w	sl, #0
 8001c26:	46eb      	mov	fp, sp
 8001c28:	4652      	mov	r2, sl
 8001c2a:	4649      	mov	r1, r9
 8001c2c:	4658      	mov	r0, fp
 8001c2e:	f004 fc3c 	bl	80064aa <__aeabi_memset>
 8001c32:	4668      	mov	r0, sp
 8001c34:	0021      	movs	r1, r4
 8001c36:	2210      	movs	r2, #16
 8001c38:	f00d ffde 	bl	800fbf8 <__aeabi_memcpy>
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f88d 0010 	strb.w	r0, [sp, #16]
 8001c42:	2000      	movs	r0, #0
 8001c44:	f88d 0011 	strb.w	r0, [sp, #17]
 8001c48:	a808      	add	r0, sp, #32
 8001c4a:	9005      	str	r0, [sp, #20]
 8001c4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001c50:	003b      	movs	r3, r7
 8001c52:	0032      	movs	r2, r6
 8001c54:	4669      	mov	r1, sp
 8001c56:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c58:	f00b f9a7 	bl	800cfaa <ZbZclClusterCommandReq>
 8001c5c:	b017      	add	sp, #92	; 0x5c
 8001c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c62 <ZbZclMsgServerDisplayProtectedMsgReq>:
 8001c62:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c66:	b096      	sub	sp, #88	; 0x58
 8001c68:	000c      	movs	r4, r1
 8001c6a:	0015      	movs	r5, r2
 8001c6c:	001e      	movs	r6, r3
 8001c6e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8001c70:	002a      	movs	r2, r5
 8001c72:	2136      	movs	r1, #54	; 0x36
 8001c74:	a808      	add	r0, sp, #32
 8001c76:	f7ff ff57 	bl	8001b28 <display_message_build>
 8001c7a:	4680      	mov	r8, r0
 8001c7c:	f1b8 0f00 	cmp.w	r8, #0
 8001c80:	d501      	bpl.n	8001c86 <ZbZclMsgServerDisplayProtectedMsgReq+0x24>
 8001c82:	2089      	movs	r0, #137	; 0x89
 8001c84:	e01e      	b.n	8001cc4 <ZbZclMsgServerDisplayProtectedMsgReq+0x62>
 8001c86:	f05f 0920 	movs.w	r9, #32
 8001c8a:	f05f 0a00 	movs.w	sl, #0
 8001c8e:	46eb      	mov	fp, sp
 8001c90:	4652      	mov	r2, sl
 8001c92:	4649      	mov	r1, r9
 8001c94:	4658      	mov	r0, fp
 8001c96:	f004 fc08 	bl	80064aa <__aeabi_memset>
 8001c9a:	4668      	mov	r0, sp
 8001c9c:	0021      	movs	r1, r4
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	f00d ffaa 	bl	800fbf8 <__aeabi_memcpy>
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f88d 0010 	strb.w	r0, [sp, #16]
 8001caa:	2000      	movs	r0, #0
 8001cac:	f88d 0011 	strb.w	r0, [sp, #17]
 8001cb0:	a808      	add	r0, sp, #32
 8001cb2:	9005      	str	r0, [sp, #20]
 8001cb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8001cb8:	003b      	movs	r3, r7
 8001cba:	0032      	movs	r2, r6
 8001cbc:	4669      	mov	r1, sp
 8001cbe:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001cc0:	f00b f973 	bl	800cfaa <ZbZclClusterCommandReq>
 8001cc4:	b017      	add	sp, #92	; 0x5c
 8001cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cca <cancel_message_build>:
 8001cca:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001ccc:	0004      	movs	r4, r0
 8001cce:	000d      	movs	r5, r1
 8001cd0:	0016      	movs	r6, r2
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	9000      	str	r0, [sp, #0]
 8001cd6:	6833      	ldr	r3, [r6, #0]
 8001cd8:	466a      	mov	r2, sp
 8001cda:	0029      	movs	r1, r5
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f7ff fea3 	bl	8001a28 <zb_zcl_append_uint32>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d502      	bpl.n	8001cec <cancel_message_build+0x22>
 8001ce6:	f05f 30ff 	movs.w	r0, #4294967295
 8001cea:	e00b      	b.n	8001d04 <cancel_message_build+0x3a>
 8001cec:	7933      	ldrb	r3, [r6, #4]
 8001cee:	466a      	mov	r2, sp
 8001cf0:	0029      	movs	r1, r5
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	f7ff fe5c 	bl	80019b0 <zb_zcl_append_uint8>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d502      	bpl.n	8001d02 <cancel_message_build+0x38>
 8001cfc:	f05f 30ff 	movs.w	r0, #4294967295
 8001d00:	e000      	b.n	8001d04 <cancel_message_build+0x3a>
 8001d02:	9800      	ldr	r0, [sp, #0]
 8001d04:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08001d06 <ZbZclMsgServerCancelMessageReq>:
 8001d06:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	000c      	movs	r4, r1
 8001d0e:	0015      	movs	r5, r2
 8001d10:	001e      	movs	r6, r3
 8001d12:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8001d14:	002a      	movs	r2, r5
 8001d16:	2136      	movs	r1, #54	; 0x36
 8001d18:	a808      	add	r0, sp, #32
 8001d1a:	f7ff ffd6 	bl	8001cca <cancel_message_build>
 8001d1e:	4680      	mov	r8, r0
 8001d20:	f1b8 0f00 	cmp.w	r8, #0
 8001d24:	d501      	bpl.n	8001d2a <ZbZclMsgServerCancelMessageReq+0x24>
 8001d26:	2089      	movs	r0, #137	; 0x89
 8001d28:	e01e      	b.n	8001d68 <ZbZclMsgServerCancelMessageReq+0x62>
 8001d2a:	f05f 0920 	movs.w	r9, #32
 8001d2e:	f05f 0a00 	movs.w	sl, #0
 8001d32:	46eb      	mov	fp, sp
 8001d34:	4652      	mov	r2, sl
 8001d36:	4649      	mov	r1, r9
 8001d38:	4658      	mov	r0, fp
 8001d3a:	f004 fbb6 	bl	80064aa <__aeabi_memset>
 8001d3e:	4668      	mov	r0, sp
 8001d40:	0021      	movs	r1, r4
 8001d42:	2210      	movs	r2, #16
 8001d44:	f00d ff58 	bl	800fbf8 <__aeabi_memcpy>
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f88d 0010 	strb.w	r0, [sp, #16]
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f88d 0011 	strb.w	r0, [sp, #17]
 8001d54:	a808      	add	r0, sp, #32
 8001d56:	9005      	str	r0, [sp, #20]
 8001d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8001d5c:	003b      	movs	r3, r7
 8001d5e:	0032      	movs	r2, r6
 8001d60:	4669      	mov	r1, sp
 8001d62:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d64:	f00b f921 	bl	800cfaa <ZbZclClusterCommandReq>
 8001d68:	b017      	add	sp, #92	; 0x5c
 8001d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d6e <ZbZclMsgServerCancelAllReq>:
 8001d6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d72:	b098      	sub	sp, #96	; 0x60
 8001d74:	0004      	movs	r4, r0
 8001d76:	000d      	movs	r5, r1
 8001d78:	0016      	movs	r6, r2
 8001d7a:	001f      	movs	r7, r3
 8001d7c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001d80:	2000      	movs	r0, #0
 8001d82:	9000      	str	r0, [sp, #0]
 8001d84:	6833      	ldr	r3, [r6, #0]
 8001d86:	466a      	mov	r2, sp
 8001d88:	2136      	movs	r1, #54	; 0x36
 8001d8a:	a80a      	add	r0, sp, #40	; 0x28
 8001d8c:	f7ff fe4c 	bl	8001a28 <zb_zcl_append_uint32>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d501      	bpl.n	8001d98 <ZbZclMsgServerCancelAllReq+0x2a>
 8001d94:	2089      	movs	r0, #137	; 0x89
 8001d96:	e01f      	b.n	8001dd8 <ZbZclMsgServerCancelAllReq+0x6a>
 8001d98:	f05f 0920 	movs.w	r9, #32
 8001d9c:	f05f 0a00 	movs.w	sl, #0
 8001da0:	f10d 0b08 	add.w	fp, sp, #8
 8001da4:	4652      	mov	r2, sl
 8001da6:	4649      	mov	r1, r9
 8001da8:	4658      	mov	r0, fp
 8001daa:	f004 fb7e 	bl	80064aa <__aeabi_memset>
 8001dae:	a802      	add	r0, sp, #8
 8001db0:	0029      	movs	r1, r5
 8001db2:	2210      	movs	r2, #16
 8001db4:	f00d ff20 	bl	800fbf8 <__aeabi_memcpy>
 8001db8:	2003      	movs	r0, #3
 8001dba:	f88d 0018 	strb.w	r0, [sp, #24]
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f88d 0019 	strb.w	r0, [sp, #25]
 8001dc4:	a80a      	add	r0, sp, #40	; 0x28
 8001dc6:	9007      	str	r0, [sp, #28]
 8001dc8:	9800      	ldr	r0, [sp, #0]
 8001dca:	9008      	str	r0, [sp, #32]
 8001dcc:	4643      	mov	r3, r8
 8001dce:	003a      	movs	r2, r7
 8001dd0:	a902      	add	r1, sp, #8
 8001dd2:	0020      	movs	r0, r4
 8001dd4:	f00b f8e9 	bl	800cfaa <ZbZclClusterCommandReq>
 8001dd8:	b019      	add	sp, #100	; 0x64
 8001dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001de0 <msg_server_command>:
 8001de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de4:	b090      	sub	sp, #64	; 0x40
 8001de6:	0004      	movs	r4, r0
 8001de8:	000d      	movs	r5, r1
 8001dea:	0016      	movs	r6, r2
 8001dec:	0027      	movs	r7, r4
 8001dee:	20ff      	movs	r0, #255	; 0xff
 8001df0:	f88d 0001 	strb.w	r0, [sp, #1]
 8001df4:	78a8      	ldrb	r0, [r5, #2]
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d001      	beq.n	8001dfe <msg_server_command+0x1e>
 8001dfa:	2081      	movs	r0, #129	; 0x81
 8001dfc:	e0af      	b.n	8001f5e <msg_server_command+0x17e>
 8001dfe:	7868      	ldrb	r0, [r5, #1]
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d001      	beq.n	8001e08 <msg_server_command+0x28>
 8001e04:	2081      	movs	r0, #129	; 0x81
 8001e06:	e0aa      	b.n	8001f5e <msg_server_command+0x17e>
 8001e08:	0030      	movs	r0, r6
 8001e0a:	f00a fcc6 	bl	800c79a <ZbApsAddrIsBcast>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d001      	beq.n	8001e16 <msg_server_command+0x36>
 8001e12:	20ff      	movs	r0, #255	; 0xff
 8001e14:	e0a3      	b.n	8001f5e <msg_server_command+0x17e>
 8001e16:	f05f 0818 	movs.w	r8, #24
 8001e1a:	f05f 0900 	movs.w	r9, #0
 8001e1e:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8001e22:	464a      	mov	r2, r9
 8001e24:	4641      	mov	r1, r8
 8001e26:	4650      	mov	r0, sl
 8001e28:	f004 fb3f 	bl	80064aa <__aeabi_memset>
 8001e2c:	a80a      	add	r0, sp, #40	; 0x28
 8001e2e:	f116 0110 	adds.w	r1, r6, #16
 8001e32:	2210      	movs	r2, #16
 8001e34:	f00d fee0 	bl	800fbf8 <__aeabi_memcpy>
 8001e38:	79a8      	ldrb	r0, [r5, #6]
 8001e3a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
 8001e3e:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8001e42:	f7fe fade 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 8001e46:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8001e4a:	79e8      	ldrb	r0, [r5, #7]
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d003      	beq.n	8001e58 <msg_server_command+0x78>
 8001e50:	2802      	cmp	r0, #2
 8001e52:	d071      	beq.n	8001f38 <msg_server_command+0x158>
 8001e54:	d30b      	bcc.n	8001e6e <msg_server_command+0x8e>
 8001e56:	e080      	b.n	8001f5a <msg_server_command+0x17a>
 8001e58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d101      	bne.n	8001e62 <msg_server_command+0x82>
 8001e5e:	2081      	movs	r0, #129	; 0x81
 8001e60:	e07c      	b.n	8001f5c <msg_server_command+0x17c>
 8001e62:	aa0a      	add	r2, sp, #40	; 0x28
 8001e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e66:	0020      	movs	r0, r4
 8001e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6a:	4798      	blx	r3
 8001e6c:	e076      	b.n	8001f5c <msg_server_command+0x17c>
 8001e6e:	f05f 0800 	movs.w	r8, #0
 8001e72:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d101      	bne.n	8001e7c <msg_server_command+0x9c>
 8001e78:	2081      	movs	r0, #129	; 0x81
 8001e7a:	e06f      	b.n	8001f5c <msg_server_command+0x17c>
 8001e7c:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8001e7e:	2808      	cmp	r0, #8
 8001e80:	da01      	bge.n	8001e86 <msg_server_command+0xa6>
 8001e82:	2080      	movs	r0, #128	; 0x80
 8001e84:	e06a      	b.n	8001f5c <msg_server_command+0x17c>
 8001e86:	f05f 0920 	movs.w	r9, #32
 8001e8a:	f05f 0a00 	movs.w	sl, #0
 8001e8e:	f10d 0b08 	add.w	fp, sp, #8
 8001e92:	4652      	mov	r2, sl
 8001e94:	4649      	mov	r1, r9
 8001e96:	4658      	mov	r0, fp
 8001e98:	f004 fb07 	bl	80064aa <__aeabi_memset>
 8001e9c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001e9e:	4440      	add	r0, r8
 8001ea0:	f000 f87f 	bl	8001fa2 <pletoh32>
 8001ea4:	9002      	str	r0, [sp, #8]
 8001ea6:	f118 0804 	adds.w	r8, r8, #4
 8001eaa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001eac:	4440      	add	r0, r8
 8001eae:	f000 f878 	bl	8001fa2 <pletoh32>
 8001eb2:	9003      	str	r0, [sp, #12]
 8001eb4:	f118 0804 	adds.w	r8, r8, #4
 8001eb8:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8001eba:	4580      	cmp	r8, r0
 8001ebc:	d231      	bcs.n	8001f22 <msg_server_command+0x142>
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f88d 0010 	strb.w	r0, [sp, #16]
 8001ec4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001ec6:	f810 0008 	ldrb.w	r0, [r0, r8]
 8001eca:	f88d 0011 	strb.w	r0, [sp, #17]
 8001ece:	f118 0801 	adds.w	r8, r8, #1
 8001ed2:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8001ed4:	4580      	cmp	r8, r0
 8001ed6:	d220      	bcs.n	8001f1a <msg_server_command+0x13a>
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f88d 0012 	strb.w	r0, [sp, #18]
 8001ede:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001ee0:	f810 0008 	ldrb.w	r0, [r0, r8]
 8001ee4:	f88d 0000 	strb.w	r0, [sp]
 8001ee8:	f118 0801 	adds.w	r8, r8, #1
 8001eec:	f89d 0000 	ldrb.w	r0, [sp]
 8001ef0:	2816      	cmp	r0, #22
 8001ef2:	d301      	bcc.n	8001ef8 <msg_server_command+0x118>
 8001ef4:	2080      	movs	r0, #128	; 0x80
 8001ef6:	e032      	b.n	8001f5e <msg_server_command+0x17e>
 8001ef8:	f89d 0000 	ldrb.w	r0, [sp]
 8001efc:	f88d 0013 	strb.w	r0, [sp, #19]
 8001f00:	f89d 9000 	ldrb.w	r9, [sp]
 8001f04:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001f06:	eb00 0a08 	add.w	sl, r0, r8
 8001f0a:	f10d 0b14 	add.w	fp, sp, #20
 8001f0e:	464a      	mov	r2, r9
 8001f10:	4651      	mov	r1, sl
 8001f12:	4658      	mov	r0, fp
 8001f14:	f00d fe70 	bl	800fbf8 <__aeabi_memcpy>
 8001f18:	e006      	b.n	8001f28 <msg_server_command+0x148>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f88d 0012 	strb.w	r0, [sp, #18]
 8001f20:	e002      	b.n	8001f28 <msg_server_command+0x148>
 8001f22:	2000      	movs	r0, #0
 8001f24:	f88d 0010 	strb.w	r0, [sp, #16]
 8001f28:	ab0a      	add	r3, sp, #40	; 0x28
 8001f2a:	aa02      	add	r2, sp, #8
 8001f2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f8d7 c070 	ldr.w	ip, [r7, #112]	; 0x70
 8001f34:	47e0      	blx	ip
 8001f36:	e011      	b.n	8001f5c <msg_server_command+0x17c>
 8001f38:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d101      	bne.n	8001f42 <msg_server_command+0x162>
 8001f3e:	2081      	movs	r0, #129	; 0x81
 8001f40:	e00c      	b.n	8001f5c <msg_server_command+0x17c>
 8001f42:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8001f44:	f000 f82d 	bl	8001fa2 <pletoh32>
 8001f48:	9001      	str	r0, [sp, #4]
 8001f4a:	ab0a      	add	r3, sp, #40	; 0x28
 8001f4c:	aa01      	add	r2, sp, #4
 8001f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f50:	0020      	movs	r0, r4
 8001f52:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
 8001f56:	47e0      	blx	ip
 8001f58:	e000      	b.n	8001f5c <msg_server_command+0x17c>
 8001f5a:	2081      	movs	r0, #129	; 0x81
 8001f5c:	b2c0      	uxtb	r0, r0
 8001f5e:	b011      	add	sp, #68	; 0x44
 8001f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f64 <is_little_endian>:
 8001f64:	b081      	sub	sp, #4
 8001f66:	2001      	movs	r0, #1
 8001f68:	f8ad 0000 	strh.w	r0, [sp]
 8001f6c:	4668      	mov	r0, sp
 8001f6e:	7800      	ldrb	r0, [r0, #0]
 8001f70:	2801      	cmp	r0, #1
 8001f72:	d101      	bne.n	8001f78 <is_little_endian+0x14>
 8001f74:	2001      	movs	r0, #1
 8001f76:	e000      	b.n	8001f7a <is_little_endian+0x16>
 8001f78:	2000      	movs	r0, #0
 8001f7a:	b2c0      	uxtb	r0, r0
 8001f7c:	b001      	add	sp, #4
 8001f7e:	4770      	bx	lr

08001f80 <pletoh16>:
 8001f80:	0001      	movs	r1, r0
 8001f82:	7808      	ldrb	r0, [r1, #0]
 8001f84:	7849      	ldrb	r1, [r1, #1]
 8001f86:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001f8a:	b280      	uxth	r0, r0
 8001f8c:	4770      	bx	lr

08001f8e <pletoh24>:
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	0004      	movs	r4, r0
 8001f92:	0020      	movs	r0, r4
 8001f94:	f7ff fff4 	bl	8001f80 <pletoh16>
 8001f98:	b280      	uxth	r0, r0
 8001f9a:	78a1      	ldrb	r1, [r4, #2]
 8001f9c:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8001fa0:	bd10      	pop	{r4, pc}

08001fa2 <pletoh32>:
 8001fa2:	b538      	push	{r3, r4, r5, lr}
 8001fa4:	0004      	movs	r4, r0
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f7ff ffea 	bl	8001f80 <pletoh16>
 8001fac:	0005      	movs	r5, r0
 8001fae:	b2ad      	uxth	r5, r5
 8001fb0:	1ca0      	adds	r0, r4, #2
 8001fb2:	f7ff ffe5 	bl	8001f80 <pletoh16>
 8001fb6:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8001fba:	0028      	movs	r0, r5
 8001fbc:	bd32      	pop	{r1, r4, r5, pc}

08001fbe <pletoh40>:
 8001fbe:	b510      	push	{r4, lr}
 8001fc0:	0004      	movs	r4, r0
 8001fc2:	0020      	movs	r0, r4
 8001fc4:	f7ff ffed 	bl	8001fa2 <pletoh32>
 8001fc8:	7921      	ldrb	r1, [r4, #4]
 8001fca:	bd10      	pop	{r4, pc}

08001fcc <pletoh48>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	0004      	movs	r4, r0
 8001fd0:	0020      	movs	r0, r4
 8001fd2:	f7ff fff4 	bl	8001fbe <pletoh40>
 8001fd6:	7962      	ldrb	r2, [r4, #5]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	0213      	lsls	r3, r2, #8
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	4319      	orrs	r1, r3
 8001fe2:	bd10      	pop	{r4, pc}

08001fe4 <pletoh56>:
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	0004      	movs	r4, r0
 8001fe8:	0020      	movs	r0, r4
 8001fea:	f7ff ffef 	bl	8001fcc <pletoh48>
 8001fee:	79a2      	ldrb	r2, [r4, #6]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	0413      	lsls	r3, r2, #16
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4310      	orrs	r0, r2
 8001ff8:	4319      	orrs	r1, r3
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <pletoh64>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	0005      	movs	r5, r0
 8002000:	0028      	movs	r0, r5
 8002002:	f7ff ffce 	bl	8001fa2 <pletoh32>
 8002006:	0004      	movs	r4, r0
 8002008:	1d28      	adds	r0, r5, #4
 800200a:	f7ff ffca 	bl	8001fa2 <pletoh32>
 800200e:	0003      	movs	r3, r0
 8002010:	0022      	movs	r2, r4
 8002012:	0010      	movs	r0, r2
 8002014:	0019      	movs	r1, r3
 8002016:	bd34      	pop	{r2, r4, r5, pc}

08002018 <putle16>:
 8002018:	7001      	strb	r1, [r0, #0]
 800201a:	000a      	movs	r2, r1
 800201c:	b292      	uxth	r2, r2
 800201e:	0a12      	lsrs	r2, r2, #8
 8002020:	7042      	strb	r2, [r0, #1]
 8002022:	4770      	bx	lr

08002024 <putle24>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	0004      	movs	r4, r0
 8002028:	000d      	movs	r5, r1
 800202a:	0029      	movs	r1, r5
 800202c:	b289      	uxth	r1, r1
 800202e:	0020      	movs	r0, r4
 8002030:	f7ff fff2 	bl	8002018 <putle16>
 8002034:	0028      	movs	r0, r5
 8002036:	0c00      	lsrs	r0, r0, #16
 8002038:	70a0      	strb	r0, [r4, #2]
 800203a:	bd31      	pop	{r0, r4, r5, pc}

0800203c <putle32>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	0004      	movs	r4, r0
 8002040:	000d      	movs	r5, r1
 8002042:	0029      	movs	r1, r5
 8002044:	0020      	movs	r0, r4
 8002046:	f7ff ffed 	bl	8002024 <putle24>
 800204a:	0028      	movs	r0, r5
 800204c:	0e00      	lsrs	r0, r0, #24
 800204e:	70e0      	strb	r0, [r4, #3]
 8002050:	bd31      	pop	{r0, r4, r5, pc}

08002052 <putle40>:
 8002052:	b570      	push	{r4, r5, r6, lr}
 8002054:	0006      	movs	r6, r0
 8002056:	0014      	movs	r4, r2
 8002058:	001d      	movs	r5, r3
 800205a:	0021      	movs	r1, r4
 800205c:	0030      	movs	r0, r6
 800205e:	f7ff ffed 	bl	800203c <putle32>
 8002062:	7135      	strb	r5, [r6, #4]
 8002064:	bd70      	pop	{r4, r5, r6, pc}

08002066 <putle48>:
 8002066:	b570      	push	{r4, r5, r6, lr}
 8002068:	0006      	movs	r6, r0
 800206a:	0014      	movs	r4, r2
 800206c:	001d      	movs	r5, r3
 800206e:	0022      	movs	r2, r4
 8002070:	002b      	movs	r3, r5
 8002072:	0030      	movs	r0, r6
 8002074:	f7ff ffed 	bl	8002052 <putle40>
 8002078:	0020      	movs	r0, r4
 800207a:	0029      	movs	r1, r5
 800207c:	0a08      	lsrs	r0, r1, #8
 800207e:	2100      	movs	r1, #0
 8002080:	7170      	strb	r0, [r6, #5]
 8002082:	bd70      	pop	{r4, r5, r6, pc}

08002084 <putle56>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	0006      	movs	r6, r0
 8002088:	0014      	movs	r4, r2
 800208a:	001d      	movs	r5, r3
 800208c:	0022      	movs	r2, r4
 800208e:	002b      	movs	r3, r5
 8002090:	0030      	movs	r0, r6
 8002092:	f7ff ffe8 	bl	8002066 <putle48>
 8002096:	0020      	movs	r0, r4
 8002098:	0029      	movs	r1, r5
 800209a:	0c08      	lsrs	r0, r1, #16
 800209c:	2100      	movs	r1, #0
 800209e:	71b0      	strb	r0, [r6, #6]
 80020a0:	bd70      	pop	{r4, r5, r6, pc}

080020a2 <putle64>:
 80020a2:	b570      	push	{r4, r5, r6, lr}
 80020a4:	0006      	movs	r6, r0
 80020a6:	0014      	movs	r4, r2
 80020a8:	001d      	movs	r5, r3
 80020aa:	0022      	movs	r2, r4
 80020ac:	002b      	movs	r3, r5
 80020ae:	0030      	movs	r0, r6
 80020b0:	f7ff ffe8 	bl	8002084 <putle56>
 80020b4:	0020      	movs	r0, r4
 80020b6:	0029      	movs	r1, r5
 80020b8:	0e08      	lsrs	r0, r1, #24
 80020ba:	2100      	movs	r1, #0
 80020bc:	71f0      	strb	r0, [r6, #7]
 80020be:	bd70      	pop	{r4, r5, r6, pc}

080020c0 <ZbZclAttrAddSorted>:
 80020c0:	b430      	push	{r4, r5}
 80020c2:	0002      	movs	r2, r0
 80020c4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80020c6:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 80020ca:	42a0      	cmp	r0, r4
 80020cc:	d001      	beq.n	80020d2 <ZbZclAttrAddSorted+0x12>
 80020ce:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80020d0:	e000      	b.n	80020d4 <ZbZclAttrAddSorted+0x14>
 80020d2:	2000      	movs	r0, #0
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d017      	beq.n	8002108 <ZbZclAttrAddSorted+0x48>
 80020d8:	0003      	movs	r3, r0
 80020da:	688c      	ldr	r4, [r1, #8]
 80020dc:	8824      	ldrh	r4, [r4, #0]
 80020de:	689d      	ldr	r5, [r3, #8]
 80020e0:	882d      	ldrh	r5, [r5, #0]
 80020e2:	42ac      	cmp	r4, r5
 80020e4:	d207      	bcs.n	80020f6 <ZbZclAttrAddSorted+0x36>
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	685c      	ldr	r4, [r3, #4]
 80020ea:	604c      	str	r4, [r1, #4]
 80020ec:	680c      	ldr	r4, [r1, #0]
 80020ee:	6061      	str	r1, [r4, #4]
 80020f0:	684c      	ldr	r4, [r1, #4]
 80020f2:	6021      	str	r1, [r4, #0]
 80020f4:	e011      	b.n	800211a <ZbZclAttrAddSorted+0x5a>
 80020f6:	6804      	ldr	r4, [r0, #0]
 80020f8:	f112 0524 	adds.w	r5, r2, #36	; 0x24
 80020fc:	42ac      	cmp	r4, r5
 80020fe:	d001      	beq.n	8002104 <ZbZclAttrAddSorted+0x44>
 8002100:	6800      	ldr	r0, [r0, #0]
 8002102:	e7e7      	b.n	80020d4 <ZbZclAttrAddSorted+0x14>
 8002104:	2000      	movs	r0, #0
 8002106:	e7e5      	b.n	80020d4 <ZbZclAttrAddSorted+0x14>
 8002108:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 800210c:	600c      	str	r4, [r1, #0]
 800210e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8002110:	604c      	str	r4, [r1, #4]
 8002112:	680c      	ldr	r4, [r1, #0]
 8002114:	6061      	str	r1, [r4, #4]
 8002116:	684c      	ldr	r4, [r1, #4]
 8002118:	6021      	str	r1, [r4, #0]
 800211a:	bc30      	pop	{r4, r5}
 800211c:	4770      	bx	lr

0800211e <ZbZclAttrFind>:
 800211e:	b430      	push	{r4, r5}
 8002120:	0003      	movs	r3, r0
 8002122:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002124:	f113 0224 	adds.w	r2, r3, #36	; 0x24
 8002128:	4290      	cmp	r0, r2
 800212a:	d001      	beq.n	8002130 <ZbZclAttrFind+0x12>
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	e000      	b.n	8002132 <ZbZclAttrFind+0x14>
 8002130:	2200      	movs	r2, #0
 8002132:	2a00      	cmp	r2, #0
 8002134:	d012      	beq.n	800215c <ZbZclAttrFind+0x3e>
 8002136:	0014      	movs	r4, r2
 8002138:	68a0      	ldr	r0, [r4, #8]
 800213a:	8800      	ldrh	r0, [r0, #0]
 800213c:	000d      	movs	r5, r1
 800213e:	b2ad      	uxth	r5, r5
 8002140:	42a8      	cmp	r0, r5
 8002142:	d005      	beq.n	8002150 <ZbZclAttrFind+0x32>
 8002144:	6810      	ldr	r0, [r2, #0]
 8002146:	f113 0524 	adds.w	r5, r3, #36	; 0x24
 800214a:	42a8      	cmp	r0, r5
 800214c:	d004      	beq.n	8002158 <ZbZclAttrFind+0x3a>
 800214e:	e001      	b.n	8002154 <ZbZclAttrFind+0x36>
 8002150:	0020      	movs	r0, r4
 8002152:	e004      	b.n	800215e <ZbZclAttrFind+0x40>
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	e7ec      	b.n	8002132 <ZbZclAttrFind+0x14>
 8002158:	2200      	movs	r2, #0
 800215a:	e7ea      	b.n	8002132 <ZbZclAttrFind+0x14>
 800215c:	2000      	movs	r0, #0
 800215e:	bc30      	pop	{r4, r5}
 8002160:	4770      	bx	lr

08002162 <ZbZclAttrHandleDiscover>:
 8002162:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002166:	b09f      	sub	sp, #124	; 0x7c
 8002168:	0004      	movs	r4, r0
 800216a:	000d      	movs	r5, r1
 800216c:	0016      	movs	r6, r2
 800216e:	2708      	movs	r7, #8
 8002170:	f05f 0800 	movs.w	r8, #0
 8002174:	f10d 0908 	add.w	r9, sp, #8
 8002178:	4642      	mov	r2, r8
 800217a:	0039      	movs	r1, r7
 800217c:	4648      	mov	r0, r9
 800217e:	f004 f994 	bl	80064aa <__aeabi_memset>
 8002182:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8002184:	2803      	cmp	r0, #3
 8002186:	d206      	bcs.n	8002196 <ZbZclAttrHandleDiscover+0x34>
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	002a      	movs	r2, r5
 800218c:	0031      	movs	r1, r6
 800218e:	0020      	movs	r0, r4
 8002190:	f00a fed5 	bl	800cf3e <ZbZclSendDefaultResponse>
 8002194:	e070      	b.n	8002278 <ZbZclAttrHandleDiscover+0x116>
 8002196:	f05f 0800 	movs.w	r8, #0
 800219a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800219c:	4641      	mov	r1, r8
 800219e:	b2c9      	uxtb	r1, r1
 80021a0:	4408      	add	r0, r1
 80021a2:	f7ff feed 	bl	8001f80 <pletoh16>
 80021a6:	0007      	movs	r7, r0
 80021a8:	f118 0802 	adds.w	r8, r8, #2
 80021ac:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80021ae:	4641      	mov	r1, r8
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	5c40      	ldrb	r0, [r0, r1]
 80021b4:	f88d 0004 	strb.w	r0, [sp, #4]
 80021b8:	f118 0801 	adds.w	r8, r8, #1
 80021bc:	2000      	movs	r0, #0
 80021be:	f88d 0008 	strb.w	r0, [sp, #8]
 80021c2:	7868      	ldrb	r0, [r5, #1]
 80021c4:	f88d 0009 	strb.w	r0, [sp, #9]
 80021c8:	78a8      	ldrb	r0, [r5, #2]
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d101      	bne.n	80021d2 <ZbZclAttrHandleDiscover+0x70>
 80021ce:	2001      	movs	r0, #1
 80021d0:	e000      	b.n	80021d4 <ZbZclAttrHandleDiscover+0x72>
 80021d2:	2000      	movs	r0, #0
 80021d4:	f88d 000a 	strb.w	r0, [sp, #10]
 80021d8:	2001      	movs	r0, #1
 80021da:	f88d 000b 	strb.w	r0, [sp, #11]
 80021de:	88a8      	ldrh	r0, [r5, #4]
 80021e0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80021e4:	79a8      	ldrb	r0, [r5, #6]
 80021e6:	f88d 000e 	strb.w	r0, [sp, #14]
 80021ea:	200d      	movs	r0, #13
 80021ec:	f88d 000f 	strb.w	r0, [sp, #15]
 80021f0:	2239      	movs	r2, #57	; 0x39
 80021f2:	a910      	add	r1, sp, #64	; 0x40
 80021f4:	a802      	add	r0, sp, #8
 80021f6:	f7ff f99f 	bl	8001538 <ZbZclAppendHeader>
 80021fa:	4682      	mov	sl, r0
 80021fc:	f1ba 0f00 	cmp.w	sl, #0
 8002200:	d506      	bpl.n	8002210 <ZbZclAttrHandleDiscover+0xae>
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	002a      	movs	r2, r5
 8002206:	0031      	movs	r1, r6
 8002208:	0020      	movs	r0, r4
 800220a:	f00a fe98 	bl	800cf3e <ZbZclSendDefaultResponse>
 800220e:	e033      	b.n	8002278 <ZbZclAttrHandleDiscover+0x116>
 8002210:	f1da 0039 	rsbs	r0, sl, #57	; 0x39
 8002214:	9000      	str	r0, [sp, #0]
 8002216:	a810      	add	r0, sp, #64	; 0x40
 8002218:	eb00 030a 	add.w	r3, r0, sl
 800221c:	aa01      	add	r2, sp, #4
 800221e:	0039      	movs	r1, r7
 8002220:	b289      	uxth	r1, r1
 8002222:	0020      	movs	r0, r4
 8002224:	f000 f82b 	bl	800227e <ZbZclAttrDiscoverGetList>
 8002228:	4681      	mov	r9, r0
 800222a:	eb19 090a 	adds.w	r9, r9, sl
 800222e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002232:	2800      	cmp	r0, #0
 8002234:	d104      	bne.n	8002240 <ZbZclAttrHandleDiscover+0xde>
 8002236:	0030      	movs	r0, r6
 8002238:	f00a faaf 	bl	800c79a <ZbApsAddrIsBcast>
 800223c:	2800      	cmp	r0, #0
 800223e:	d11b      	bne.n	8002278 <ZbZclAttrHandleDiscover+0x116>
 8002240:	0032      	movs	r2, r6
 8002242:	a904      	add	r1, sp, #16
 8002244:	0020      	movs	r0, r4
 8002246:	f7fe f941 	bl	80004cc <ZbZclClusterInitApsdeReq>
 800224a:	a804      	add	r0, sp, #16
 800224c:	f116 0110 	adds.w	r1, r6, #16
 8002250:	2210      	movs	r2, #16
 8002252:	f00d fcd1 	bl	800fbf8 <__aeabi_memcpy>
 8002256:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 800225a:	f7fe f8d2 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 800225e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8002262:	a810      	add	r0, sp, #64	; 0x40
 8002264:	900a      	str	r0, [sp, #40]	; 0x28
 8002266:	4648      	mov	r0, r9
 8002268:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	a904      	add	r1, sp, #16
 8002272:	68a0      	ldr	r0, [r4, #8]
 8002274:	f00a fa1c 	bl	800c6b0 <ZbApsdeDataReqCallback>
 8002278:	b020      	add	sp, #128	; 0x80
 800227a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800227e <ZbZclAttrDiscoverGetList>:
 800227e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002282:	0005      	movs	r5, r0
 8002284:	0016      	movs	r6, r2
 8002286:	001f      	movs	r7, r3
 8002288:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800228c:	f05f 0a00 	movs.w	sl, #0
 8002290:	f05f 0b00 	movs.w	fp, #0
 8002294:	2000      	movs	r0, #0
 8002296:	f807 000b 	strb.w	r0, [r7, fp]
 800229a:	f11b 0b01 	adds.w	fp, fp, #1
 800229e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80022a0:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 80022a4:	4288      	cmp	r0, r1
 80022a6:	d001      	beq.n	80022ac <ZbZclAttrDiscoverGetList+0x2e>
 80022a8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80022aa:	e000      	b.n	80022ae <ZbZclAttrDiscoverGetList+0x30>
 80022ac:	2400      	movs	r4, #0
 80022ae:	2c00      	cmp	r4, #0
 80022b0:	d030      	beq.n	8002314 <ZbZclAttrDiscoverGetList+0x96>
 80022b2:	46a1      	mov	r9, r4
 80022b4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80022b8:	8800      	ldrh	r0, [r0, #0]
 80022ba:	f8bd 1000 	ldrh.w	r1, [sp]
 80022be:	4288      	cmp	r0, r1
 80022c0:	d31f      	bcc.n	8002302 <ZbZclAttrDiscoverGetList+0x84>
 80022c2:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80022c6:	8880      	ldrh	r0, [r0, #4]
 80022c8:	0400      	lsls	r0, r0, #16
 80022ca:	d41a      	bmi.n	8002302 <ZbZclAttrDiscoverGetList+0x84>
 80022cc:	4650      	mov	r0, sl
 80022ce:	7831      	ldrb	r1, [r6, #0]
 80022d0:	b2c0      	uxtb	r0, r0
 80022d2:	4288      	cmp	r0, r1
 80022d4:	d21e      	bcs.n	8002314 <ZbZclAttrDiscoverGetList+0x96>
 80022d6:	f11b 0003 	adds.w	r0, fp, #3
 80022da:	4580      	cmp	r8, r0
 80022dc:	d31a      	bcc.n	8002314 <ZbZclAttrDiscoverGetList+0x96>
 80022de:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80022e2:	8801      	ldrh	r1, [r0, #0]
 80022e4:	eb07 000b 	add.w	r0, r7, fp
 80022e8:	f7ff fe96 	bl	8002018 <putle16>
 80022ec:	f11b 0b02 	adds.w	fp, fp, #2
 80022f0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80022f4:	7880      	ldrb	r0, [r0, #2]
 80022f6:	f807 000b 	strb.w	r0, [r7, fp]
 80022fa:	f11b 0b01 	adds.w	fp, fp, #1
 80022fe:	f11a 0a01 	adds.w	sl, sl, #1
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8002308:	4288      	cmp	r0, r1
 800230a:	d001      	beq.n	8002310 <ZbZclAttrDiscoverGetList+0x92>
 800230c:	6824      	ldr	r4, [r4, #0]
 800230e:	e7ce      	b.n	80022ae <ZbZclAttrDiscoverGetList+0x30>
 8002310:	2400      	movs	r4, #0
 8002312:	e7cc      	b.n	80022ae <ZbZclAttrDiscoverGetList+0x30>
 8002314:	2c00      	cmp	r4, #0
 8002316:	d101      	bne.n	800231c <ZbZclAttrDiscoverGetList+0x9e>
 8002318:	2001      	movs	r0, #1
 800231a:	7038      	strb	r0, [r7, #0]
 800231c:	f886 a000 	strb.w	sl, [r6]
 8002320:	4658      	mov	r0, fp
 8002322:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002326 <ZbZclAttrRead>:
 8002326:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	4680      	mov	r8, r0
 800232e:	0014      	movs	r4, r2
 8002330:	001d      	movs	r5, r3
 8002332:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8002334:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8002338:	4640      	mov	r0, r8
 800233a:	f7ff fef0 	bl	800211e <ZbZclAttrFind>
 800233e:	0007      	movs	r7, r0
 8002340:	2f00      	cmp	r7, #0
 8002342:	d101      	bne.n	8002348 <ZbZclAttrRead+0x22>
 8002344:	2086      	movs	r0, #134	; 0x86
 8002346:	e03c      	b.n	80023c2 <ZbZclAttrRead+0x9c>
 8002348:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800234c:	2800      	cmp	r0, #0
 800234e:	d005      	beq.n	800235c <ZbZclAttrRead+0x36>
 8002350:	68b8      	ldr	r0, [r7, #8]
 8002352:	7900      	ldrb	r0, [r0, #4]
 8002354:	0780      	lsls	r0, r0, #30
 8002356:	d401      	bmi.n	800235c <ZbZclAttrRead+0x36>
 8002358:	208c      	movs	r0, #140	; 0x8c
 800235a:	e032      	b.n	80023c2 <ZbZclAttrRead+0x9c>
 800235c:	2c00      	cmp	r4, #0
 800235e:	d002      	beq.n	8002366 <ZbZclAttrRead+0x40>
 8002360:	68b8      	ldr	r0, [r7, #8]
 8002362:	7880      	ldrb	r0, [r0, #2]
 8002364:	7020      	strb	r0, [r4, #0]
 8002366:	2d00      	cmp	r5, #0
 8002368:	d001      	beq.n	800236e <ZbZclAttrRead+0x48>
 800236a:	2e00      	cmp	r6, #0
 800236c:	d105      	bne.n	800237a <ZbZclAttrRead+0x54>
 800236e:	2c00      	cmp	r4, #0
 8002370:	d001      	beq.n	8002376 <ZbZclAttrRead+0x50>
 8002372:	2000      	movs	r0, #0
 8002374:	e025      	b.n	80023c2 <ZbZclAttrRead+0x9c>
 8002376:	2089      	movs	r0, #137	; 0x89
 8002378:	e023      	b.n	80023c2 <ZbZclAttrRead+0x9c>
 800237a:	68b8      	ldr	r0, [r7, #8]
 800237c:	7900      	ldrb	r0, [r0, #4]
 800237e:	06c0      	lsls	r0, r0, #27
 8002380:	d519      	bpl.n	80023b6 <ZbZclAttrRead+0x90>
 8002382:	f05f 0920 	movs.w	r9, #32
 8002386:	f05f 0a00 	movs.w	sl, #0
 800238a:	46eb      	mov	fp, sp
 800238c:	4652      	mov	r2, sl
 800238e:	4649      	mov	r1, r9
 8002390:	4658      	mov	r0, fp
 8002392:	f004 f88a 	bl	80064aa <__aeabi_memset>
 8002396:	68b8      	ldr	r0, [r7, #8]
 8002398:	9000      	str	r0, [sp, #0]
 800239a:	2000      	movs	r0, #0
 800239c:	f88d 0004 	strb.w	r0, [sp, #4]
 80023a0:	9502      	str	r5, [sp, #8]
 80023a2:	9603      	str	r6, [sp, #12]
 80023a4:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 80023a8:	9007      	str	r0, [sp, #28]
 80023aa:	466a      	mov	r2, sp
 80023ac:	0039      	movs	r1, r7
 80023ae:	4640      	mov	r0, r8
 80023b0:	f001 fd22 	bl	8003df8 <ZbZclAttrCallbackExec>
 80023b4:	e005      	b.n	80023c2 <ZbZclAttrRead+0x9c>
 80023b6:	0033      	movs	r3, r6
 80023b8:	002a      	movs	r2, r5
 80023ba:	0039      	movs	r1, r7
 80023bc:	4640      	mov	r0, r8
 80023be:	f000 f803 	bl	80023c8 <ZbZclAttrDefaultRead>
 80023c2:	b009      	add	sp, #36	; 0x24
 80023c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023c8 <ZbZclAttrDefaultRead>:
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023cc:	0005      	movs	r5, r0
 80023ce:	000e      	movs	r6, r1
 80023d0:	0017      	movs	r7, r2
 80023d2:	001c      	movs	r4, r3
 80023d4:	f05f 0800 	movs.w	r8, #0
 80023d8:	f05f 0900 	movs.w	r9, #0
 80023dc:	68b0      	ldr	r0, [r6, #8]
 80023de:	7880      	ldrb	r0, [r0, #2]
 80023e0:	2808      	cmp	r0, #8
 80023e2:	d065      	beq.n	80024b0 <ZbZclAttrDefaultRead+0xe8>
 80023e4:	2809      	cmp	r0, #9
 80023e6:	d06b      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 80023e8:	280a      	cmp	r0, #10
 80023ea:	d071      	beq.n	80024d0 <ZbZclAttrDefaultRead+0x108>
 80023ec:	280b      	cmp	r0, #11
 80023ee:	d077      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 80023f0:	280c      	cmp	r0, #12
 80023f2:	d07d      	beq.n	80024f0 <ZbZclAttrDefaultRead+0x128>
 80023f4:	280d      	cmp	r0, #13
 80023f6:	f000 8083 	beq.w	8002500 <ZbZclAttrDefaultRead+0x138>
 80023fa:	280e      	cmp	r0, #14
 80023fc:	f000 8088 	beq.w	8002510 <ZbZclAttrDefaultRead+0x148>
 8002400:	280f      	cmp	r0, #15
 8002402:	f000 808d 	beq.w	8002520 <ZbZclAttrDefaultRead+0x158>
 8002406:	2810      	cmp	r0, #16
 8002408:	d052      	beq.n	80024b0 <ZbZclAttrDefaultRead+0xe8>
 800240a:	2818      	cmp	r0, #24
 800240c:	d050      	beq.n	80024b0 <ZbZclAttrDefaultRead+0xe8>
 800240e:	2819      	cmp	r0, #25
 8002410:	d056      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 8002412:	281a      	cmp	r0, #26
 8002414:	d05c      	beq.n	80024d0 <ZbZclAttrDefaultRead+0x108>
 8002416:	281b      	cmp	r0, #27
 8002418:	d062      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 800241a:	281c      	cmp	r0, #28
 800241c:	d068      	beq.n	80024f0 <ZbZclAttrDefaultRead+0x128>
 800241e:	281d      	cmp	r0, #29
 8002420:	d06e      	beq.n	8002500 <ZbZclAttrDefaultRead+0x138>
 8002422:	281e      	cmp	r0, #30
 8002424:	d074      	beq.n	8002510 <ZbZclAttrDefaultRead+0x148>
 8002426:	281f      	cmp	r0, #31
 8002428:	d07a      	beq.n	8002520 <ZbZclAttrDefaultRead+0x158>
 800242a:	2820      	cmp	r0, #32
 800242c:	d040      	beq.n	80024b0 <ZbZclAttrDefaultRead+0xe8>
 800242e:	2821      	cmp	r0, #33	; 0x21
 8002430:	d046      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 8002432:	2822      	cmp	r0, #34	; 0x22
 8002434:	d04c      	beq.n	80024d0 <ZbZclAttrDefaultRead+0x108>
 8002436:	2823      	cmp	r0, #35	; 0x23
 8002438:	d052      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 800243a:	2824      	cmp	r0, #36	; 0x24
 800243c:	d058      	beq.n	80024f0 <ZbZclAttrDefaultRead+0x128>
 800243e:	2825      	cmp	r0, #37	; 0x25
 8002440:	d05e      	beq.n	8002500 <ZbZclAttrDefaultRead+0x138>
 8002442:	2826      	cmp	r0, #38	; 0x26
 8002444:	d064      	beq.n	8002510 <ZbZclAttrDefaultRead+0x148>
 8002446:	2827      	cmp	r0, #39	; 0x27
 8002448:	d06a      	beq.n	8002520 <ZbZclAttrDefaultRead+0x158>
 800244a:	2828      	cmp	r0, #40	; 0x28
 800244c:	d030      	beq.n	80024b0 <ZbZclAttrDefaultRead+0xe8>
 800244e:	2829      	cmp	r0, #41	; 0x29
 8002450:	d036      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 8002452:	282a      	cmp	r0, #42	; 0x2a
 8002454:	d03c      	beq.n	80024d0 <ZbZclAttrDefaultRead+0x108>
 8002456:	282b      	cmp	r0, #43	; 0x2b
 8002458:	d042      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 800245a:	282c      	cmp	r0, #44	; 0x2c
 800245c:	d048      	beq.n	80024f0 <ZbZclAttrDefaultRead+0x128>
 800245e:	282d      	cmp	r0, #45	; 0x2d
 8002460:	d04e      	beq.n	8002500 <ZbZclAttrDefaultRead+0x138>
 8002462:	282e      	cmp	r0, #46	; 0x2e
 8002464:	d054      	beq.n	8002510 <ZbZclAttrDefaultRead+0x148>
 8002466:	282f      	cmp	r0, #47	; 0x2f
 8002468:	d05a      	beq.n	8002520 <ZbZclAttrDefaultRead+0x158>
 800246a:	2830      	cmp	r0, #48	; 0x30
 800246c:	d020      	beq.n	80024b0 <ZbZclAttrDefaultRead+0xe8>
 800246e:	2831      	cmp	r0, #49	; 0x31
 8002470:	d026      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 8002472:	2838      	cmp	r0, #56	; 0x38
 8002474:	d024      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 8002476:	2839      	cmp	r0, #57	; 0x39
 8002478:	d032      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 800247a:	283a      	cmp	r0, #58	; 0x3a
 800247c:	d050      	beq.n	8002520 <ZbZclAttrDefaultRead+0x158>
 800247e:	2841      	cmp	r0, #65	; 0x41
 8002480:	d05e      	beq.n	8002540 <ZbZclAttrDefaultRead+0x178>
 8002482:	2842      	cmp	r0, #66	; 0x42
 8002484:	d05c      	beq.n	8002540 <ZbZclAttrDefaultRead+0x178>
 8002486:	2843      	cmp	r0, #67	; 0x43
 8002488:	d071      	beq.n	800256e <ZbZclAttrDefaultRead+0x1a6>
 800248a:	2844      	cmp	r0, #68	; 0x44
 800248c:	d06f      	beq.n	800256e <ZbZclAttrDefaultRead+0x1a6>
 800248e:	28e0      	cmp	r0, #224	; 0xe0
 8002490:	d026      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 8002492:	28e1      	cmp	r0, #225	; 0xe1
 8002494:	d024      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 8002496:	28e2      	cmp	r0, #226	; 0xe2
 8002498:	d022      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 800249a:	28e8      	cmp	r0, #232	; 0xe8
 800249c:	d010      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 800249e:	28e9      	cmp	r0, #233	; 0xe9
 80024a0:	d00e      	beq.n	80024c0 <ZbZclAttrDefaultRead+0xf8>
 80024a2:	28ea      	cmp	r0, #234	; 0xea
 80024a4:	d01c      	beq.n	80024e0 <ZbZclAttrDefaultRead+0x118>
 80024a6:	28f0      	cmp	r0, #240	; 0xf0
 80024a8:	d03a      	beq.n	8002520 <ZbZclAttrDefaultRead+0x158>
 80024aa:	28f1      	cmp	r0, #241	; 0xf1
 80024ac:	d040      	beq.n	8002530 <ZbZclAttrDefaultRead+0x168>
 80024ae:	e078      	b.n	80025a2 <ZbZclAttrDefaultRead+0x1da>
 80024b0:	2c00      	cmp	r4, #0
 80024b2:	d102      	bne.n	80024ba <ZbZclAttrDefaultRead+0xf2>
 80024b4:	2089      	movs	r0, #137	; 0x89
 80024b6:	4681      	mov	r9, r0
 80024b8:	e075      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024ba:	2001      	movs	r0, #1
 80024bc:	4680      	mov	r8, r0
 80024be:	e072      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024c0:	2c02      	cmp	r4, #2
 80024c2:	d202      	bcs.n	80024ca <ZbZclAttrDefaultRead+0x102>
 80024c4:	2089      	movs	r0, #137	; 0x89
 80024c6:	4681      	mov	r9, r0
 80024c8:	e06d      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024ca:	2002      	movs	r0, #2
 80024cc:	4680      	mov	r8, r0
 80024ce:	e06a      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024d0:	2c03      	cmp	r4, #3
 80024d2:	d202      	bcs.n	80024da <ZbZclAttrDefaultRead+0x112>
 80024d4:	2089      	movs	r0, #137	; 0x89
 80024d6:	4681      	mov	r9, r0
 80024d8:	e065      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024da:	2003      	movs	r0, #3
 80024dc:	4680      	mov	r8, r0
 80024de:	e062      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024e0:	2c04      	cmp	r4, #4
 80024e2:	d202      	bcs.n	80024ea <ZbZclAttrDefaultRead+0x122>
 80024e4:	2089      	movs	r0, #137	; 0x89
 80024e6:	4681      	mov	r9, r0
 80024e8:	e05d      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024ea:	2004      	movs	r0, #4
 80024ec:	4680      	mov	r8, r0
 80024ee:	e05a      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024f0:	2c05      	cmp	r4, #5
 80024f2:	d202      	bcs.n	80024fa <ZbZclAttrDefaultRead+0x132>
 80024f4:	2089      	movs	r0, #137	; 0x89
 80024f6:	4681      	mov	r9, r0
 80024f8:	e055      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80024fa:	2005      	movs	r0, #5
 80024fc:	4680      	mov	r8, r0
 80024fe:	e052      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 8002500:	2c06      	cmp	r4, #6
 8002502:	d202      	bcs.n	800250a <ZbZclAttrDefaultRead+0x142>
 8002504:	2089      	movs	r0, #137	; 0x89
 8002506:	4681      	mov	r9, r0
 8002508:	e04d      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800250a:	2006      	movs	r0, #6
 800250c:	4680      	mov	r8, r0
 800250e:	e04a      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 8002510:	2c07      	cmp	r4, #7
 8002512:	d202      	bcs.n	800251a <ZbZclAttrDefaultRead+0x152>
 8002514:	2089      	movs	r0, #137	; 0x89
 8002516:	4681      	mov	r9, r0
 8002518:	e045      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800251a:	2007      	movs	r0, #7
 800251c:	4680      	mov	r8, r0
 800251e:	e042      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 8002520:	2c08      	cmp	r4, #8
 8002522:	d202      	bcs.n	800252a <ZbZclAttrDefaultRead+0x162>
 8002524:	2089      	movs	r0, #137	; 0x89
 8002526:	4681      	mov	r9, r0
 8002528:	e03d      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800252a:	2008      	movs	r0, #8
 800252c:	4680      	mov	r8, r0
 800252e:	e03a      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 8002530:	2c10      	cmp	r4, #16
 8002532:	d202      	bcs.n	800253a <ZbZclAttrDefaultRead+0x172>
 8002534:	2089      	movs	r0, #137	; 0x89
 8002536:	4681      	mov	r9, r0
 8002538:	e035      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800253a:	2010      	movs	r0, #16
 800253c:	4680      	mov	r8, r0
 800253e:	e032      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 8002540:	2c00      	cmp	r4, #0
 8002542:	d102      	bne.n	800254a <ZbZclAttrDefaultRead+0x182>
 8002544:	2089      	movs	r0, #137	; 0x89
 8002546:	4681      	mov	r9, r0
 8002548:	e02d      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800254a:	68f0      	ldr	r0, [r6, #12]
 800254c:	7800      	ldrb	r0, [r0, #0]
 800254e:	0001      	movs	r1, r0
 8002550:	b2c9      	uxtb	r1, r1
 8002552:	29ff      	cmp	r1, #255	; 0xff
 8002554:	d101      	bne.n	800255a <ZbZclAttrDefaultRead+0x192>
 8002556:	2100      	movs	r1, #0
 8002558:	0008      	movs	r0, r1
 800255a:	0001      	movs	r1, r0
 800255c:	b2c9      	uxtb	r1, r1
 800255e:	1c49      	adds	r1, r1, #1
 8002560:	4688      	mov	r8, r1
 8002562:	4544      	cmp	r4, r8
 8002564:	d202      	bcs.n	800256c <ZbZclAttrDefaultRead+0x1a4>
 8002566:	2189      	movs	r1, #137	; 0x89
 8002568:	4689      	mov	r9, r1
 800256a:	e01c      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800256c:	e01b      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 800256e:	2c00      	cmp	r4, #0
 8002570:	d102      	bne.n	8002578 <ZbZclAttrDefaultRead+0x1b0>
 8002572:	2089      	movs	r0, #137	; 0x89
 8002574:	4681      	mov	r9, r0
 8002576:	e016      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 8002578:	68f0      	ldr	r0, [r6, #12]
 800257a:	f7ff fd01 	bl	8001f80 <pletoh16>
 800257e:	0001      	movs	r1, r0
 8002580:	b289      	uxth	r1, r1
 8002582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002586:	4291      	cmp	r1, r2
 8002588:	d101      	bne.n	800258e <ZbZclAttrDefaultRead+0x1c6>
 800258a:	2100      	movs	r1, #0
 800258c:	0008      	movs	r0, r1
 800258e:	0001      	movs	r1, r0
 8002590:	b289      	uxth	r1, r1
 8002592:	1c89      	adds	r1, r1, #2
 8002594:	4688      	mov	r8, r1
 8002596:	4544      	cmp	r4, r8
 8002598:	d202      	bcs.n	80025a0 <ZbZclAttrDefaultRead+0x1d8>
 800259a:	2189      	movs	r1, #137	; 0x89
 800259c:	4689      	mov	r9, r1
 800259e:	e002      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80025a0:	e001      	b.n	80025a6 <ZbZclAttrDefaultRead+0x1de>
 80025a2:	2086      	movs	r0, #134	; 0x86
 80025a4:	4681      	mov	r9, r0
 80025a6:	4648      	mov	r0, r9
 80025a8:	b2c0      	uxtb	r0, r0
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d106      	bne.n	80025bc <ZbZclAttrDefaultRead+0x1f4>
 80025ae:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80025b2:	4642      	mov	r2, r8
 80025b4:	4651      	mov	r1, sl
 80025b6:	0038      	movs	r0, r7
 80025b8:	f00d fb1e 	bl	800fbf8 <__aeabi_memcpy>
 80025bc:	4648      	mov	r0, r9
 80025be:	b2c0      	uxtb	r0, r0
 80025c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080025c4 <ZbZclAttrWrite>:
 80025c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c8:	b096      	sub	sp, #88	; 0x58
 80025ca:	4680      	mov	r8, r0
 80025cc:	4699      	mov	r9, r3
 80025ce:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80025d2:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80025d4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80025d8:	4640      	mov	r0, r8
 80025da:	f7ff fda0 	bl	800211e <ZbZclAttrFind>
 80025de:	0006      	movs	r6, r0
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d101      	bne.n	80025e8 <ZbZclAttrWrite+0x24>
 80025e4:	2086      	movs	r0, #134	; 0x86
 80025e6:	e0a2      	b.n	800272e <ZbZclAttrWrite+0x16a>
 80025e8:	68b0      	ldr	r0, [r6, #8]
 80025ea:	7900      	ldrb	r0, [r0, #4]
 80025ec:	f010 0001 	ands.w	r0, r0, #1
 80025f0:	b2c0      	uxtb	r0, r0
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d105      	bne.n	8002602 <ZbZclAttrWrite+0x3e>
 80025f6:	0038      	movs	r0, r7
 80025f8:	b280      	uxth	r0, r0
 80025fa:	0780      	lsls	r0, r0, #30
 80025fc:	d401      	bmi.n	8002602 <ZbZclAttrWrite+0x3e>
 80025fe:	2088      	movs	r0, #136	; 0x88
 8002600:	e095      	b.n	800272e <ZbZclAttrWrite+0x16a>
 8002602:	2300      	movs	r3, #0
 8002604:	4652      	mov	r2, sl
 8002606:	4649      	mov	r1, r9
 8002608:	68b0      	ldr	r0, [r6, #8]
 800260a:	7880      	ldrb	r0, [r0, #2]
 800260c:	f000 fcaf 	bl	8002f6e <ZbZclAttrParseLength>
 8002610:	9005      	str	r0, [sp, #20]
 8002612:	9805      	ldr	r0, [sp, #20]
 8002614:	2800      	cmp	r0, #0
 8002616:	d501      	bpl.n	800261c <ZbZclAttrWrite+0x58>
 8002618:	2087      	movs	r0, #135	; 0x87
 800261a:	e088      	b.n	800272e <ZbZclAttrWrite+0x16a>
 800261c:	68b0      	ldr	r0, [r6, #8]
 800261e:	7880      	ldrb	r0, [r0, #2]
 8002620:	f000 ff99 	bl	8003556 <ZbZclAttrIsInteger>
 8002624:	2800      	cmp	r0, #0
 8002626:	d026      	beq.n	8002676 <ZbZclAttrWrite+0xb2>
 8002628:	aa04      	add	r2, sp, #16
 800262a:	4649      	mov	r1, r9
 800262c:	68b0      	ldr	r0, [r6, #8]
 800262e:	7880      	ldrb	r0, [r0, #2]
 8002630:	f000 fe63 	bl	80032fa <ZbZclParseInteger>
 8002634:	0004      	movs	r4, r0
 8002636:	000d      	movs	r5, r1
 8002638:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800263c:	2800      	cmp	r0, #0
 800263e:	d002      	beq.n	8002646 <ZbZclAttrWrite+0x82>
 8002640:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002644:	e073      	b.n	800272e <ZbZclAttrWrite+0x16a>
 8002646:	68b0      	ldr	r0, [r6, #8]
 8002648:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 800264c:	f004 fc9a 	bl	8006f84 <__aeabi_d2lz>
 8002650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002654:	68b0      	ldr	r0, [r6, #8]
 8002656:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800265a:	f004 fc93 	bl	8006f84 <__aeabi_d2lz>
 800265e:	e9cd 0100 	strd	r0, r1, [sp]
 8002662:	68b0      	ldr	r0, [r6, #8]
 8002664:	7882      	ldrb	r2, [r0, #2]
 8002666:	0020      	movs	r0, r4
 8002668:	0029      	movs	r1, r5
 800266a:	f000 ff8a 	bl	8003582 <ZbZclAttrIntegerRangeCheck>
 800266e:	2800      	cmp	r0, #0
 8002670:	d101      	bne.n	8002676 <ZbZclAttrWrite+0xb2>
 8002672:	2087      	movs	r0, #135	; 0x87
 8002674:	e05b      	b.n	800272e <ZbZclAttrWrite+0x16a>
 8002676:	68b0      	ldr	r0, [r6, #8]
 8002678:	7900      	ldrb	r0, [r0, #4]
 800267a:	0680      	lsls	r0, r0, #26
 800267c:	d522      	bpl.n	80026c4 <ZbZclAttrWrite+0x100>
 800267e:	2420      	movs	r4, #32
 8002680:	2500      	movs	r5, #0
 8002682:	f10d 0b18 	add.w	fp, sp, #24
 8002686:	002a      	movs	r2, r5
 8002688:	0021      	movs	r1, r4
 800268a:	4658      	mov	r0, fp
 800268c:	f003 ff0d 	bl	80064aa <__aeabi_memset>
 8002690:	68b0      	ldr	r0, [r6, #8]
 8002692:	9006      	str	r0, [sp, #24]
 8002694:	2001      	movs	r0, #1
 8002696:	f88d 001c 	strb.w	r0, [sp, #28]
 800269a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800269c:	900c      	str	r0, [sp, #48]	; 0x30
 800269e:	f8cd 9020 	str.w	r9, [sp, #32]
 80026a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80026a6:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 80026aa:	68f0      	ldr	r0, [r6, #12]
 80026ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80026ae:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 80026b2:	900d      	str	r0, [sp, #52]	; 0x34
 80026b4:	aa06      	add	r2, sp, #24
 80026b6:	0031      	movs	r1, r6
 80026b8:	4640      	mov	r0, r8
 80026ba:	f001 fb9d 	bl	8003df8 <ZbZclAttrCallbackExec>
 80026be:	f88d 0010 	strb.w	r0, [sp, #16]
 80026c2:	e028      	b.n	8002716 <ZbZclAttrWrite+0x152>
 80026c4:	003b      	movs	r3, r7
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	464a      	mov	r2, r9
 80026ca:	0031      	movs	r1, r6
 80026cc:	4640      	mov	r0, r8
 80026ce:	f000 f85e 	bl	800278e <ZbZclAttrDefaultWrite>
 80026d2:	f88d 0010 	strb.w	r0, [sp, #16]
 80026d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80026da:	2800      	cmp	r0, #0
 80026dc:	d11b      	bne.n	8002716 <ZbZclAttrWrite+0x152>
 80026de:	68b0      	ldr	r0, [r6, #8]
 80026e0:	7900      	ldrb	r0, [r0, #4]
 80026e2:	0640      	lsls	r0, r0, #25
 80026e4:	d517      	bpl.n	8002716 <ZbZclAttrWrite+0x152>
 80026e6:	2420      	movs	r4, #32
 80026e8:	2500      	movs	r5, #0
 80026ea:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 80026ee:	002a      	movs	r2, r5
 80026f0:	0021      	movs	r1, r4
 80026f2:	4658      	mov	r0, fp
 80026f4:	f003 fed9 	bl	80064aa <__aeabi_memset>
 80026f8:	68b0      	ldr	r0, [r6, #8]
 80026fa:	900e      	str	r0, [sp, #56]	; 0x38
 80026fc:	2002      	movs	r0, #2
 80026fe:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 8002702:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002704:	9014      	str	r0, [sp, #80]	; 0x50
 8002706:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 800270a:	9015      	str	r0, [sp, #84]	; 0x54
 800270c:	aa0e      	add	r2, sp, #56	; 0x38
 800270e:	0031      	movs	r1, r6
 8002710:	4640      	mov	r0, r8
 8002712:	f001 fb71 	bl	8003df8 <ZbZclAttrCallbackExec>
 8002716:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800271a:	2800      	cmp	r0, #0
 800271c:	d002      	beq.n	8002724 <ZbZclAttrWrite+0x160>
 800271e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002722:	e004      	b.n	800272e <ZbZclAttrWrite+0x16a>
 8002724:	0031      	movs	r1, r6
 8002726:	4640      	mov	r0, r8
 8002728:	f000 f804 	bl	8002734 <ZbZclAttrPostWrite>
 800272c:	2000      	movs	r0, #0
 800272e:	b019      	add	sp, #100	; 0x64
 8002730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002734 <ZbZclAttrPostWrite>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	0005      	movs	r5, r0
 8002738:	000c      	movs	r4, r1
 800273a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800273c:	2800      	cmp	r0, #0
 800273e:	d004      	beq.n	800274a <ZbZclAttrPostWrite+0x16>
 8002740:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002744:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8002746:	f00a fa61 	bl	800cc0c <ZbTimerReset>
 800274a:	2c00      	cmp	r4, #0
 800274c:	d005      	beq.n	800275a <ZbZclAttrPostWrite+0x26>
 800274e:	2200      	movs	r2, #0
 8002750:	68a0      	ldr	r0, [r4, #8]
 8002752:	8801      	ldrh	r1, [r0, #0]
 8002754:	0028      	movs	r0, r5
 8002756:	f002 f807 	bl	8004768 <zcl_attr_reporting_check>
 800275a:	bd31      	pop	{r0, r4, r5, pc}

0800275c <ZbZclAttrPersist>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	0005      	movs	r5, r0
 8002760:	000e      	movs	r6, r1
 8002762:	0031      	movs	r1, r6
 8002764:	b289      	uxth	r1, r1
 8002766:	0028      	movs	r0, r5
 8002768:	f7ff fcd9 	bl	800211e <ZbZclAttrFind>
 800276c:	0004      	movs	r4, r0
 800276e:	2c00      	cmp	r4, #0
 8002770:	d101      	bne.n	8002776 <ZbZclAttrPersist+0x1a>
 8002772:	2000      	movs	r0, #0
 8002774:	e00a      	b.n	800278c <ZbZclAttrPersist+0x30>
 8002776:	68a0      	ldr	r0, [r4, #8]
 8002778:	7900      	ldrb	r0, [r0, #4]
 800277a:	0740      	lsls	r0, r0, #29
 800277c:	d401      	bmi.n	8002782 <ZbZclAttrPersist+0x26>
 800277e:	2000      	movs	r0, #0
 8002780:	e004      	b.n	800278c <ZbZclAttrPersist+0x30>
 8002782:	0021      	movs	r1, r4
 8002784:	0028      	movs	r0, r5
 8002786:	f7ff ffd5 	bl	8002734 <ZbZclAttrPostWrite>
 800278a:	2001      	movs	r0, #1
 800278c:	bd70      	pop	{r4, r5, r6, pc}

0800278e <ZbZclAttrDefaultWrite>:
 800278e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002792:	0006      	movs	r6, r0
 8002794:	000f      	movs	r7, r1
 8002796:	0014      	movs	r4, r2
 8002798:	4698      	mov	r8, r3
 800279a:	2500      	movs	r5, #0
 800279c:	f05f 0900 	movs.w	r9, #0
 80027a0:	2c00      	cmp	r4, #0
 80027a2:	d101      	bne.n	80027a8 <ZbZclAttrDefaultWrite+0x1a>
 80027a4:	2001      	movs	r0, #1
 80027a6:	e0d5      	b.n	8002954 <ZbZclAttrDefaultWrite+0x1c6>
 80027a8:	68b8      	ldr	r0, [r7, #8]
 80027aa:	7880      	ldrb	r0, [r0, #2]
 80027ac:	2808      	cmp	r0, #8
 80027ae:	d062      	beq.n	8002876 <ZbZclAttrDefaultWrite+0xe8>
 80027b0:	2809      	cmp	r0, #9
 80027b2:	d063      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 80027b4:	280a      	cmp	r0, #10
 80027b6:	d064      	beq.n	8002882 <ZbZclAttrDefaultWrite+0xf4>
 80027b8:	280b      	cmp	r0, #11
 80027ba:	d065      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 80027bc:	280c      	cmp	r0, #12
 80027be:	d066      	beq.n	800288e <ZbZclAttrDefaultWrite+0x100>
 80027c0:	280d      	cmp	r0, #13
 80027c2:	d067      	beq.n	8002894 <ZbZclAttrDefaultWrite+0x106>
 80027c4:	280e      	cmp	r0, #14
 80027c6:	d068      	beq.n	800289a <ZbZclAttrDefaultWrite+0x10c>
 80027c8:	280f      	cmp	r0, #15
 80027ca:	d069      	beq.n	80028a0 <ZbZclAttrDefaultWrite+0x112>
 80027cc:	2810      	cmp	r0, #16
 80027ce:	d052      	beq.n	8002876 <ZbZclAttrDefaultWrite+0xe8>
 80027d0:	2818      	cmp	r0, #24
 80027d2:	d050      	beq.n	8002876 <ZbZclAttrDefaultWrite+0xe8>
 80027d4:	2819      	cmp	r0, #25
 80027d6:	d051      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 80027d8:	281a      	cmp	r0, #26
 80027da:	d052      	beq.n	8002882 <ZbZclAttrDefaultWrite+0xf4>
 80027dc:	281b      	cmp	r0, #27
 80027de:	d053      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 80027e0:	281c      	cmp	r0, #28
 80027e2:	d054      	beq.n	800288e <ZbZclAttrDefaultWrite+0x100>
 80027e4:	281d      	cmp	r0, #29
 80027e6:	d055      	beq.n	8002894 <ZbZclAttrDefaultWrite+0x106>
 80027e8:	281e      	cmp	r0, #30
 80027ea:	d056      	beq.n	800289a <ZbZclAttrDefaultWrite+0x10c>
 80027ec:	281f      	cmp	r0, #31
 80027ee:	d057      	beq.n	80028a0 <ZbZclAttrDefaultWrite+0x112>
 80027f0:	2820      	cmp	r0, #32
 80027f2:	d040      	beq.n	8002876 <ZbZclAttrDefaultWrite+0xe8>
 80027f4:	2821      	cmp	r0, #33	; 0x21
 80027f6:	d041      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 80027f8:	2822      	cmp	r0, #34	; 0x22
 80027fa:	d042      	beq.n	8002882 <ZbZclAttrDefaultWrite+0xf4>
 80027fc:	2823      	cmp	r0, #35	; 0x23
 80027fe:	d043      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 8002800:	2824      	cmp	r0, #36	; 0x24
 8002802:	d044      	beq.n	800288e <ZbZclAttrDefaultWrite+0x100>
 8002804:	2825      	cmp	r0, #37	; 0x25
 8002806:	d045      	beq.n	8002894 <ZbZclAttrDefaultWrite+0x106>
 8002808:	2826      	cmp	r0, #38	; 0x26
 800280a:	d046      	beq.n	800289a <ZbZclAttrDefaultWrite+0x10c>
 800280c:	2827      	cmp	r0, #39	; 0x27
 800280e:	d047      	beq.n	80028a0 <ZbZclAttrDefaultWrite+0x112>
 8002810:	2828      	cmp	r0, #40	; 0x28
 8002812:	d030      	beq.n	8002876 <ZbZclAttrDefaultWrite+0xe8>
 8002814:	2829      	cmp	r0, #41	; 0x29
 8002816:	d031      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 8002818:	282a      	cmp	r0, #42	; 0x2a
 800281a:	d032      	beq.n	8002882 <ZbZclAttrDefaultWrite+0xf4>
 800281c:	282b      	cmp	r0, #43	; 0x2b
 800281e:	d033      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 8002820:	282c      	cmp	r0, #44	; 0x2c
 8002822:	d034      	beq.n	800288e <ZbZclAttrDefaultWrite+0x100>
 8002824:	282d      	cmp	r0, #45	; 0x2d
 8002826:	d035      	beq.n	8002894 <ZbZclAttrDefaultWrite+0x106>
 8002828:	282e      	cmp	r0, #46	; 0x2e
 800282a:	d036      	beq.n	800289a <ZbZclAttrDefaultWrite+0x10c>
 800282c:	282f      	cmp	r0, #47	; 0x2f
 800282e:	d037      	beq.n	80028a0 <ZbZclAttrDefaultWrite+0x112>
 8002830:	2830      	cmp	r0, #48	; 0x30
 8002832:	d020      	beq.n	8002876 <ZbZclAttrDefaultWrite+0xe8>
 8002834:	2831      	cmp	r0, #49	; 0x31
 8002836:	d021      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 8002838:	2838      	cmp	r0, #56	; 0x38
 800283a:	d01f      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 800283c:	2839      	cmp	r0, #57	; 0x39
 800283e:	d023      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 8002840:	283a      	cmp	r0, #58	; 0x3a
 8002842:	d02d      	beq.n	80028a0 <ZbZclAttrDefaultWrite+0x112>
 8002844:	2841      	cmp	r0, #65	; 0x41
 8002846:	d031      	beq.n	80028ac <ZbZclAttrDefaultWrite+0x11e>
 8002848:	2842      	cmp	r0, #66	; 0x42
 800284a:	d02f      	beq.n	80028ac <ZbZclAttrDefaultWrite+0x11e>
 800284c:	2843      	cmp	r0, #67	; 0x43
 800284e:	d049      	beq.n	80028e4 <ZbZclAttrDefaultWrite+0x156>
 8002850:	2844      	cmp	r0, #68	; 0x44
 8002852:	d047      	beq.n	80028e4 <ZbZclAttrDefaultWrite+0x156>
 8002854:	28e0      	cmp	r0, #224	; 0xe0
 8002856:	d017      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 8002858:	28e1      	cmp	r0, #225	; 0xe1
 800285a:	d015      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 800285c:	28e2      	cmp	r0, #226	; 0xe2
 800285e:	d013      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 8002860:	28e8      	cmp	r0, #232	; 0xe8
 8002862:	d00b      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 8002864:	28e9      	cmp	r0, #233	; 0xe9
 8002866:	d009      	beq.n	800287c <ZbZclAttrDefaultWrite+0xee>
 8002868:	28ea      	cmp	r0, #234	; 0xea
 800286a:	d00d      	beq.n	8002888 <ZbZclAttrDefaultWrite+0xfa>
 800286c:	28f0      	cmp	r0, #240	; 0xf0
 800286e:	d017      	beq.n	80028a0 <ZbZclAttrDefaultWrite+0x112>
 8002870:	28f1      	cmp	r0, #241	; 0xf1
 8002872:	d018      	beq.n	80028a6 <ZbZclAttrDefaultWrite+0x118>
 8002874:	e059      	b.n	800292a <ZbZclAttrDefaultWrite+0x19c>
 8002876:	2001      	movs	r0, #1
 8002878:	0005      	movs	r5, r0
 800287a:	e058      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 800287c:	2002      	movs	r0, #2
 800287e:	0005      	movs	r5, r0
 8002880:	e055      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 8002882:	2003      	movs	r0, #3
 8002884:	0005      	movs	r5, r0
 8002886:	e052      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 8002888:	2004      	movs	r0, #4
 800288a:	0005      	movs	r5, r0
 800288c:	e04f      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 800288e:	2005      	movs	r0, #5
 8002890:	0005      	movs	r5, r0
 8002892:	e04c      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 8002894:	2006      	movs	r0, #6
 8002896:	0005      	movs	r5, r0
 8002898:	e049      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 800289a:	2007      	movs	r0, #7
 800289c:	0005      	movs	r5, r0
 800289e:	e046      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028a0:	2008      	movs	r0, #8
 80028a2:	0005      	movs	r5, r0
 80028a4:	e043      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028a6:	2010      	movs	r0, #16
 80028a8:	0005      	movs	r5, r0
 80028aa:	e040      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028ac:	6938      	ldr	r0, [r7, #16]
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d102      	bne.n	80028b8 <ZbZclAttrDefaultWrite+0x12a>
 80028b2:	2089      	movs	r0, #137	; 0x89
 80028b4:	4681      	mov	r9, r0
 80028b6:	e03a      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028b8:	7820      	ldrb	r0, [r4, #0]
 80028ba:	0001      	movs	r1, r0
 80028bc:	b2c9      	uxtb	r1, r1
 80028be:	29ff      	cmp	r1, #255	; 0xff
 80028c0:	d105      	bne.n	80028ce <ZbZclAttrDefaultWrite+0x140>
 80028c2:	21ff      	movs	r1, #255	; 0xff
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	7011      	strb	r1, [r2, #0]
 80028c8:	2100      	movs	r1, #0
 80028ca:	000d      	movs	r5, r1
 80028cc:	e02f      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028ce:	0001      	movs	r1, r0
 80028d0:	b2c9      	uxtb	r1, r1
 80028d2:	1c49      	adds	r1, r1, #1
 80028d4:	000d      	movs	r5, r1
 80028d6:	6939      	ldr	r1, [r7, #16]
 80028d8:	42a9      	cmp	r1, r5
 80028da:	d202      	bcs.n	80028e2 <ZbZclAttrDefaultWrite+0x154>
 80028dc:	2189      	movs	r1, #137	; 0x89
 80028de:	4689      	mov	r9, r1
 80028e0:	e025      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028e2:	e024      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028e4:	6938      	ldr	r0, [r7, #16]
 80028e6:	2802      	cmp	r0, #2
 80028e8:	d202      	bcs.n	80028f0 <ZbZclAttrDefaultWrite+0x162>
 80028ea:	2089      	movs	r0, #137	; 0x89
 80028ec:	4681      	mov	r9, r0
 80028ee:	e01e      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 80028f0:	0020      	movs	r0, r4
 80028f2:	f7ff fb45 	bl	8001f80 <pletoh16>
 80028f6:	4682      	mov	sl, r0
 80028f8:	4650      	mov	r0, sl
 80028fa:	b280      	uxth	r0, r0
 80028fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002900:	4288      	cmp	r0, r1
 8002902:	d107      	bne.n	8002914 <ZbZclAttrDefaultWrite+0x186>
 8002904:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fb85 	bl	8002018 <putle16>
 800290e:	2000      	movs	r0, #0
 8002910:	0005      	movs	r5, r0
 8002912:	e00c      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 8002914:	4650      	mov	r0, sl
 8002916:	b280      	uxth	r0, r0
 8002918:	1c80      	adds	r0, r0, #2
 800291a:	0005      	movs	r5, r0
 800291c:	6938      	ldr	r0, [r7, #16]
 800291e:	42a8      	cmp	r0, r5
 8002920:	d202      	bcs.n	8002928 <ZbZclAttrDefaultWrite+0x19a>
 8002922:	2089      	movs	r0, #137	; 0x89
 8002924:	4681      	mov	r9, r0
 8002926:	e002      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 8002928:	e001      	b.n	800292e <ZbZclAttrDefaultWrite+0x1a0>
 800292a:	2086      	movs	r0, #134	; 0x86
 800292c:	4681      	mov	r9, r0
 800292e:	4648      	mov	r0, r9
 8002930:	b2c0      	uxtb	r0, r0
 8002932:	2800      	cmp	r0, #0
 8002934:	d10c      	bne.n	8002950 <ZbZclAttrDefaultWrite+0x1c2>
 8002936:	4640      	mov	r0, r8
 8002938:	b280      	uxth	r0, r0
 800293a:	07c0      	lsls	r0, r0, #31
 800293c:	d408      	bmi.n	8002950 <ZbZclAttrDefaultWrite+0x1c2>
 800293e:	2d00      	cmp	r5, #0
 8002940:	d006      	beq.n	8002950 <ZbZclAttrDefaultWrite+0x1c2>
 8002942:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8002946:	002a      	movs	r2, r5
 8002948:	0021      	movs	r1, r4
 800294a:	4650      	mov	r0, sl
 800294c:	f00d f954 	bl	800fbf8 <__aeabi_memcpy>
 8002950:	4648      	mov	r0, r9
 8002952:	b2c0      	uxtb	r0, r0
 8002954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002958 <ZbZclAttrDefaultValue>:
 8002958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	0004      	movs	r4, r0
 800295e:	4688      	mov	r8, r1
 8002960:	0015      	movs	r5, r2
 8002962:	2600      	movs	r6, #0
 8002964:	f05f 37ff 	movs.w	r7, #4294967295
 8002968:	0020      	movs	r0, r4
 800296a:	b2c0      	uxtb	r0, r0
 800296c:	2800      	cmp	r0, #0
 800296e:	f000 80a1 	beq.w	8002ab4 <ZbZclAttrDefaultValue+0x15c>
 8002972:	2808      	cmp	r0, #8
 8002974:	f000 80e7 	beq.w	8002b46 <ZbZclAttrDefaultValue+0x1ee>
 8002978:	2809      	cmp	r0, #9
 800297a:	f000 80da 	beq.w	8002b32 <ZbZclAttrDefaultValue+0x1da>
 800297e:	280a      	cmp	r0, #10
 8002980:	f000 80cd 	beq.w	8002b1e <ZbZclAttrDefaultValue+0x1c6>
 8002984:	280b      	cmp	r0, #11
 8002986:	f000 80c0 	beq.w	8002b0a <ZbZclAttrDefaultValue+0x1b2>
 800298a:	280c      	cmp	r0, #12
 800298c:	f000 80b3 	beq.w	8002af6 <ZbZclAttrDefaultValue+0x19e>
 8002990:	280d      	cmp	r0, #13
 8002992:	f000 80a6 	beq.w	8002ae2 <ZbZclAttrDefaultValue+0x18a>
 8002996:	280e      	cmp	r0, #14
 8002998:	f000 8099 	beq.w	8002ace <ZbZclAttrDefaultValue+0x176>
 800299c:	280f      	cmp	r0, #15
 800299e:	f000 808c 	beq.w	8002aba <ZbZclAttrDefaultValue+0x162>
 80029a2:	2810      	cmp	r0, #16
 80029a4:	f000 80db 	beq.w	8002b5e <ZbZclAttrDefaultValue+0x206>
 80029a8:	2818      	cmp	r0, #24
 80029aa:	f000 8126 	beq.w	8002bfa <ZbZclAttrDefaultValue+0x2a2>
 80029ae:	2819      	cmp	r0, #25
 80029b0:	f000 8119 	beq.w	8002be6 <ZbZclAttrDefaultValue+0x28e>
 80029b4:	281a      	cmp	r0, #26
 80029b6:	f000 810c 	beq.w	8002bd2 <ZbZclAttrDefaultValue+0x27a>
 80029ba:	281b      	cmp	r0, #27
 80029bc:	f000 80ff 	beq.w	8002bbe <ZbZclAttrDefaultValue+0x266>
 80029c0:	281c      	cmp	r0, #28
 80029c2:	f000 80f2 	beq.w	8002baa <ZbZclAttrDefaultValue+0x252>
 80029c6:	281d      	cmp	r0, #29
 80029c8:	f000 80e5 	beq.w	8002b96 <ZbZclAttrDefaultValue+0x23e>
 80029cc:	281e      	cmp	r0, #30
 80029ce:	f000 80d8 	beq.w	8002b82 <ZbZclAttrDefaultValue+0x22a>
 80029d2:	281f      	cmp	r0, #31
 80029d4:	f000 80cb 	beq.w	8002b6e <ZbZclAttrDefaultValue+0x216>
 80029d8:	2820      	cmp	r0, #32
 80029da:	f000 80b4 	beq.w	8002b46 <ZbZclAttrDefaultValue+0x1ee>
 80029de:	2821      	cmp	r0, #33	; 0x21
 80029e0:	f000 80a7 	beq.w	8002b32 <ZbZclAttrDefaultValue+0x1da>
 80029e4:	2822      	cmp	r0, #34	; 0x22
 80029e6:	f000 809a 	beq.w	8002b1e <ZbZclAttrDefaultValue+0x1c6>
 80029ea:	2823      	cmp	r0, #35	; 0x23
 80029ec:	f000 808d 	beq.w	8002b0a <ZbZclAttrDefaultValue+0x1b2>
 80029f0:	2824      	cmp	r0, #36	; 0x24
 80029f2:	f000 8080 	beq.w	8002af6 <ZbZclAttrDefaultValue+0x19e>
 80029f6:	2825      	cmp	r0, #37	; 0x25
 80029f8:	d073      	beq.n	8002ae2 <ZbZclAttrDefaultValue+0x18a>
 80029fa:	2826      	cmp	r0, #38	; 0x26
 80029fc:	d067      	beq.n	8002ace <ZbZclAttrDefaultValue+0x176>
 80029fe:	2827      	cmp	r0, #39	; 0x27
 8002a00:	d05b      	beq.n	8002aba <ZbZclAttrDefaultValue+0x162>
 8002a02:	2828      	cmp	r0, #40	; 0x28
 8002a04:	f000 814b 	beq.w	8002c9e <ZbZclAttrDefaultValue+0x346>
 8002a08:	2829      	cmp	r0, #41	; 0x29
 8002a0a:	f000 813e 	beq.w	8002c8a <ZbZclAttrDefaultValue+0x332>
 8002a0e:	282a      	cmp	r0, #42	; 0x2a
 8002a10:	f000 8131 	beq.w	8002c76 <ZbZclAttrDefaultValue+0x31e>
 8002a14:	282b      	cmp	r0, #43	; 0x2b
 8002a16:	f000 8124 	beq.w	8002c62 <ZbZclAttrDefaultValue+0x30a>
 8002a1a:	282c      	cmp	r0, #44	; 0x2c
 8002a1c:	f000 8117 	beq.w	8002c4e <ZbZclAttrDefaultValue+0x2f6>
 8002a20:	282d      	cmp	r0, #45	; 0x2d
 8002a22:	f000 810a 	beq.w	8002c3a <ZbZclAttrDefaultValue+0x2e2>
 8002a26:	282e      	cmp	r0, #46	; 0x2e
 8002a28:	f000 80fd 	beq.w	8002c26 <ZbZclAttrDefaultValue+0x2ce>
 8002a2c:	282f      	cmp	r0, #47	; 0x2f
 8002a2e:	f000 80f0 	beq.w	8002c12 <ZbZclAttrDefaultValue+0x2ba>
 8002a32:	2830      	cmp	r0, #48	; 0x30
 8002a34:	f000 8087 	beq.w	8002b46 <ZbZclAttrDefaultValue+0x1ee>
 8002a38:	2831      	cmp	r0, #49	; 0x31
 8002a3a:	d07a      	beq.n	8002b32 <ZbZclAttrDefaultValue+0x1da>
 8002a3c:	2838      	cmp	r0, #56	; 0x38
 8002a3e:	f000 813a 	beq.w	8002cb6 <ZbZclAttrDefaultValue+0x35e>
 8002a42:	2839      	cmp	r0, #57	; 0x39
 8002a44:	f000 8142 	beq.w	8002ccc <ZbZclAttrDefaultValue+0x374>
 8002a48:	283a      	cmp	r0, #58	; 0x3a
 8002a4a:	f000 8149 	beq.w	8002ce0 <ZbZclAttrDefaultValue+0x388>
 8002a4e:	2841      	cmp	r0, #65	; 0x41
 8002a50:	f000 8152 	beq.w	8002cf8 <ZbZclAttrDefaultValue+0x3a0>
 8002a54:	2842      	cmp	r0, #66	; 0x42
 8002a56:	f000 8159 	beq.w	8002d0c <ZbZclAttrDefaultValue+0x3b4>
 8002a5a:	2843      	cmp	r0, #67	; 0x43
 8002a5c:	f000 8160 	beq.w	8002d20 <ZbZclAttrDefaultValue+0x3c8>
 8002a60:	2844      	cmp	r0, #68	; 0x44
 8002a62:	f000 8168 	beq.w	8002d36 <ZbZclAttrDefaultValue+0x3de>
 8002a66:	2848      	cmp	r0, #72	; 0x48
 8002a68:	f000 818a 	beq.w	8002d80 <ZbZclAttrDefaultValue+0x428>
 8002a6c:	284c      	cmp	r0, #76	; 0x4c
 8002a6e:	f000 8191 	beq.w	8002d94 <ZbZclAttrDefaultValue+0x43c>
 8002a72:	2850      	cmp	r0, #80	; 0x50
 8002a74:	f000 8198 	beq.w	8002da8 <ZbZclAttrDefaultValue+0x450>
 8002a78:	2851      	cmp	r0, #81	; 0x51
 8002a7a:	f000 819f 	beq.w	8002dbc <ZbZclAttrDefaultValue+0x464>
 8002a7e:	28e0      	cmp	r0, #224	; 0xe0
 8002a80:	f000 81a6 	beq.w	8002dd0 <ZbZclAttrDefaultValue+0x478>
 8002a84:	28e1      	cmp	r0, #225	; 0xe1
 8002a86:	f000 81ad 	beq.w	8002de4 <ZbZclAttrDefaultValue+0x48c>
 8002a8a:	28e2      	cmp	r0, #226	; 0xe2
 8002a8c:	f000 81b4 	beq.w	8002df8 <ZbZclAttrDefaultValue+0x4a0>
 8002a90:	28e8      	cmp	r0, #232	; 0xe8
 8002a92:	f000 81bb 	beq.w	8002e0c <ZbZclAttrDefaultValue+0x4b4>
 8002a96:	28e9      	cmp	r0, #233	; 0xe9
 8002a98:	f000 81c2 	beq.w	8002e20 <ZbZclAttrDefaultValue+0x4c8>
 8002a9c:	28ea      	cmp	r0, #234	; 0xea
 8002a9e:	f000 81c9 	beq.w	8002e34 <ZbZclAttrDefaultValue+0x4dc>
 8002aa2:	28f0      	cmp	r0, #240	; 0xf0
 8002aa4:	f000 8152 	beq.w	8002d4c <ZbZclAttrDefaultValue+0x3f4>
 8002aa8:	28f1      	cmp	r0, #241	; 0xf1
 8002aaa:	f000 815b 	beq.w	8002d64 <ZbZclAttrDefaultValue+0x40c>
 8002aae:	28ff      	cmp	r0, #255	; 0xff
 8002ab0:	f040 81ca 	bne.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	0007      	movs	r7, r0
 8002ab8:	e1c6      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002aba:	1c70      	adds	r0, r6, #1
 8002abc:	4285      	cmp	r5, r0
 8002abe:	f0c0 81c3 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ac2:	20ff      	movs	r0, #255	; 0xff
 8002ac4:	f888 0000 	strb.w	r0, [r8]
 8002ac8:	f118 0801 	adds.w	r8, r8, #1
 8002acc:	1c76      	adds	r6, r6, #1
 8002ace:	1c70      	adds	r0, r6, #1
 8002ad0:	4285      	cmp	r5, r0
 8002ad2:	f0c0 81b9 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ad6:	20ff      	movs	r0, #255	; 0xff
 8002ad8:	f888 0000 	strb.w	r0, [r8]
 8002adc:	f118 0801 	adds.w	r8, r8, #1
 8002ae0:	1c76      	adds	r6, r6, #1
 8002ae2:	1c70      	adds	r0, r6, #1
 8002ae4:	4285      	cmp	r5, r0
 8002ae6:	f0c0 81af 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002aea:	20ff      	movs	r0, #255	; 0xff
 8002aec:	f888 0000 	strb.w	r0, [r8]
 8002af0:	f118 0801 	adds.w	r8, r8, #1
 8002af4:	1c76      	adds	r6, r6, #1
 8002af6:	1c70      	adds	r0, r6, #1
 8002af8:	4285      	cmp	r5, r0
 8002afa:	f0c0 81a5 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002afe:	20ff      	movs	r0, #255	; 0xff
 8002b00:	f888 0000 	strb.w	r0, [r8]
 8002b04:	f118 0801 	adds.w	r8, r8, #1
 8002b08:	1c76      	adds	r6, r6, #1
 8002b0a:	1c70      	adds	r0, r6, #1
 8002b0c:	4285      	cmp	r5, r0
 8002b0e:	f0c0 819b 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b12:	20ff      	movs	r0, #255	; 0xff
 8002b14:	f888 0000 	strb.w	r0, [r8]
 8002b18:	f118 0801 	adds.w	r8, r8, #1
 8002b1c:	1c76      	adds	r6, r6, #1
 8002b1e:	1c70      	adds	r0, r6, #1
 8002b20:	4285      	cmp	r5, r0
 8002b22:	f0c0 8191 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b26:	20ff      	movs	r0, #255	; 0xff
 8002b28:	f888 0000 	strb.w	r0, [r8]
 8002b2c:	f118 0801 	adds.w	r8, r8, #1
 8002b30:	1c76      	adds	r6, r6, #1
 8002b32:	1c70      	adds	r0, r6, #1
 8002b34:	4285      	cmp	r5, r0
 8002b36:	f0c0 8187 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b3a:	20ff      	movs	r0, #255	; 0xff
 8002b3c:	f888 0000 	strb.w	r0, [r8]
 8002b40:	f118 0801 	adds.w	r8, r8, #1
 8002b44:	1c76      	adds	r6, r6, #1
 8002b46:	1c70      	adds	r0, r6, #1
 8002b48:	4285      	cmp	r5, r0
 8002b4a:	f0c0 817d 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b4e:	20ff      	movs	r0, #255	; 0xff
 8002b50:	f888 0000 	strb.w	r0, [r8]
 8002b54:	f118 0801 	adds.w	r8, r8, #1
 8002b58:	1c76      	adds	r6, r6, #1
 8002b5a:	0037      	movs	r7, r6
 8002b5c:	e174      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f888 0000 	strb.w	r0, [r8]
 8002b64:	f118 0801 	adds.w	r8, r8, #1
 8002b68:	2001      	movs	r0, #1
 8002b6a:	0007      	movs	r7, r0
 8002b6c:	e16c      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b6e:	1c70      	adds	r0, r6, #1
 8002b70:	4285      	cmp	r5, r0
 8002b72:	f0c0 8169 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b76:	2000      	movs	r0, #0
 8002b78:	f888 0000 	strb.w	r0, [r8]
 8002b7c:	f118 0801 	adds.w	r8, r8, #1
 8002b80:	1c76      	adds	r6, r6, #1
 8002b82:	1c70      	adds	r0, r6, #1
 8002b84:	4285      	cmp	r5, r0
 8002b86:	f0c0 815f 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f888 0000 	strb.w	r0, [r8]
 8002b90:	f118 0801 	adds.w	r8, r8, #1
 8002b94:	1c76      	adds	r6, r6, #1
 8002b96:	1c70      	adds	r0, r6, #1
 8002b98:	4285      	cmp	r5, r0
 8002b9a:	f0c0 8155 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f888 0000 	strb.w	r0, [r8]
 8002ba4:	f118 0801 	adds.w	r8, r8, #1
 8002ba8:	1c76      	adds	r6, r6, #1
 8002baa:	1c70      	adds	r0, r6, #1
 8002bac:	4285      	cmp	r5, r0
 8002bae:	f0c0 814b 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f888 0000 	strb.w	r0, [r8]
 8002bb8:	f118 0801 	adds.w	r8, r8, #1
 8002bbc:	1c76      	adds	r6, r6, #1
 8002bbe:	1c70      	adds	r0, r6, #1
 8002bc0:	4285      	cmp	r5, r0
 8002bc2:	f0c0 8141 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f888 0000 	strb.w	r0, [r8]
 8002bcc:	f118 0801 	adds.w	r8, r8, #1
 8002bd0:	1c76      	adds	r6, r6, #1
 8002bd2:	1c70      	adds	r0, r6, #1
 8002bd4:	4285      	cmp	r5, r0
 8002bd6:	f0c0 8137 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f888 0000 	strb.w	r0, [r8]
 8002be0:	f118 0801 	adds.w	r8, r8, #1
 8002be4:	1c76      	adds	r6, r6, #1
 8002be6:	1c70      	adds	r0, r6, #1
 8002be8:	4285      	cmp	r5, r0
 8002bea:	f0c0 812d 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f888 0000 	strb.w	r0, [r8]
 8002bf4:	f118 0801 	adds.w	r8, r8, #1
 8002bf8:	1c76      	adds	r6, r6, #1
 8002bfa:	1c70      	adds	r0, r6, #1
 8002bfc:	4285      	cmp	r5, r0
 8002bfe:	f0c0 8123 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c02:	2000      	movs	r0, #0
 8002c04:	f888 0000 	strb.w	r0, [r8]
 8002c08:	f118 0801 	adds.w	r8, r8, #1
 8002c0c:	1c76      	adds	r6, r6, #1
 8002c0e:	0037      	movs	r7, r6
 8002c10:	e11a      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c12:	1c70      	adds	r0, r6, #1
 8002c14:	4285      	cmp	r5, r0
 8002c16:	f0c0 8117 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f888 0000 	strb.w	r0, [r8]
 8002c20:	f118 0801 	adds.w	r8, r8, #1
 8002c24:	1c76      	adds	r6, r6, #1
 8002c26:	1c70      	adds	r0, r6, #1
 8002c28:	4285      	cmp	r5, r0
 8002c2a:	f0c0 810d 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f888 0000 	strb.w	r0, [r8]
 8002c34:	f118 0801 	adds.w	r8, r8, #1
 8002c38:	1c76      	adds	r6, r6, #1
 8002c3a:	1c70      	adds	r0, r6, #1
 8002c3c:	4285      	cmp	r5, r0
 8002c3e:	f0c0 8103 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c42:	2000      	movs	r0, #0
 8002c44:	f888 0000 	strb.w	r0, [r8]
 8002c48:	f118 0801 	adds.w	r8, r8, #1
 8002c4c:	1c76      	adds	r6, r6, #1
 8002c4e:	1c70      	adds	r0, r6, #1
 8002c50:	4285      	cmp	r5, r0
 8002c52:	f0c0 80f9 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c56:	2000      	movs	r0, #0
 8002c58:	f888 0000 	strb.w	r0, [r8]
 8002c5c:	f118 0801 	adds.w	r8, r8, #1
 8002c60:	1c76      	adds	r6, r6, #1
 8002c62:	1c70      	adds	r0, r6, #1
 8002c64:	4285      	cmp	r5, r0
 8002c66:	f0c0 80ef 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f888 0000 	strb.w	r0, [r8]
 8002c70:	f118 0801 	adds.w	r8, r8, #1
 8002c74:	1c76      	adds	r6, r6, #1
 8002c76:	1c70      	adds	r0, r6, #1
 8002c78:	4285      	cmp	r5, r0
 8002c7a:	f0c0 80e5 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f888 0000 	strb.w	r0, [r8]
 8002c84:	f118 0801 	adds.w	r8, r8, #1
 8002c88:	1c76      	adds	r6, r6, #1
 8002c8a:	1c70      	adds	r0, r6, #1
 8002c8c:	4285      	cmp	r5, r0
 8002c8e:	f0c0 80db 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002c92:	2000      	movs	r0, #0
 8002c94:	f888 0000 	strb.w	r0, [r8]
 8002c98:	f118 0801 	adds.w	r8, r8, #1
 8002c9c:	1c76      	adds	r6, r6, #1
 8002c9e:	1c70      	adds	r0, r6, #1
 8002ca0:	4285      	cmp	r5, r0
 8002ca2:	f0c0 80d1 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ca6:	2080      	movs	r0, #128	; 0x80
 8002ca8:	f888 0000 	strb.w	r0, [r8]
 8002cac:	f118 0801 	adds.w	r8, r8, #1
 8002cb0:	1c76      	adds	r6, r6, #1
 8002cb2:	0037      	movs	r7, r6
 8002cb4:	e0c8      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002cb6:	2d02      	cmp	r5, #2
 8002cb8:	f0c0 80c6 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002cbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002cc0:	4640      	mov	r0, r8
 8002cc2:	f7ff f9a9 	bl	8002018 <putle16>
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	0007      	movs	r7, r0
 8002cca:	e0bd      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ccc:	2d04      	cmp	r5, #4
 8002cce:	f0c0 80bb 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002cd2:	495f      	ldr	r1, [pc, #380]	; (8002e50 <.text_13>)
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	f7ff f9b1 	bl	800203c <putle32>
 8002cda:	2004      	movs	r0, #4
 8002cdc:	0007      	movs	r7, r0
 8002cde:	e0b3      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ce0:	2d08      	cmp	r5, #8
 8002ce2:	f0c0 80b1 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002ce6:	f07f 0201 	mvns.w	r2, #1
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <.text_14>)
 8002cec:	4640      	mov	r0, r8
 8002cee:	f7ff f9d8 	bl	80020a2 <putle64>
 8002cf2:	2008      	movs	r0, #8
 8002cf4:	0007      	movs	r7, r0
 8002cf6:	e0a7      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002cf8:	2d02      	cmp	r5, #2
 8002cfa:	f0c0 80a5 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002cfe:	21ff      	movs	r1, #255	; 0xff
 8002d00:	4640      	mov	r0, r8
 8002d02:	f7ff f989 	bl	8002018 <putle16>
 8002d06:	2002      	movs	r0, #2
 8002d08:	0007      	movs	r7, r0
 8002d0a:	e09d      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d0c:	2d02      	cmp	r5, #2
 8002d0e:	f0c0 809b 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d12:	21ff      	movs	r1, #255	; 0xff
 8002d14:	4640      	mov	r0, r8
 8002d16:	f7ff f97f 	bl	8002018 <putle16>
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	0007      	movs	r7, r0
 8002d1e:	e093      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d20:	2d04      	cmp	r5, #4
 8002d22:	f0c0 8091 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	f7ff f986 	bl	800203c <putle32>
 8002d30:	2004      	movs	r0, #4
 8002d32:	0007      	movs	r7, r0
 8002d34:	e088      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d36:	2d04      	cmp	r5, #4
 8002d38:	f0c0 8086 	bcc.w	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d40:	4640      	mov	r0, r8
 8002d42:	f7ff f97b 	bl	800203c <putle32>
 8002d46:	2004      	movs	r0, #4
 8002d48:	0007      	movs	r7, r0
 8002d4a:	e07d      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d4c:	2d08      	cmp	r5, #8
 8002d4e:	d37b      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d50:	f05f 32ff 	movs.w	r2, #4294967295
 8002d54:	f05f 33ff 	movs.w	r3, #4294967295
 8002d58:	4640      	mov	r0, r8
 8002d5a:	f7ff f9a2 	bl	80020a2 <putle64>
 8002d5e:	2008      	movs	r0, #8
 8002d60:	0007      	movs	r7, r0
 8002d62:	e071      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d64:	2d10      	cmp	r5, #16
 8002d66:	d36f      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d68:	f05f 0910 	movs.w	r9, #16
 8002d6c:	f05f 0a00 	movs.w	sl, #0
 8002d70:	4652      	mov	r2, sl
 8002d72:	4649      	mov	r1, r9
 8002d74:	4640      	mov	r0, r8
 8002d76:	f003 fb98 	bl	80064aa <__aeabi_memset>
 8002d7a:	2010      	movs	r0, #16
 8002d7c:	0007      	movs	r7, r0
 8002d7e:	e063      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d80:	2d02      	cmp	r5, #2
 8002d82:	d361      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d88:	4640      	mov	r0, r8
 8002d8a:	f7ff f945 	bl	8002018 <putle16>
 8002d8e:	2002      	movs	r0, #2
 8002d90:	0007      	movs	r7, r0
 8002d92:	e059      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d94:	2d02      	cmp	r5, #2
 8002d96:	d357      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d9c:	4640      	mov	r0, r8
 8002d9e:	f7ff f93b 	bl	8002018 <putle16>
 8002da2:	2002      	movs	r0, #2
 8002da4:	0007      	movs	r7, r0
 8002da6:	e04f      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002da8:	2d02      	cmp	r5, #2
 8002daa:	d34d      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002dac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002db0:	4640      	mov	r0, r8
 8002db2:	f7ff f931 	bl	8002018 <putle16>
 8002db6:	2002      	movs	r0, #2
 8002db8:	0007      	movs	r7, r0
 8002dba:	e045      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002dbc:	2d02      	cmp	r5, #2
 8002dbe:	d343      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dc4:	4640      	mov	r0, r8
 8002dc6:	f7ff f927 	bl	8002018 <putle16>
 8002dca:	2002      	movs	r0, #2
 8002dcc:	0007      	movs	r7, r0
 8002dce:	e03b      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002dd0:	2d04      	cmp	r5, #4
 8002dd2:	d339      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002dd4:	f05f 31ff 	movs.w	r1, #4294967295
 8002dd8:	4640      	mov	r0, r8
 8002dda:	f7ff f92f 	bl	800203c <putle32>
 8002dde:	2004      	movs	r0, #4
 8002de0:	0007      	movs	r7, r0
 8002de2:	e031      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002de4:	2d04      	cmp	r5, #4
 8002de6:	d32f      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002de8:	f05f 31ff 	movs.w	r1, #4294967295
 8002dec:	4640      	mov	r0, r8
 8002dee:	f7ff f925 	bl	800203c <putle32>
 8002df2:	2004      	movs	r0, #4
 8002df4:	0007      	movs	r7, r0
 8002df6:	e027      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002df8:	2d04      	cmp	r5, #4
 8002dfa:	d325      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002dfc:	f05f 31ff 	movs.w	r1, #4294967295
 8002e00:	4640      	mov	r0, r8
 8002e02:	f7ff f91b 	bl	800203c <putle32>
 8002e06:	2004      	movs	r0, #4
 8002e08:	0007      	movs	r7, r0
 8002e0a:	e01d      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e0c:	2d02      	cmp	r5, #2
 8002e0e:	d31b      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e14:	4640      	mov	r0, r8
 8002e16:	f7ff f8ff 	bl	8002018 <putle16>
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	0007      	movs	r7, r0
 8002e1e:	e013      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e20:	2d02      	cmp	r5, #2
 8002e22:	d311      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e28:	4640      	mov	r0, r8
 8002e2a:	f7ff f8f5 	bl	8002018 <putle16>
 8002e2e:	2002      	movs	r0, #2
 8002e30:	0007      	movs	r7, r0
 8002e32:	e009      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e34:	2d04      	cmp	r5, #4
 8002e36:	d307      	bcc.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e38:	f05f 31ff 	movs.w	r1, #4294967295
 8002e3c:	4640      	mov	r0, r8
 8002e3e:	f7ff f8fd 	bl	800203c <putle32>
 8002e42:	2004      	movs	r0, #4
 8002e44:	0007      	movs	r7, r0
 8002e46:	e7ff      	b.n	8002e48 <ZbZclAttrDefaultValue+0x4f0>
 8002e48:	0038      	movs	r0, r7
 8002e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002e50 <.text_13>:
 8002e50:	00fffffe 	.word	0x00fffffe

08002e54 <.text_14>:
 8002e54:	001fffff 	.word	0x001fffff

08002e58 <ZbZclAttrTypeLength>:
 8002e58:	0001      	movs	r1, r0
 8002e5a:	0008      	movs	r0, r1
 8002e5c:	b2c0      	uxtb	r0, r0
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	f000 8081 	beq.w	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002e64:	2808      	cmp	r0, #8
 8002e66:	d06c      	beq.n	8002f42 <ZbZclAttrTypeLength+0xea>
 8002e68:	2809      	cmp	r0, #9
 8002e6a:	d06c      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002e6c:	280a      	cmp	r0, #10
 8002e6e:	d06c      	beq.n	8002f4a <ZbZclAttrTypeLength+0xf2>
 8002e70:	280b      	cmp	r0, #11
 8002e72:	d06c      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002e74:	280c      	cmp	r0, #12
 8002e76:	d06c      	beq.n	8002f52 <ZbZclAttrTypeLength+0xfa>
 8002e78:	280d      	cmp	r0, #13
 8002e7a:	d06c      	beq.n	8002f56 <ZbZclAttrTypeLength+0xfe>
 8002e7c:	280e      	cmp	r0, #14
 8002e7e:	d06c      	beq.n	8002f5a <ZbZclAttrTypeLength+0x102>
 8002e80:	280f      	cmp	r0, #15
 8002e82:	d06c      	beq.n	8002f5e <ZbZclAttrTypeLength+0x106>
 8002e84:	2810      	cmp	r0, #16
 8002e86:	d05c      	beq.n	8002f42 <ZbZclAttrTypeLength+0xea>
 8002e88:	2818      	cmp	r0, #24
 8002e8a:	d05a      	beq.n	8002f42 <ZbZclAttrTypeLength+0xea>
 8002e8c:	2819      	cmp	r0, #25
 8002e8e:	d05a      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002e90:	281a      	cmp	r0, #26
 8002e92:	d05a      	beq.n	8002f4a <ZbZclAttrTypeLength+0xf2>
 8002e94:	281b      	cmp	r0, #27
 8002e96:	d05a      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002e98:	281c      	cmp	r0, #28
 8002e9a:	d05a      	beq.n	8002f52 <ZbZclAttrTypeLength+0xfa>
 8002e9c:	281d      	cmp	r0, #29
 8002e9e:	d05a      	beq.n	8002f56 <ZbZclAttrTypeLength+0xfe>
 8002ea0:	281e      	cmp	r0, #30
 8002ea2:	d05a      	beq.n	8002f5a <ZbZclAttrTypeLength+0x102>
 8002ea4:	281f      	cmp	r0, #31
 8002ea6:	d05a      	beq.n	8002f5e <ZbZclAttrTypeLength+0x106>
 8002ea8:	2820      	cmp	r0, #32
 8002eaa:	d04a      	beq.n	8002f42 <ZbZclAttrTypeLength+0xea>
 8002eac:	2821      	cmp	r0, #33	; 0x21
 8002eae:	d04a      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002eb0:	2822      	cmp	r0, #34	; 0x22
 8002eb2:	d04a      	beq.n	8002f4a <ZbZclAttrTypeLength+0xf2>
 8002eb4:	2823      	cmp	r0, #35	; 0x23
 8002eb6:	d04a      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002eb8:	2824      	cmp	r0, #36	; 0x24
 8002eba:	d04a      	beq.n	8002f52 <ZbZclAttrTypeLength+0xfa>
 8002ebc:	2825      	cmp	r0, #37	; 0x25
 8002ebe:	d04a      	beq.n	8002f56 <ZbZclAttrTypeLength+0xfe>
 8002ec0:	2826      	cmp	r0, #38	; 0x26
 8002ec2:	d04a      	beq.n	8002f5a <ZbZclAttrTypeLength+0x102>
 8002ec4:	2827      	cmp	r0, #39	; 0x27
 8002ec6:	d04a      	beq.n	8002f5e <ZbZclAttrTypeLength+0x106>
 8002ec8:	2828      	cmp	r0, #40	; 0x28
 8002eca:	d03a      	beq.n	8002f42 <ZbZclAttrTypeLength+0xea>
 8002ecc:	2829      	cmp	r0, #41	; 0x29
 8002ece:	d03a      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002ed0:	282a      	cmp	r0, #42	; 0x2a
 8002ed2:	d03a      	beq.n	8002f4a <ZbZclAttrTypeLength+0xf2>
 8002ed4:	282b      	cmp	r0, #43	; 0x2b
 8002ed6:	d03a      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002ed8:	282c      	cmp	r0, #44	; 0x2c
 8002eda:	d03a      	beq.n	8002f52 <ZbZclAttrTypeLength+0xfa>
 8002edc:	282d      	cmp	r0, #45	; 0x2d
 8002ede:	d03a      	beq.n	8002f56 <ZbZclAttrTypeLength+0xfe>
 8002ee0:	282e      	cmp	r0, #46	; 0x2e
 8002ee2:	d03a      	beq.n	8002f5a <ZbZclAttrTypeLength+0x102>
 8002ee4:	282f      	cmp	r0, #47	; 0x2f
 8002ee6:	d03a      	beq.n	8002f5e <ZbZclAttrTypeLength+0x106>
 8002ee8:	2830      	cmp	r0, #48	; 0x30
 8002eea:	d02a      	beq.n	8002f42 <ZbZclAttrTypeLength+0xea>
 8002eec:	2831      	cmp	r0, #49	; 0x31
 8002eee:	d02a      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002ef0:	2838      	cmp	r0, #56	; 0x38
 8002ef2:	d028      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002ef4:	2839      	cmp	r0, #57	; 0x39
 8002ef6:	d02a      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002ef8:	283a      	cmp	r0, #58	; 0x3a
 8002efa:	d030      	beq.n	8002f5e <ZbZclAttrTypeLength+0x106>
 8002efc:	2841      	cmp	r0, #65	; 0x41
 8002efe:	d032      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f00:	2842      	cmp	r0, #66	; 0x42
 8002f02:	d030      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f04:	2843      	cmp	r0, #67	; 0x43
 8002f06:	d02e      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f08:	2844      	cmp	r0, #68	; 0x44
 8002f0a:	d02c      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f0c:	2848      	cmp	r0, #72	; 0x48
 8002f0e:	d02a      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f10:	284c      	cmp	r0, #76	; 0x4c
 8002f12:	d028      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f14:	2850      	cmp	r0, #80	; 0x50
 8002f16:	d026      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f18:	2851      	cmp	r0, #81	; 0x51
 8002f1a:	d024      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f1c:	28e0      	cmp	r0, #224	; 0xe0
 8002f1e:	d016      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002f20:	28e1      	cmp	r0, #225	; 0xe1
 8002f22:	d014      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002f24:	28e2      	cmp	r0, #226	; 0xe2
 8002f26:	d012      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002f28:	28e8      	cmp	r0, #232	; 0xe8
 8002f2a:	d00c      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002f2c:	28e9      	cmp	r0, #233	; 0xe9
 8002f2e:	d00a      	beq.n	8002f46 <ZbZclAttrTypeLength+0xee>
 8002f30:	28ea      	cmp	r0, #234	; 0xea
 8002f32:	d00c      	beq.n	8002f4e <ZbZclAttrTypeLength+0xf6>
 8002f34:	28f0      	cmp	r0, #240	; 0xf0
 8002f36:	d012      	beq.n	8002f5e <ZbZclAttrTypeLength+0x106>
 8002f38:	28f1      	cmp	r0, #241	; 0xf1
 8002f3a:	d012      	beq.n	8002f62 <ZbZclAttrTypeLength+0x10a>
 8002f3c:	28ff      	cmp	r0, #255	; 0xff
 8002f3e:	d012      	beq.n	8002f66 <ZbZclAttrTypeLength+0x10e>
 8002f40:	e013      	b.n	8002f6a <ZbZclAttrTypeLength+0x112>
 8002f42:	2001      	movs	r0, #1
 8002f44:	e012      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f46:	2002      	movs	r0, #2
 8002f48:	e010      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	e00e      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f4e:	2004      	movs	r0, #4
 8002f50:	e00c      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f52:	2005      	movs	r0, #5
 8002f54:	e00a      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f56:	2006      	movs	r0, #6
 8002f58:	e008      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f5a:	2007      	movs	r0, #7
 8002f5c:	e006      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f5e:	2008      	movs	r0, #8
 8002f60:	e004      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f62:	2010      	movs	r0, #16
 8002f64:	e002      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f66:	2000      	movs	r0, #0
 8002f68:	e000      	b.n	8002f6c <ZbZclAttrTypeLength+0x114>
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	4770      	bx	lr

08002f6e <ZbZclAttrParseLength>:
 8002f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f72:	0006      	movs	r6, r0
 8002f74:	000c      	movs	r4, r1
 8002f76:	0015      	movs	r5, r2
 8002f78:	001f      	movs	r7, r3
 8002f7a:	0038      	movs	r0, r7
 8002f7c:	b2c0      	uxtb	r0, r0
 8002f7e:	280f      	cmp	r0, #15
 8002f80:	d302      	bcc.n	8002f88 <ZbZclAttrParseLength+0x1a>
 8002f82:	f05f 30ff 	movs.w	r0, #4294967295
 8002f86:	e0a1      	b.n	80030cc <ZbZclAttrParseLength+0x15e>
 8002f88:	0030      	movs	r0, r6
 8002f8a:	b2c0      	uxtb	r0, r0
 8002f8c:	f7ff ff64 	bl	8002e58 <ZbZclAttrTypeLength>
 8002f90:	0001      	movs	r1, r0
 8002f92:	2901      	cmp	r1, #1
 8002f94:	db06      	blt.n	8002fa4 <ZbZclAttrParseLength+0x36>
 8002f96:	428d      	cmp	r5, r1
 8002f98:	d202      	bcs.n	8002fa0 <ZbZclAttrParseLength+0x32>
 8002f9a:	f05f 30ff 	movs.w	r0, #4294967295
 8002f9e:	e095      	b.n	80030cc <ZbZclAttrParseLength+0x15e>
 8002fa0:	0008      	movs	r0, r1
 8002fa2:	e093      	b.n	80030cc <ZbZclAttrParseLength+0x15e>
 8002fa4:	2c00      	cmp	r4, #0
 8002fa6:	d101      	bne.n	8002fac <ZbZclAttrParseLength+0x3e>
 8002fa8:	0028      	movs	r0, r5
 8002faa:	e08f      	b.n	80030cc <ZbZclAttrParseLength+0x15e>
 8002fac:	f05f 39ff 	movs.w	r9, #4294967295
 8002fb0:	0030      	movs	r0, r6
 8002fb2:	b2c0      	uxtb	r0, r0
 8002fb4:	3841      	subs	r0, #65	; 0x41
 8002fb6:	2801      	cmp	r0, #1
 8002fb8:	d90a      	bls.n	8002fd0 <ZbZclAttrParseLength+0x62>
 8002fba:	1e80      	subs	r0, r0, #2
 8002fbc:	2801      	cmp	r0, #1
 8002fbe:	d914      	bls.n	8002fea <ZbZclAttrParseLength+0x7c>
 8002fc0:	1f40      	subs	r0, r0, #5
 8002fc2:	d027      	beq.n	8003014 <ZbZclAttrParseLength+0xa6>
 8002fc4:	1f00      	subs	r0, r0, #4
 8002fc6:	d04b      	beq.n	8003060 <ZbZclAttrParseLength+0xf2>
 8002fc8:	1f00      	subs	r0, r0, #4
 8002fca:	2801      	cmp	r0, #1
 8002fcc:	d922      	bls.n	8003014 <ZbZclAttrParseLength+0xa6>
 8002fce:	e074      	b.n	80030ba <ZbZclAttrParseLength+0x14c>
 8002fd0:	2d00      	cmp	r5, #0
 8002fd2:	d072      	beq.n	80030ba <ZbZclAttrParseLength+0x14c>
 8002fd4:	7820      	ldrb	r0, [r4, #0]
 8002fd6:	28ff      	cmp	r0, #255	; 0xff
 8002fd8:	d102      	bne.n	8002fe0 <ZbZclAttrParseLength+0x72>
 8002fda:	f05f 0901 	movs.w	r9, #1
 8002fde:	e003      	b.n	8002fe8 <ZbZclAttrParseLength+0x7a>
 8002fe0:	f894 9000 	ldrb.w	r9, [r4]
 8002fe4:	f119 0901 	adds.w	r9, r9, #1
 8002fe8:	e067      	b.n	80030ba <ZbZclAttrParseLength+0x14c>
 8002fea:	2d02      	cmp	r5, #2
 8002fec:	d365      	bcc.n	80030ba <ZbZclAttrParseLength+0x14c>
 8002fee:	0020      	movs	r0, r4
 8002ff0:	f7fe ffc6 	bl	8001f80 <pletoh16>
 8002ff4:	4682      	mov	sl, r0
 8002ff6:	4650      	mov	r0, sl
 8002ff8:	b280      	uxth	r0, r0
 8002ffa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ffe:	4288      	cmp	r0, r1
 8003000:	d102      	bne.n	8003008 <ZbZclAttrParseLength+0x9a>
 8003002:	f05f 0902 	movs.w	r9, #2
 8003006:	e004      	b.n	8003012 <ZbZclAttrParseLength+0xa4>
 8003008:	46d1      	mov	r9, sl
 800300a:	fa1f f989 	uxth.w	r9, r9
 800300e:	f119 0902 	adds.w	r9, r9, #2
 8003012:	e052      	b.n	80030ba <ZbZclAttrParseLength+0x14c>
 8003014:	2d03      	cmp	r5, #3
 8003016:	d350      	bcc.n	80030ba <ZbZclAttrParseLength+0x14c>
 8003018:	7820      	ldrb	r0, [r4, #0]
 800301a:	4680      	mov	r8, r0
 800301c:	1c60      	adds	r0, r4, #1
 800301e:	f7fe ffaf 	bl	8001f80 <pletoh16>
 8003022:	4682      	mov	sl, r0
 8003024:	2003      	movs	r0, #3
 8003026:	4681      	mov	r9, r0
 8003028:	4650      	mov	r0, sl
 800302a:	b280      	uxth	r0, r0
 800302c:	2800      	cmp	r0, #0
 800302e:	d016      	beq.n	800305e <ZbZclAttrParseLength+0xf0>
 8003030:	4650      	mov	r0, sl
 8003032:	b280      	uxth	r0, r0
 8003034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003038:	4288      	cmp	r0, r1
 800303a:	d010      	beq.n	800305e <ZbZclAttrParseLength+0xf0>
 800303c:	1c7b      	adds	r3, r7, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	ebb5 0209 	subs.w	r2, r5, r9
 8003044:	eb04 0109 	add.w	r1, r4, r9
 8003048:	4640      	mov	r0, r8
 800304a:	b2c0      	uxtb	r0, r0
 800304c:	f7ff ff8f 	bl	8002f6e <ZbZclAttrParseLength>
 8003050:	2800      	cmp	r0, #0
 8003052:	d43b      	bmi.n	80030cc <ZbZclAttrParseLength+0x15e>
 8003054:	eb10 0909 	adds.w	r9, r0, r9
 8003058:	f1ba 0a01 	subs.w	sl, sl, #1
 800305c:	e7e4      	b.n	8003028 <ZbZclAttrParseLength+0xba>
 800305e:	e02c      	b.n	80030ba <ZbZclAttrParseLength+0x14c>
 8003060:	2d02      	cmp	r5, #2
 8003062:	d32a      	bcc.n	80030ba <ZbZclAttrParseLength+0x14c>
 8003064:	0020      	movs	r0, r4
 8003066:	f7fe ff8b 	bl	8001f80 <pletoh16>
 800306a:	4682      	mov	sl, r0
 800306c:	2002      	movs	r0, #2
 800306e:	4681      	mov	r9, r0
 8003070:	4650      	mov	r0, sl
 8003072:	b280      	uxth	r0, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	d01f      	beq.n	80030b8 <ZbZclAttrParseLength+0x14a>
 8003078:	4650      	mov	r0, sl
 800307a:	b280      	uxth	r0, r0
 800307c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003080:	4288      	cmp	r0, r1
 8003082:	d019      	beq.n	80030b8 <ZbZclAttrParseLength+0x14a>
 8003084:	f119 0001 	adds.w	r0, r9, #1
 8003088:	4285      	cmp	r5, r0
 800308a:	d315      	bcc.n	80030b8 <ZbZclAttrParseLength+0x14a>
 800308c:	f814 0009 	ldrb.w	r0, [r4, r9]
 8003090:	4680      	mov	r8, r0
 8003092:	f119 0901 	adds.w	r9, r9, #1
 8003096:	1c7b      	adds	r3, r7, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	ebb5 0209 	subs.w	r2, r5, r9
 800309e:	eb04 0109 	add.w	r1, r4, r9
 80030a2:	4640      	mov	r0, r8
 80030a4:	b2c0      	uxtb	r0, r0
 80030a6:	f7ff ff62 	bl	8002f6e <ZbZclAttrParseLength>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d404      	bmi.n	80030b8 <ZbZclAttrParseLength+0x14a>
 80030ae:	eb10 0909 	adds.w	r9, r0, r9
 80030b2:	f1ba 0a01 	subs.w	sl, sl, #1
 80030b6:	e7db      	b.n	8003070 <ZbZclAttrParseLength+0x102>
 80030b8:	e7ff      	b.n	80030ba <ZbZclAttrParseLength+0x14c>
 80030ba:	f1b9 0f00 	cmp.w	r9, #0
 80030be:	d401      	bmi.n	80030c4 <ZbZclAttrParseLength+0x156>
 80030c0:	454d      	cmp	r5, r9
 80030c2:	d202      	bcs.n	80030ca <ZbZclAttrParseLength+0x15c>
 80030c4:	f05f 30ff 	movs.w	r0, #4294967295
 80030c8:	e000      	b.n	80030cc <ZbZclAttrParseLength+0x15e>
 80030ca:	4648      	mov	r0, r9
 80030cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080030d0 <ZbZclAttrIsAnalog>:
 80030d0:	0001      	movs	r1, r0
 80030d2:	0008      	movs	r0, r1
 80030d4:	b2c0      	uxtb	r0, r0
 80030d6:	2820      	cmp	r0, #32
 80030d8:	db05      	blt.n	80030e6 <ZbZclAttrIsAnalog+0x16>
 80030da:	0008      	movs	r0, r1
 80030dc:	b2c0      	uxtb	r0, r0
 80030de:	2828      	cmp	r0, #40	; 0x28
 80030e0:	da01      	bge.n	80030e6 <ZbZclAttrIsAnalog+0x16>
 80030e2:	2001      	movs	r0, #1
 80030e4:	e026      	b.n	8003134 <ZbZclAttrIsAnalog+0x64>
 80030e6:	0008      	movs	r0, r1
 80030e8:	b2c0      	uxtb	r0, r0
 80030ea:	2828      	cmp	r0, #40	; 0x28
 80030ec:	db05      	blt.n	80030fa <ZbZclAttrIsAnalog+0x2a>
 80030ee:	0008      	movs	r0, r1
 80030f0:	b2c0      	uxtb	r0, r0
 80030f2:	2830      	cmp	r0, #48	; 0x30
 80030f4:	da01      	bge.n	80030fa <ZbZclAttrIsAnalog+0x2a>
 80030f6:	2001      	movs	r0, #1
 80030f8:	e01c      	b.n	8003134 <ZbZclAttrIsAnalog+0x64>
 80030fa:	0008      	movs	r0, r1
 80030fc:	b2c0      	uxtb	r0, r0
 80030fe:	2838      	cmp	r0, #56	; 0x38
 8003100:	d007      	beq.n	8003112 <ZbZclAttrIsAnalog+0x42>
 8003102:	0008      	movs	r0, r1
 8003104:	b2c0      	uxtb	r0, r0
 8003106:	2839      	cmp	r0, #57	; 0x39
 8003108:	d003      	beq.n	8003112 <ZbZclAttrIsAnalog+0x42>
 800310a:	0008      	movs	r0, r1
 800310c:	b2c0      	uxtb	r0, r0
 800310e:	283a      	cmp	r0, #58	; 0x3a
 8003110:	d101      	bne.n	8003116 <ZbZclAttrIsAnalog+0x46>
 8003112:	2001      	movs	r0, #1
 8003114:	e00e      	b.n	8003134 <ZbZclAttrIsAnalog+0x64>
 8003116:	0008      	movs	r0, r1
 8003118:	b2c0      	uxtb	r0, r0
 800311a:	28e0      	cmp	r0, #224	; 0xe0
 800311c:	d007      	beq.n	800312e <ZbZclAttrIsAnalog+0x5e>
 800311e:	0008      	movs	r0, r1
 8003120:	b2c0      	uxtb	r0, r0
 8003122:	28e1      	cmp	r0, #225	; 0xe1
 8003124:	d003      	beq.n	800312e <ZbZclAttrIsAnalog+0x5e>
 8003126:	0008      	movs	r0, r1
 8003128:	b2c0      	uxtb	r0, r0
 800312a:	28e2      	cmp	r0, #226	; 0xe2
 800312c:	d101      	bne.n	8003132 <ZbZclAttrIsAnalog+0x62>
 800312e:	2001      	movs	r0, #1
 8003130:	e000      	b.n	8003134 <ZbZclAttrIsAnalog+0x64>
 8003132:	2000      	movs	r0, #0
 8003134:	4770      	bx	lr
	...

08003138 <ZbZclAppendInteger>:
 8003138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313a:	0004      	movs	r4, r0
 800313c:	000d      	movs	r5, r1
 800313e:	9905      	ldr	r1, [sp, #20]
 8003140:	f05f 0e00 	movs.w	lr, #0
 8003144:	f05f 0c00 	movs.w	ip, #0
 8003148:	0010      	movs	r0, r2
 800314a:	b2c0      	uxtb	r0, r0
 800314c:	2808      	cmp	r0, #8
 800314e:	f000 80c6 	beq.w	80032de <ZbZclAppendInteger+0x1a6>
 8003152:	2809      	cmp	r0, #9
 8003154:	f000 80b6 	beq.w	80032c4 <ZbZclAppendInteger+0x18c>
 8003158:	280a      	cmp	r0, #10
 800315a:	f000 80a6 	beq.w	80032aa <ZbZclAppendInteger+0x172>
 800315e:	280b      	cmp	r0, #11
 8003160:	f000 8096 	beq.w	8003290 <ZbZclAppendInteger+0x158>
 8003164:	280c      	cmp	r0, #12
 8003166:	f000 8086 	beq.w	8003276 <ZbZclAppendInteger+0x13e>
 800316a:	280d      	cmp	r0, #13
 800316c:	d076      	beq.n	800325c <ZbZclAppendInteger+0x124>
 800316e:	280e      	cmp	r0, #14
 8003170:	d067      	beq.n	8003242 <ZbZclAppendInteger+0x10a>
 8003172:	280f      	cmp	r0, #15
 8003174:	d058      	beq.n	8003228 <ZbZclAppendInteger+0xf0>
 8003176:	2810      	cmp	r0, #16
 8003178:	d045      	beq.n	8003206 <ZbZclAppendInteger+0xce>
 800317a:	2818      	cmp	r0, #24
 800317c:	f000 80af 	beq.w	80032de <ZbZclAppendInteger+0x1a6>
 8003180:	2819      	cmp	r0, #25
 8003182:	f000 809f 	beq.w	80032c4 <ZbZclAppendInteger+0x18c>
 8003186:	281a      	cmp	r0, #26
 8003188:	f000 808f 	beq.w	80032aa <ZbZclAppendInteger+0x172>
 800318c:	281b      	cmp	r0, #27
 800318e:	f000 807f 	beq.w	8003290 <ZbZclAppendInteger+0x158>
 8003192:	281c      	cmp	r0, #28
 8003194:	d06f      	beq.n	8003276 <ZbZclAppendInteger+0x13e>
 8003196:	281d      	cmp	r0, #29
 8003198:	d060      	beq.n	800325c <ZbZclAppendInteger+0x124>
 800319a:	281e      	cmp	r0, #30
 800319c:	d051      	beq.n	8003242 <ZbZclAppendInteger+0x10a>
 800319e:	281f      	cmp	r0, #31
 80031a0:	d042      	beq.n	8003228 <ZbZclAppendInteger+0xf0>
 80031a2:	2820      	cmp	r0, #32
 80031a4:	f000 809b 	beq.w	80032de <ZbZclAppendInteger+0x1a6>
 80031a8:	2821      	cmp	r0, #33	; 0x21
 80031aa:	f000 808b 	beq.w	80032c4 <ZbZclAppendInteger+0x18c>
 80031ae:	2822      	cmp	r0, #34	; 0x22
 80031b0:	d07b      	beq.n	80032aa <ZbZclAppendInteger+0x172>
 80031b2:	2823      	cmp	r0, #35	; 0x23
 80031b4:	d06c      	beq.n	8003290 <ZbZclAppendInteger+0x158>
 80031b6:	2824      	cmp	r0, #36	; 0x24
 80031b8:	d05d      	beq.n	8003276 <ZbZclAppendInteger+0x13e>
 80031ba:	2825      	cmp	r0, #37	; 0x25
 80031bc:	d04e      	beq.n	800325c <ZbZclAppendInteger+0x124>
 80031be:	2826      	cmp	r0, #38	; 0x26
 80031c0:	d03f      	beq.n	8003242 <ZbZclAppendInteger+0x10a>
 80031c2:	2827      	cmp	r0, #39	; 0x27
 80031c4:	d030      	beq.n	8003228 <ZbZclAppendInteger+0xf0>
 80031c6:	2828      	cmp	r0, #40	; 0x28
 80031c8:	f000 8089 	beq.w	80032de <ZbZclAppendInteger+0x1a6>
 80031cc:	2829      	cmp	r0, #41	; 0x29
 80031ce:	d079      	beq.n	80032c4 <ZbZclAppendInteger+0x18c>
 80031d0:	282a      	cmp	r0, #42	; 0x2a
 80031d2:	d06a      	beq.n	80032aa <ZbZclAppendInteger+0x172>
 80031d4:	282b      	cmp	r0, #43	; 0x2b
 80031d6:	d05b      	beq.n	8003290 <ZbZclAppendInteger+0x158>
 80031d8:	282c      	cmp	r0, #44	; 0x2c
 80031da:	d04c      	beq.n	8003276 <ZbZclAppendInteger+0x13e>
 80031dc:	282d      	cmp	r0, #45	; 0x2d
 80031de:	d03d      	beq.n	800325c <ZbZclAppendInteger+0x124>
 80031e0:	282e      	cmp	r0, #46	; 0x2e
 80031e2:	d02e      	beq.n	8003242 <ZbZclAppendInteger+0x10a>
 80031e4:	282f      	cmp	r0, #47	; 0x2f
 80031e6:	d01f      	beq.n	8003228 <ZbZclAppendInteger+0xf0>
 80031e8:	2830      	cmp	r0, #48	; 0x30
 80031ea:	d078      	beq.n	80032de <ZbZclAppendInteger+0x1a6>
 80031ec:	2831      	cmp	r0, #49	; 0x31
 80031ee:	d069      	beq.n	80032c4 <ZbZclAppendInteger+0x18c>
 80031f0:	28e2      	cmp	r0, #226	; 0xe2
 80031f2:	d04d      	beq.n	8003290 <ZbZclAppendInteger+0x158>
 80031f4:	28e8      	cmp	r0, #232	; 0xe8
 80031f6:	d065      	beq.n	80032c4 <ZbZclAppendInteger+0x18c>
 80031f8:	28e9      	cmp	r0, #233	; 0xe9
 80031fa:	d063      	beq.n	80032c4 <ZbZclAppendInteger+0x18c>
 80031fc:	28ea      	cmp	r0, #234	; 0xea
 80031fe:	d047      	beq.n	8003290 <ZbZclAppendInteger+0x158>
 8003200:	28f0      	cmp	r0, #240	; 0xf0
 8003202:	d011      	beq.n	8003228 <ZbZclAppendInteger+0xf0>
 8003204:	e076      	b.n	80032f4 <ZbZclAppendInteger+0x1bc>
 8003206:	2900      	cmp	r1, #0
 8003208:	d102      	bne.n	8003210 <ZbZclAppendInteger+0xd8>
 800320a:	f05f 30ff 	movs.w	r0, #4294967295
 800320e:	e073      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 8003210:	2600      	movs	r6, #0
 8003212:	2700      	movs	r7, #0
 8003214:	42bd      	cmp	r5, r7
 8003216:	d101      	bne.n	800321c <ZbZclAppendInteger+0xe4>
 8003218:	42b4      	cmp	r4, r6
 800321a:	d001      	beq.n	8003220 <ZbZclAppendInteger+0xe8>
 800321c:	2001      	movs	r0, #1
 800321e:	e000      	b.n	8003222 <ZbZclAppendInteger+0xea>
 8003220:	2000      	movs	r0, #0
 8003222:	7018      	strb	r0, [r3, #0]
 8003224:	2001      	movs	r0, #1
 8003226:	e067      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 8003228:	458e      	cmp	lr, r1
 800322a:	d302      	bcc.n	8003232 <ZbZclAppendInteger+0xfa>
 800322c:	f05f 30ff 	movs.w	r0, #4294967295
 8003230:	e062      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 8003232:	f803 400e 	strb.w	r4, [r3, lr]
 8003236:	f11e 0e01 	adds.w	lr, lr, #1
 800323a:	0a24      	lsrs	r4, r4, #8
 800323c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8003240:	0a2d      	lsrs	r5, r5, #8
 8003242:	458e      	cmp	lr, r1
 8003244:	d302      	bcc.n	800324c <ZbZclAppendInteger+0x114>
 8003246:	f05f 30ff 	movs.w	r0, #4294967295
 800324a:	e055      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 800324c:	f803 400e 	strb.w	r4, [r3, lr]
 8003250:	f11e 0e01 	adds.w	lr, lr, #1
 8003254:	0a24      	lsrs	r4, r4, #8
 8003256:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800325a:	0a2d      	lsrs	r5, r5, #8
 800325c:	458e      	cmp	lr, r1
 800325e:	d302      	bcc.n	8003266 <ZbZclAppendInteger+0x12e>
 8003260:	f05f 30ff 	movs.w	r0, #4294967295
 8003264:	e048      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 8003266:	f803 400e 	strb.w	r4, [r3, lr]
 800326a:	f11e 0e01 	adds.w	lr, lr, #1
 800326e:	0a24      	lsrs	r4, r4, #8
 8003270:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8003274:	0a2d      	lsrs	r5, r5, #8
 8003276:	458e      	cmp	lr, r1
 8003278:	d302      	bcc.n	8003280 <ZbZclAppendInteger+0x148>
 800327a:	f05f 30ff 	movs.w	r0, #4294967295
 800327e:	e03b      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 8003280:	f803 400e 	strb.w	r4, [r3, lr]
 8003284:	f11e 0e01 	adds.w	lr, lr, #1
 8003288:	0a24      	lsrs	r4, r4, #8
 800328a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800328e:	0a2d      	lsrs	r5, r5, #8
 8003290:	458e      	cmp	lr, r1
 8003292:	d302      	bcc.n	800329a <ZbZclAppendInteger+0x162>
 8003294:	f05f 30ff 	movs.w	r0, #4294967295
 8003298:	e02e      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 800329a:	f803 400e 	strb.w	r4, [r3, lr]
 800329e:	f11e 0e01 	adds.w	lr, lr, #1
 80032a2:	0a24      	lsrs	r4, r4, #8
 80032a4:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80032a8:	0a2d      	lsrs	r5, r5, #8
 80032aa:	458e      	cmp	lr, r1
 80032ac:	d302      	bcc.n	80032b4 <ZbZclAppendInteger+0x17c>
 80032ae:	f05f 30ff 	movs.w	r0, #4294967295
 80032b2:	e021      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 80032b4:	f803 400e 	strb.w	r4, [r3, lr]
 80032b8:	f11e 0e01 	adds.w	lr, lr, #1
 80032bc:	0a24      	lsrs	r4, r4, #8
 80032be:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80032c2:	0a2d      	lsrs	r5, r5, #8
 80032c4:	458e      	cmp	lr, r1
 80032c6:	d302      	bcc.n	80032ce <ZbZclAppendInteger+0x196>
 80032c8:	f05f 30ff 	movs.w	r0, #4294967295
 80032cc:	e014      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 80032ce:	f803 400e 	strb.w	r4, [r3, lr]
 80032d2:	f11e 0e01 	adds.w	lr, lr, #1
 80032d6:	0a24      	lsrs	r4, r4, #8
 80032d8:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80032dc:	0a2d      	lsrs	r5, r5, #8
 80032de:	458e      	cmp	lr, r1
 80032e0:	d302      	bcc.n	80032e8 <ZbZclAppendInteger+0x1b0>
 80032e2:	f05f 30ff 	movs.w	r0, #4294967295
 80032e6:	e007      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 80032e8:	f803 400e 	strb.w	r4, [r3, lr]
 80032ec:	f11e 0e01 	adds.w	lr, lr, #1
 80032f0:	4670      	mov	r0, lr
 80032f2:	e001      	b.n	80032f8 <ZbZclAppendInteger+0x1c0>
 80032f4:	f05f 30ff 	movs.w	r0, #4294967295
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032fa <ZbZclParseInteger>:
 80032fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fe:	4683      	mov	fp, r0
 8003300:	000e      	movs	r6, r1
 8003302:	4692      	mov	sl, r2
 8003304:	2700      	movs	r7, #0
 8003306:	2400      	movs	r4, #0
 8003308:	2500      	movs	r5, #0
 800330a:	f05f 0800 	movs.w	r8, #0
 800330e:	f05f 0900 	movs.w	r9, #0
 8003312:	4658      	mov	r0, fp
 8003314:	b2c0      	uxtb	r0, r0
 8003316:	f000 f91e 	bl	8003556 <ZbZclAttrIsInteger>
 800331a:	2800      	cmp	r0, #0
 800331c:	d105      	bne.n	800332a <ZbZclParseInteger+0x30>
 800331e:	208d      	movs	r0, #141	; 0x8d
 8003320:	f88a 0000 	strb.w	r0, [sl]
 8003324:	2000      	movs	r0, #0
 8003326:	2100      	movs	r1, #0
 8003328:	e113      	b.n	8003552 <ZbZclParseInteger+0x258>
 800332a:	2000      	movs	r0, #0
 800332c:	f88a 0000 	strb.w	r0, [sl]
 8003330:	4658      	mov	r0, fp
 8003332:	b2c0      	uxtb	r0, r0
 8003334:	2808      	cmp	r0, #8
 8003336:	f000 8097 	beq.w	8003468 <ZbZclParseInteger+0x16e>
 800333a:	2809      	cmp	r0, #9
 800333c:	f000 808a 	beq.w	8003454 <ZbZclParseInteger+0x15a>
 8003340:	280a      	cmp	r0, #10
 8003342:	d07d      	beq.n	8003440 <ZbZclParseInteger+0x146>
 8003344:	280b      	cmp	r0, #11
 8003346:	d071      	beq.n	800342c <ZbZclParseInteger+0x132>
 8003348:	280c      	cmp	r0, #12
 800334a:	d065      	beq.n	8003418 <ZbZclParseInteger+0x11e>
 800334c:	280d      	cmp	r0, #13
 800334e:	d059      	beq.n	8003404 <ZbZclParseInteger+0x10a>
 8003350:	280e      	cmp	r0, #14
 8003352:	d04d      	beq.n	80033f0 <ZbZclParseInteger+0xf6>
 8003354:	280f      	cmp	r0, #15
 8003356:	d046      	beq.n	80033e6 <ZbZclParseInteger+0xec>
 8003358:	2810      	cmp	r0, #16
 800335a:	f000 8085 	beq.w	8003468 <ZbZclParseInteger+0x16e>
 800335e:	2818      	cmp	r0, #24
 8003360:	f000 8082 	beq.w	8003468 <ZbZclParseInteger+0x16e>
 8003364:	2819      	cmp	r0, #25
 8003366:	d075      	beq.n	8003454 <ZbZclParseInteger+0x15a>
 8003368:	281a      	cmp	r0, #26
 800336a:	d069      	beq.n	8003440 <ZbZclParseInteger+0x146>
 800336c:	281b      	cmp	r0, #27
 800336e:	d05d      	beq.n	800342c <ZbZclParseInteger+0x132>
 8003370:	281c      	cmp	r0, #28
 8003372:	d051      	beq.n	8003418 <ZbZclParseInteger+0x11e>
 8003374:	281d      	cmp	r0, #29
 8003376:	d045      	beq.n	8003404 <ZbZclParseInteger+0x10a>
 8003378:	281e      	cmp	r0, #30
 800337a:	d039      	beq.n	80033f0 <ZbZclParseInteger+0xf6>
 800337c:	281f      	cmp	r0, #31
 800337e:	d032      	beq.n	80033e6 <ZbZclParseInteger+0xec>
 8003380:	2820      	cmp	r0, #32
 8003382:	d071      	beq.n	8003468 <ZbZclParseInteger+0x16e>
 8003384:	2821      	cmp	r0, #33	; 0x21
 8003386:	d065      	beq.n	8003454 <ZbZclParseInteger+0x15a>
 8003388:	2822      	cmp	r0, #34	; 0x22
 800338a:	d059      	beq.n	8003440 <ZbZclParseInteger+0x146>
 800338c:	2823      	cmp	r0, #35	; 0x23
 800338e:	d04d      	beq.n	800342c <ZbZclParseInteger+0x132>
 8003390:	2824      	cmp	r0, #36	; 0x24
 8003392:	d041      	beq.n	8003418 <ZbZclParseInteger+0x11e>
 8003394:	2825      	cmp	r0, #37	; 0x25
 8003396:	d035      	beq.n	8003404 <ZbZclParseInteger+0x10a>
 8003398:	2826      	cmp	r0, #38	; 0x26
 800339a:	d029      	beq.n	80033f0 <ZbZclParseInteger+0xf6>
 800339c:	2827      	cmp	r0, #39	; 0x27
 800339e:	d022      	beq.n	80033e6 <ZbZclParseInteger+0xec>
 80033a0:	2828      	cmp	r0, #40	; 0x28
 80033a2:	f000 80ac 	beq.w	80034fe <ZbZclParseInteger+0x204>
 80033a6:	2829      	cmp	r0, #41	; 0x29
 80033a8:	f000 809f 	beq.w	80034ea <ZbZclParseInteger+0x1f0>
 80033ac:	282a      	cmp	r0, #42	; 0x2a
 80033ae:	f000 8092 	beq.w	80034d6 <ZbZclParseInteger+0x1dc>
 80033b2:	282b      	cmp	r0, #43	; 0x2b
 80033b4:	f000 8085 	beq.w	80034c2 <ZbZclParseInteger+0x1c8>
 80033b8:	282c      	cmp	r0, #44	; 0x2c
 80033ba:	d078      	beq.n	80034ae <ZbZclParseInteger+0x1b4>
 80033bc:	282d      	cmp	r0, #45	; 0x2d
 80033be:	d06c      	beq.n	800349a <ZbZclParseInteger+0x1a0>
 80033c0:	282e      	cmp	r0, #46	; 0x2e
 80033c2:	d060      	beq.n	8003486 <ZbZclParseInteger+0x18c>
 80033c4:	282f      	cmp	r0, #47	; 0x2f
 80033c6:	d059      	beq.n	800347c <ZbZclParseInteger+0x182>
 80033c8:	2830      	cmp	r0, #48	; 0x30
 80033ca:	d04d      	beq.n	8003468 <ZbZclParseInteger+0x16e>
 80033cc:	2831      	cmp	r0, #49	; 0x31
 80033ce:	d041      	beq.n	8003454 <ZbZclParseInteger+0x15a>
 80033d0:	28e2      	cmp	r0, #226	; 0xe2
 80033d2:	d02b      	beq.n	800342c <ZbZclParseInteger+0x132>
 80033d4:	28e8      	cmp	r0, #232	; 0xe8
 80033d6:	d03d      	beq.n	8003454 <ZbZclParseInteger+0x15a>
 80033d8:	28e9      	cmp	r0, #233	; 0xe9
 80033da:	d03b      	beq.n	8003454 <ZbZclParseInteger+0x15a>
 80033dc:	28ea      	cmp	r0, #234	; 0xea
 80033de:	d025      	beq.n	800342c <ZbZclParseInteger+0x132>
 80033e0:	28f0      	cmp	r0, #240	; 0xf0
 80033e2:	f040 80b1 	bne.w	8003548 <ZbZclParseInteger+0x24e>
 80033e6:	5df0      	ldrb	r0, [r6, r7]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4304      	orrs	r4, r0
 80033ec:	430d      	orrs	r5, r1
 80033ee:	1c7f      	adds	r7, r7, #1
 80033f0:	5df0      	ldrb	r0, [r6, r7]
 80033f2:	2100      	movs	r1, #0
 80033f4:	003a      	movs	r2, r7
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	00d2      	lsls	r2, r2, #3
 80033fa:	f003 f901 	bl	8006600 <__aeabi_llsl>
 80033fe:	4304      	orrs	r4, r0
 8003400:	430d      	orrs	r5, r1
 8003402:	1c7f      	adds	r7, r7, #1
 8003404:	5df0      	ldrb	r0, [r6, r7]
 8003406:	2100      	movs	r1, #0
 8003408:	003a      	movs	r2, r7
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	00d2      	lsls	r2, r2, #3
 800340e:	f003 f8f7 	bl	8006600 <__aeabi_llsl>
 8003412:	4304      	orrs	r4, r0
 8003414:	430d      	orrs	r5, r1
 8003416:	1c7f      	adds	r7, r7, #1
 8003418:	5df0      	ldrb	r0, [r6, r7]
 800341a:	2100      	movs	r1, #0
 800341c:	003a      	movs	r2, r7
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	00d2      	lsls	r2, r2, #3
 8003422:	f003 f8ed 	bl	8006600 <__aeabi_llsl>
 8003426:	4304      	orrs	r4, r0
 8003428:	430d      	orrs	r5, r1
 800342a:	1c7f      	adds	r7, r7, #1
 800342c:	5df0      	ldrb	r0, [r6, r7]
 800342e:	2100      	movs	r1, #0
 8003430:	003a      	movs	r2, r7
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	00d2      	lsls	r2, r2, #3
 8003436:	f003 f8e3 	bl	8006600 <__aeabi_llsl>
 800343a:	4304      	orrs	r4, r0
 800343c:	430d      	orrs	r5, r1
 800343e:	1c7f      	adds	r7, r7, #1
 8003440:	5df0      	ldrb	r0, [r6, r7]
 8003442:	2100      	movs	r1, #0
 8003444:	003a      	movs	r2, r7
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	00d2      	lsls	r2, r2, #3
 800344a:	f003 f8d9 	bl	8006600 <__aeabi_llsl>
 800344e:	4304      	orrs	r4, r0
 8003450:	430d      	orrs	r5, r1
 8003452:	1c7f      	adds	r7, r7, #1
 8003454:	5df0      	ldrb	r0, [r6, r7]
 8003456:	2100      	movs	r1, #0
 8003458:	003a      	movs	r2, r7
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	00d2      	lsls	r2, r2, #3
 800345e:	f003 f8cf 	bl	8006600 <__aeabi_llsl>
 8003462:	4304      	orrs	r4, r0
 8003464:	430d      	orrs	r5, r1
 8003466:	1c7f      	adds	r7, r7, #1
 8003468:	5df0      	ldrb	r0, [r6, r7]
 800346a:	2100      	movs	r1, #0
 800346c:	003a      	movs	r2, r7
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	00d2      	lsls	r2, r2, #3
 8003472:	f003 f8c5 	bl	8006600 <__aeabi_llsl>
 8003476:	4320      	orrs	r0, r4
 8003478:	4329      	orrs	r1, r5
 800347a:	e06a      	b.n	8003552 <ZbZclParseInteger+0x258>
 800347c:	5df0      	ldrb	r0, [r6, r7]
 800347e:	2100      	movs	r1, #0
 8003480:	4304      	orrs	r4, r0
 8003482:	430d      	orrs	r5, r1
 8003484:	1c7f      	adds	r7, r7, #1
 8003486:	5df0      	ldrb	r0, [r6, r7]
 8003488:	2100      	movs	r1, #0
 800348a:	003a      	movs	r2, r7
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	00d2      	lsls	r2, r2, #3
 8003490:	f003 f8b6 	bl	8006600 <__aeabi_llsl>
 8003494:	4304      	orrs	r4, r0
 8003496:	430d      	orrs	r5, r1
 8003498:	1c7f      	adds	r7, r7, #1
 800349a:	5df0      	ldrb	r0, [r6, r7]
 800349c:	2100      	movs	r1, #0
 800349e:	003a      	movs	r2, r7
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	00d2      	lsls	r2, r2, #3
 80034a4:	f003 f8ac 	bl	8006600 <__aeabi_llsl>
 80034a8:	4304      	orrs	r4, r0
 80034aa:	430d      	orrs	r5, r1
 80034ac:	1c7f      	adds	r7, r7, #1
 80034ae:	5df0      	ldrb	r0, [r6, r7]
 80034b0:	2100      	movs	r1, #0
 80034b2:	003a      	movs	r2, r7
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	00d2      	lsls	r2, r2, #3
 80034b8:	f003 f8a2 	bl	8006600 <__aeabi_llsl>
 80034bc:	4304      	orrs	r4, r0
 80034be:	430d      	orrs	r5, r1
 80034c0:	1c7f      	adds	r7, r7, #1
 80034c2:	5df0      	ldrb	r0, [r6, r7]
 80034c4:	2100      	movs	r1, #0
 80034c6:	003a      	movs	r2, r7
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	00d2      	lsls	r2, r2, #3
 80034cc:	f003 f898 	bl	8006600 <__aeabi_llsl>
 80034d0:	4304      	orrs	r4, r0
 80034d2:	430d      	orrs	r5, r1
 80034d4:	1c7f      	adds	r7, r7, #1
 80034d6:	5df0      	ldrb	r0, [r6, r7]
 80034d8:	2100      	movs	r1, #0
 80034da:	003a      	movs	r2, r7
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	00d2      	lsls	r2, r2, #3
 80034e0:	f003 f88e 	bl	8006600 <__aeabi_llsl>
 80034e4:	4304      	orrs	r4, r0
 80034e6:	430d      	orrs	r5, r1
 80034e8:	1c7f      	adds	r7, r7, #1
 80034ea:	5df0      	ldrb	r0, [r6, r7]
 80034ec:	2100      	movs	r1, #0
 80034ee:	003a      	movs	r2, r7
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	00d2      	lsls	r2, r2, #3
 80034f4:	f003 f884 	bl	8006600 <__aeabi_llsl>
 80034f8:	4304      	orrs	r4, r0
 80034fa:	430d      	orrs	r5, r1
 80034fc:	1c7f      	adds	r7, r7, #1
 80034fe:	5df0      	ldrb	r0, [r6, r7]
 8003500:	2100      	movs	r1, #0
 8003502:	003a      	movs	r2, r7
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	00d2      	lsls	r2, r2, #3
 8003508:	f003 f87a 	bl	8006600 <__aeabi_llsl>
 800350c:	4320      	orrs	r0, r4
 800350e:	4329      	orrs	r1, r5
 8003510:	003a      	movs	r2, r7
 8003512:	1c57      	adds	r7, r2, #1
 8003514:	5cb2      	ldrb	r2, [r6, r2]
 8003516:	0612      	lsls	r2, r2, #24
 8003518:	d515      	bpl.n	8003546 <ZbZclParseInteger+0x24c>
 800351a:	2f08      	cmp	r7, #8
 800351c:	d213      	bcs.n	8003546 <ZbZclParseInteger+0x24c>
 800351e:	0004      	movs	r4, r0
 8003520:	000d      	movs	r5, r1
 8003522:	2001      	movs	r0, #1
 8003524:	2100      	movs	r1, #0
 8003526:	f1d7 0208 	rsbs	r2, r7, #8
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	f003 f867 	bl	8006600 <__aeabi_llsl>
 8003532:	1e40      	subs	r0, r0, #1
 8003534:	f171 0100 	sbcs.w	r1, r1, #0
 8003538:	003a      	movs	r2, r7
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	00d2      	lsls	r2, r2, #3
 800353e:	f003 f85f 	bl	8006600 <__aeabi_llsl>
 8003542:	4320      	orrs	r0, r4
 8003544:	4329      	orrs	r1, r5
 8003546:	e004      	b.n	8003552 <ZbZclParseInteger+0x258>
 8003548:	208d      	movs	r0, #141	; 0x8d
 800354a:	f88a 0000 	strb.w	r0, [sl]
 800354e:	2000      	movs	r0, #0
 8003550:	2100      	movs	r1, #0
 8003552:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003556 <ZbZclAttrIsInteger>:
 8003556:	0001      	movs	r1, r0
 8003558:	2200      	movs	r2, #0
 800355a:	0008      	movs	r0, r1
 800355c:	b2c0      	uxtb	r0, r0
 800355e:	3808      	subs	r0, #8
 8003560:	2808      	cmp	r0, #8
 8003562:	d909      	bls.n	8003578 <ZbZclAttrIsInteger+0x22>
 8003564:	3810      	subs	r0, #16
 8003566:	2819      	cmp	r0, #25
 8003568:	d906      	bls.n	8003578 <ZbZclAttrIsInteger+0x22>
 800356a:	38ca      	subs	r0, #202	; 0xca
 800356c:	d004      	beq.n	8003578 <ZbZclAttrIsInteger+0x22>
 800356e:	1f80      	subs	r0, r0, #6
 8003570:	2802      	cmp	r0, #2
 8003572:	d901      	bls.n	8003578 <ZbZclAttrIsInteger+0x22>
 8003574:	3808      	subs	r0, #8
 8003576:	d101      	bne.n	800357c <ZbZclAttrIsInteger+0x26>
 8003578:	2001      	movs	r0, #1
 800357a:	e000      	b.n	800357e <ZbZclAttrIsInteger+0x28>
 800357c:	2000      	movs	r0, #0
 800357e:	b2c0      	uxtb	r0, r0
 8003580:	4770      	bx	lr

08003582 <ZbZclAttrIntegerRangeCheck>:
 8003582:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003586:	0004      	movs	r4, r0
 8003588:	000d      	movs	r5, r1
 800358a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800358e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8003592:	0010      	movs	r0, r2
 8003594:	b2c0      	uxtb	r0, r0
 8003596:	2810      	cmp	r0, #16
 8003598:	d046      	beq.n	8003628 <ZbZclAttrIntegerRangeCheck+0xa6>
 800359a:	2818      	cmp	r0, #24
 800359c:	d052      	beq.n	8003644 <ZbZclAttrIntegerRangeCheck+0xc2>
 800359e:	2819      	cmp	r0, #25
 80035a0:	d066      	beq.n	8003670 <ZbZclAttrIntegerRangeCheck+0xee>
 80035a2:	281a      	cmp	r0, #26
 80035a4:	d07d      	beq.n	80036a2 <ZbZclAttrIntegerRangeCheck+0x120>
 80035a6:	281b      	cmp	r0, #27
 80035a8:	f000 8096 	beq.w	80036d8 <ZbZclAttrIntegerRangeCheck+0x156>
 80035ac:	281c      	cmp	r0, #28
 80035ae:	f000 80ad 	beq.w	800370c <ZbZclAttrIntegerRangeCheck+0x18a>
 80035b2:	281d      	cmp	r0, #29
 80035b4:	f000 80c1 	beq.w	800373a <ZbZclAttrIntegerRangeCheck+0x1b8>
 80035b8:	281e      	cmp	r0, #30
 80035ba:	f000 80d8 	beq.w	800376e <ZbZclAttrIntegerRangeCheck+0x1ec>
 80035be:	281f      	cmp	r0, #31
 80035c0:	f000 80f1 	beq.w	80037a6 <ZbZclAttrIntegerRangeCheck+0x224>
 80035c4:	2820      	cmp	r0, #32
 80035c6:	d03d      	beq.n	8003644 <ZbZclAttrIntegerRangeCheck+0xc2>
 80035c8:	2821      	cmp	r0, #33	; 0x21
 80035ca:	d051      	beq.n	8003670 <ZbZclAttrIntegerRangeCheck+0xee>
 80035cc:	2822      	cmp	r0, #34	; 0x22
 80035ce:	d068      	beq.n	80036a2 <ZbZclAttrIntegerRangeCheck+0x120>
 80035d0:	2823      	cmp	r0, #35	; 0x23
 80035d2:	f000 8081 	beq.w	80036d8 <ZbZclAttrIntegerRangeCheck+0x156>
 80035d6:	2824      	cmp	r0, #36	; 0x24
 80035d8:	f000 8098 	beq.w	800370c <ZbZclAttrIntegerRangeCheck+0x18a>
 80035dc:	2825      	cmp	r0, #37	; 0x25
 80035de:	f000 80ac 	beq.w	800373a <ZbZclAttrIntegerRangeCheck+0x1b8>
 80035e2:	2826      	cmp	r0, #38	; 0x26
 80035e4:	f000 80c3 	beq.w	800376e <ZbZclAttrIntegerRangeCheck+0x1ec>
 80035e8:	2827      	cmp	r0, #39	; 0x27
 80035ea:	f000 80dc 	beq.w	80037a6 <ZbZclAttrIntegerRangeCheck+0x224>
 80035ee:	2828      	cmp	r0, #40	; 0x28
 80035f0:	f000 80e4 	beq.w	80037bc <ZbZclAttrIntegerRangeCheck+0x23a>
 80035f4:	2829      	cmp	r0, #41	; 0x29
 80035f6:	f000 80fc 	beq.w	80037f2 <ZbZclAttrIntegerRangeCheck+0x270>
 80035fa:	282a      	cmp	r0, #42	; 0x2a
 80035fc:	f000 8113 	beq.w	8003826 <ZbZclAttrIntegerRangeCheck+0x2a4>
 8003600:	282b      	cmp	r0, #43	; 0x2b
 8003602:	f000 812a 	beq.w	800385a <ZbZclAttrIntegerRangeCheck+0x2d8>
 8003606:	282c      	cmp	r0, #44	; 0x2c
 8003608:	f000 8145 	beq.w	8003896 <ZbZclAttrIntegerRangeCheck+0x314>
 800360c:	282d      	cmp	r0, #45	; 0x2d
 800360e:	f000 815b 	beq.w	80038c8 <ZbZclAttrIntegerRangeCheck+0x346>
 8003612:	282e      	cmp	r0, #46	; 0x2e
 8003614:	f000 8170 	beq.w	80038f8 <ZbZclAttrIntegerRangeCheck+0x376>
 8003618:	282f      	cmp	r0, #47	; 0x2f
 800361a:	f000 8185 	beq.w	8003928 <ZbZclAttrIntegerRangeCheck+0x3a6>
 800361e:	2830      	cmp	r0, #48	; 0x30
 8003620:	d010      	beq.n	8003644 <ZbZclAttrIntegerRangeCheck+0xc2>
 8003622:	2831      	cmp	r0, #49	; 0x31
 8003624:	d024      	beq.n	8003670 <ZbZclAttrIntegerRangeCheck+0xee>
 8003626:	e189      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 8003628:	2d00      	cmp	r5, #0
 800362a:	d103      	bne.n	8003634 <ZbZclAttrIntegerRangeCheck+0xb2>
 800362c:	2cff      	cmp	r4, #255	; 0xff
 800362e:	d101      	bne.n	8003634 <ZbZclAttrIntegerRangeCheck+0xb2>
 8003630:	2001      	movs	r0, #1
 8003632:	e19f      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003634:	2d00      	cmp	r5, #0
 8003636:	db04      	blt.n	8003642 <ZbZclAttrIntegerRangeCheck+0xc0>
 8003638:	dc01      	bgt.n	800363e <ZbZclAttrIntegerRangeCheck+0xbc>
 800363a:	2c02      	cmp	r4, #2
 800363c:	d301      	bcc.n	8003642 <ZbZclAttrIntegerRangeCheck+0xc0>
 800363e:	2000      	movs	r0, #0
 8003640:	e198      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003642:	e17b      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 8003644:	2d00      	cmp	r5, #0
 8003646:	d103      	bne.n	8003650 <ZbZclAttrIntegerRangeCheck+0xce>
 8003648:	2cff      	cmp	r4, #255	; 0xff
 800364a:	d101      	bne.n	8003650 <ZbZclAttrIntegerRangeCheck+0xce>
 800364c:	2001      	movs	r0, #1
 800364e:	e191      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003650:	2000      	movs	r0, #0
 8003652:	2100      	movs	r1, #0
 8003654:	428d      	cmp	r5, r1
 8003656:	db08      	blt.n	800366a <ZbZclAttrIntegerRangeCheck+0xe8>
 8003658:	dc01      	bgt.n	800365e <ZbZclAttrIntegerRangeCheck+0xdc>
 800365a:	4284      	cmp	r4, r0
 800365c:	d305      	bcc.n	800366a <ZbZclAttrIntegerRangeCheck+0xe8>
 800365e:	2d00      	cmp	r5, #0
 8003660:	db05      	blt.n	800366e <ZbZclAttrIntegerRangeCheck+0xec>
 8003662:	dc02      	bgt.n	800366a <ZbZclAttrIntegerRangeCheck+0xe8>
 8003664:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003668:	d301      	bcc.n	800366e <ZbZclAttrIntegerRangeCheck+0xec>
 800366a:	2000      	movs	r0, #0
 800366c:	e182      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800366e:	e165      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 8003670:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003674:	2100      	movs	r1, #0
 8003676:	428d      	cmp	r5, r1
 8003678:	d103      	bne.n	8003682 <ZbZclAttrIntegerRangeCheck+0x100>
 800367a:	4284      	cmp	r4, r0
 800367c:	d101      	bne.n	8003682 <ZbZclAttrIntegerRangeCheck+0x100>
 800367e:	2001      	movs	r0, #1
 8003680:	e178      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003682:	2000      	movs	r0, #0
 8003684:	2100      	movs	r1, #0
 8003686:	428d      	cmp	r5, r1
 8003688:	db08      	blt.n	800369c <ZbZclAttrIntegerRangeCheck+0x11a>
 800368a:	dc01      	bgt.n	8003690 <ZbZclAttrIntegerRangeCheck+0x10e>
 800368c:	4284      	cmp	r4, r0
 800368e:	d305      	bcc.n	800369c <ZbZclAttrIntegerRangeCheck+0x11a>
 8003690:	2d00      	cmp	r5, #0
 8003692:	db05      	blt.n	80036a0 <ZbZclAttrIntegerRangeCheck+0x11e>
 8003694:	dc02      	bgt.n	800369c <ZbZclAttrIntegerRangeCheck+0x11a>
 8003696:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800369a:	d301      	bcc.n	80036a0 <ZbZclAttrIntegerRangeCheck+0x11e>
 800369c:	2000      	movs	r0, #0
 800369e:	e169      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80036a0:	e14c      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80036a2:	f07f 407f 	mvns.w	r0, #4278190080	; 0xff000000
 80036a6:	2100      	movs	r1, #0
 80036a8:	428d      	cmp	r5, r1
 80036aa:	d103      	bne.n	80036b4 <ZbZclAttrIntegerRangeCheck+0x132>
 80036ac:	4284      	cmp	r4, r0
 80036ae:	d101      	bne.n	80036b4 <ZbZclAttrIntegerRangeCheck+0x132>
 80036b0:	2001      	movs	r0, #1
 80036b2:	e15f      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80036b4:	2000      	movs	r0, #0
 80036b6:	2100      	movs	r1, #0
 80036b8:	428d      	cmp	r5, r1
 80036ba:	db0a      	blt.n	80036d2 <ZbZclAttrIntegerRangeCheck+0x150>
 80036bc:	dc01      	bgt.n	80036c2 <ZbZclAttrIntegerRangeCheck+0x140>
 80036be:	4284      	cmp	r4, r0
 80036c0:	d307      	bcc.n	80036d2 <ZbZclAttrIntegerRangeCheck+0x150>
 80036c2:	f05f 7080 	movs.w	r0, #16777216	; 0x1000000
 80036c6:	2100      	movs	r1, #0
 80036c8:	428d      	cmp	r5, r1
 80036ca:	db04      	blt.n	80036d6 <ZbZclAttrIntegerRangeCheck+0x154>
 80036cc:	dc01      	bgt.n	80036d2 <ZbZclAttrIntegerRangeCheck+0x150>
 80036ce:	4284      	cmp	r4, r0
 80036d0:	d301      	bcc.n	80036d6 <ZbZclAttrIntegerRangeCheck+0x154>
 80036d2:	2000      	movs	r0, #0
 80036d4:	e14e      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80036d6:	e131      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80036d8:	f05f 30ff 	movs.w	r0, #4294967295
 80036dc:	2100      	movs	r1, #0
 80036de:	428d      	cmp	r5, r1
 80036e0:	d103      	bne.n	80036ea <ZbZclAttrIntegerRangeCheck+0x168>
 80036e2:	4284      	cmp	r4, r0
 80036e4:	d101      	bne.n	80036ea <ZbZclAttrIntegerRangeCheck+0x168>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e144      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80036ea:	2000      	movs	r0, #0
 80036ec:	2100      	movs	r1, #0
 80036ee:	428d      	cmp	r5, r1
 80036f0:	db09      	blt.n	8003706 <ZbZclAttrIntegerRangeCheck+0x184>
 80036f2:	dc01      	bgt.n	80036f8 <ZbZclAttrIntegerRangeCheck+0x176>
 80036f4:	4284      	cmp	r4, r0
 80036f6:	d306      	bcc.n	8003706 <ZbZclAttrIntegerRangeCheck+0x184>
 80036f8:	2000      	movs	r0, #0
 80036fa:	2101      	movs	r1, #1
 80036fc:	428d      	cmp	r5, r1
 80036fe:	db04      	blt.n	800370a <ZbZclAttrIntegerRangeCheck+0x188>
 8003700:	dc01      	bgt.n	8003706 <ZbZclAttrIntegerRangeCheck+0x184>
 8003702:	4284      	cmp	r4, r0
 8003704:	d301      	bcc.n	800370a <ZbZclAttrIntegerRangeCheck+0x188>
 8003706:	2000      	movs	r0, #0
 8003708:	e134      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800370a:	e117      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 800370c:	2dff      	cmp	r5, #255	; 0xff
 800370e:	d104      	bne.n	800371a <ZbZclAttrIntegerRangeCheck+0x198>
 8003710:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003714:	d101      	bne.n	800371a <ZbZclAttrIntegerRangeCheck+0x198>
 8003716:	2001      	movs	r0, #1
 8003718:	e12c      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800371a:	2000      	movs	r0, #0
 800371c:	2100      	movs	r1, #0
 800371e:	428d      	cmp	r5, r1
 8003720:	db08      	blt.n	8003734 <ZbZclAttrIntegerRangeCheck+0x1b2>
 8003722:	dc01      	bgt.n	8003728 <ZbZclAttrIntegerRangeCheck+0x1a6>
 8003724:	4284      	cmp	r4, r0
 8003726:	d305      	bcc.n	8003734 <ZbZclAttrIntegerRangeCheck+0x1b2>
 8003728:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800372c:	db04      	blt.n	8003738 <ZbZclAttrIntegerRangeCheck+0x1b6>
 800372e:	dc01      	bgt.n	8003734 <ZbZclAttrIntegerRangeCheck+0x1b2>
 8003730:	2c00      	cmp	r4, #0
 8003732:	d301      	bcc.n	8003738 <ZbZclAttrIntegerRangeCheck+0x1b6>
 8003734:	2000      	movs	r0, #0
 8003736:	e11d      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003738:	e100      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 800373a:	f05f 30ff 	movs.w	r0, #4294967295
 800373e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003742:	428d      	cmp	r5, r1
 8003744:	d103      	bne.n	800374e <ZbZclAttrIntegerRangeCheck+0x1cc>
 8003746:	4284      	cmp	r4, r0
 8003748:	d101      	bne.n	800374e <ZbZclAttrIntegerRangeCheck+0x1cc>
 800374a:	2001      	movs	r0, #1
 800374c:	e112      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800374e:	2000      	movs	r0, #0
 8003750:	2100      	movs	r1, #0
 8003752:	428d      	cmp	r5, r1
 8003754:	db08      	blt.n	8003768 <ZbZclAttrIntegerRangeCheck+0x1e6>
 8003756:	dc01      	bgt.n	800375c <ZbZclAttrIntegerRangeCheck+0x1da>
 8003758:	4284      	cmp	r4, r0
 800375a:	d305      	bcc.n	8003768 <ZbZclAttrIntegerRangeCheck+0x1e6>
 800375c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8003760:	db04      	blt.n	800376c <ZbZclAttrIntegerRangeCheck+0x1ea>
 8003762:	dc01      	bgt.n	8003768 <ZbZclAttrIntegerRangeCheck+0x1e6>
 8003764:	2c00      	cmp	r4, #0
 8003766:	d301      	bcc.n	800376c <ZbZclAttrIntegerRangeCheck+0x1ea>
 8003768:	2000      	movs	r0, #0
 800376a:	e103      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800376c:	e0e6      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 800376e:	f05f 30ff 	movs.w	r0, #4294967295
 8003772:	f07f 417f 	mvns.w	r1, #4278190080	; 0xff000000
 8003776:	428d      	cmp	r5, r1
 8003778:	d103      	bne.n	8003782 <ZbZclAttrIntegerRangeCheck+0x200>
 800377a:	4284      	cmp	r4, r0
 800377c:	d101      	bne.n	8003782 <ZbZclAttrIntegerRangeCheck+0x200>
 800377e:	2001      	movs	r0, #1
 8003780:	e0f8      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003782:	2000      	movs	r0, #0
 8003784:	2100      	movs	r1, #0
 8003786:	428d      	cmp	r5, r1
 8003788:	db0a      	blt.n	80037a0 <ZbZclAttrIntegerRangeCheck+0x21e>
 800378a:	dc01      	bgt.n	8003790 <ZbZclAttrIntegerRangeCheck+0x20e>
 800378c:	4284      	cmp	r4, r0
 800378e:	d307      	bcc.n	80037a0 <ZbZclAttrIntegerRangeCheck+0x21e>
 8003790:	2000      	movs	r0, #0
 8003792:	f05f 7180 	movs.w	r1, #16777216	; 0x1000000
 8003796:	428d      	cmp	r5, r1
 8003798:	db04      	blt.n	80037a4 <ZbZclAttrIntegerRangeCheck+0x222>
 800379a:	dc01      	bgt.n	80037a0 <ZbZclAttrIntegerRangeCheck+0x21e>
 800379c:	4284      	cmp	r4, r0
 800379e:	d301      	bcc.n	80037a4 <ZbZclAttrIntegerRangeCheck+0x222>
 80037a0:	2000      	movs	r0, #0
 80037a2:	e0e7      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80037a4:	e0ca      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80037a6:	f05f 30ff 	movs.w	r0, #4294967295
 80037aa:	f05f 31ff 	movs.w	r1, #4294967295
 80037ae:	428d      	cmp	r5, r1
 80037b0:	d103      	bne.n	80037ba <ZbZclAttrIntegerRangeCheck+0x238>
 80037b2:	4284      	cmp	r4, r0
 80037b4:	d101      	bne.n	80037ba <ZbZclAttrIntegerRangeCheck+0x238>
 80037b6:	2001      	movs	r0, #1
 80037b8:	e0dc      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80037ba:	e0bf      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80037bc:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 80037c0:	f05f 31ff 	movs.w	r1, #4294967295
 80037c4:	428d      	cmp	r5, r1
 80037c6:	d103      	bne.n	80037d0 <ZbZclAttrIntegerRangeCheck+0x24e>
 80037c8:	4284      	cmp	r4, r0
 80037ca:	d101      	bne.n	80037d0 <ZbZclAttrIntegerRangeCheck+0x24e>
 80037cc:	2001      	movs	r0, #1
 80037ce:	e0d1      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80037d0:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 80037d4:	f05f 31ff 	movs.w	r1, #4294967295
 80037d8:	428d      	cmp	r5, r1
 80037da:	db07      	blt.n	80037ec <ZbZclAttrIntegerRangeCheck+0x26a>
 80037dc:	dc01      	bgt.n	80037e2 <ZbZclAttrIntegerRangeCheck+0x260>
 80037de:	4284      	cmp	r4, r0
 80037e0:	d304      	bcc.n	80037ec <ZbZclAttrIntegerRangeCheck+0x26a>
 80037e2:	2d00      	cmp	r5, #0
 80037e4:	db04      	blt.n	80037f0 <ZbZclAttrIntegerRangeCheck+0x26e>
 80037e6:	dc01      	bgt.n	80037ec <ZbZclAttrIntegerRangeCheck+0x26a>
 80037e8:	2c80      	cmp	r4, #128	; 0x80
 80037ea:	d301      	bcc.n	80037f0 <ZbZclAttrIntegerRangeCheck+0x26e>
 80037ec:	2000      	movs	r0, #0
 80037ee:	e0c1      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80037f0:	e0a4      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80037f2:	4862      	ldr	r0, [pc, #392]	; (800397c <.text_6>)
 80037f4:	f05f 31ff 	movs.w	r1, #4294967295
 80037f8:	428d      	cmp	r5, r1
 80037fa:	d103      	bne.n	8003804 <ZbZclAttrIntegerRangeCheck+0x282>
 80037fc:	4284      	cmp	r4, r0
 80037fe:	d101      	bne.n	8003804 <ZbZclAttrIntegerRangeCheck+0x282>
 8003800:	2001      	movs	r0, #1
 8003802:	e0b7      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003804:	485d      	ldr	r0, [pc, #372]	; (800397c <.text_6>)
 8003806:	f05f 31ff 	movs.w	r1, #4294967295
 800380a:	428d      	cmp	r5, r1
 800380c:	db08      	blt.n	8003820 <ZbZclAttrIntegerRangeCheck+0x29e>
 800380e:	dc01      	bgt.n	8003814 <ZbZclAttrIntegerRangeCheck+0x292>
 8003810:	4284      	cmp	r4, r0
 8003812:	d305      	bcc.n	8003820 <ZbZclAttrIntegerRangeCheck+0x29e>
 8003814:	2d00      	cmp	r5, #0
 8003816:	db05      	blt.n	8003824 <ZbZclAttrIntegerRangeCheck+0x2a2>
 8003818:	dc02      	bgt.n	8003820 <ZbZclAttrIntegerRangeCheck+0x29e>
 800381a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800381e:	d301      	bcc.n	8003824 <ZbZclAttrIntegerRangeCheck+0x2a2>
 8003820:	2000      	movs	r0, #0
 8003822:	e0a7      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003824:	e08a      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 8003826:	4856      	ldr	r0, [pc, #344]	; (8003980 <.text_7>)
 8003828:	f05f 31ff 	movs.w	r1, #4294967295
 800382c:	428d      	cmp	r5, r1
 800382e:	d103      	bne.n	8003838 <ZbZclAttrIntegerRangeCheck+0x2b6>
 8003830:	4284      	cmp	r4, r0
 8003832:	d101      	bne.n	8003838 <ZbZclAttrIntegerRangeCheck+0x2b6>
 8003834:	2001      	movs	r0, #1
 8003836:	e09d      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003838:	4851      	ldr	r0, [pc, #324]	; (8003980 <.text_7>)
 800383a:	f05f 31ff 	movs.w	r1, #4294967295
 800383e:	428d      	cmp	r5, r1
 8003840:	db08      	blt.n	8003854 <ZbZclAttrIntegerRangeCheck+0x2d2>
 8003842:	dc01      	bgt.n	8003848 <ZbZclAttrIntegerRangeCheck+0x2c6>
 8003844:	4284      	cmp	r4, r0
 8003846:	d305      	bcc.n	8003854 <ZbZclAttrIntegerRangeCheck+0x2d2>
 8003848:	2d00      	cmp	r5, #0
 800384a:	db05      	blt.n	8003858 <ZbZclAttrIntegerRangeCheck+0x2d6>
 800384c:	dc02      	bgt.n	8003854 <ZbZclAttrIntegerRangeCheck+0x2d2>
 800384e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8003852:	d301      	bcc.n	8003858 <ZbZclAttrIntegerRangeCheck+0x2d6>
 8003854:	2000      	movs	r0, #0
 8003856:	e08d      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003858:	e070      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 800385a:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 800385e:	f05f 31ff 	movs.w	r1, #4294967295
 8003862:	428d      	cmp	r5, r1
 8003864:	d103      	bne.n	800386e <ZbZclAttrIntegerRangeCheck+0x2ec>
 8003866:	4284      	cmp	r4, r0
 8003868:	d101      	bne.n	800386e <ZbZclAttrIntegerRangeCheck+0x2ec>
 800386a:	2001      	movs	r0, #1
 800386c:	e082      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800386e:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8003872:	f05f 31ff 	movs.w	r1, #4294967295
 8003876:	428d      	cmp	r5, r1
 8003878:	db0a      	blt.n	8003890 <ZbZclAttrIntegerRangeCheck+0x30e>
 800387a:	dc01      	bgt.n	8003880 <ZbZclAttrIntegerRangeCheck+0x2fe>
 800387c:	4284      	cmp	r4, r0
 800387e:	d307      	bcc.n	8003890 <ZbZclAttrIntegerRangeCheck+0x30e>
 8003880:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8003884:	2100      	movs	r1, #0
 8003886:	428d      	cmp	r5, r1
 8003888:	db04      	blt.n	8003894 <ZbZclAttrIntegerRangeCheck+0x312>
 800388a:	dc01      	bgt.n	8003890 <ZbZclAttrIntegerRangeCheck+0x30e>
 800388c:	4284      	cmp	r4, r0
 800388e:	d301      	bcc.n	8003894 <ZbZclAttrIntegerRangeCheck+0x312>
 8003890:	2000      	movs	r0, #0
 8003892:	e06f      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003894:	e052      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 8003896:	2000      	movs	r0, #0
 8003898:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 800389c:	428d      	cmp	r5, r1
 800389e:	d103      	bne.n	80038a8 <ZbZclAttrIntegerRangeCheck+0x326>
 80038a0:	4284      	cmp	r4, r0
 80038a2:	d101      	bne.n	80038a8 <ZbZclAttrIntegerRangeCheck+0x326>
 80038a4:	2001      	movs	r0, #1
 80038a6:	e065      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80038a8:	2000      	movs	r0, #0
 80038aa:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 80038ae:	428d      	cmp	r5, r1
 80038b0:	db07      	blt.n	80038c2 <ZbZclAttrIntegerRangeCheck+0x340>
 80038b2:	dc01      	bgt.n	80038b8 <ZbZclAttrIntegerRangeCheck+0x336>
 80038b4:	4284      	cmp	r4, r0
 80038b6:	d304      	bcc.n	80038c2 <ZbZclAttrIntegerRangeCheck+0x340>
 80038b8:	2d80      	cmp	r5, #128	; 0x80
 80038ba:	db04      	blt.n	80038c6 <ZbZclAttrIntegerRangeCheck+0x344>
 80038bc:	dc01      	bgt.n	80038c2 <ZbZclAttrIntegerRangeCheck+0x340>
 80038be:	2c00      	cmp	r4, #0
 80038c0:	d301      	bcc.n	80038c6 <ZbZclAttrIntegerRangeCheck+0x344>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e056      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80038c6:	e039      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80038c8:	2000      	movs	r0, #0
 80038ca:	492c      	ldr	r1, [pc, #176]	; (800397c <.text_6>)
 80038cc:	428d      	cmp	r5, r1
 80038ce:	d103      	bne.n	80038d8 <ZbZclAttrIntegerRangeCheck+0x356>
 80038d0:	4284      	cmp	r4, r0
 80038d2:	d101      	bne.n	80038d8 <ZbZclAttrIntegerRangeCheck+0x356>
 80038d4:	2001      	movs	r0, #1
 80038d6:	e04d      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80038d8:	2000      	movs	r0, #0
 80038da:	4928      	ldr	r1, [pc, #160]	; (800397c <.text_6>)
 80038dc:	428d      	cmp	r5, r1
 80038de:	db08      	blt.n	80038f2 <ZbZclAttrIntegerRangeCheck+0x370>
 80038e0:	dc01      	bgt.n	80038e6 <ZbZclAttrIntegerRangeCheck+0x364>
 80038e2:	4284      	cmp	r4, r0
 80038e4:	d305      	bcc.n	80038f2 <ZbZclAttrIntegerRangeCheck+0x370>
 80038e6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80038ea:	db04      	blt.n	80038f6 <ZbZclAttrIntegerRangeCheck+0x374>
 80038ec:	dc01      	bgt.n	80038f2 <ZbZclAttrIntegerRangeCheck+0x370>
 80038ee:	2c00      	cmp	r4, #0
 80038f0:	d301      	bcc.n	80038f6 <ZbZclAttrIntegerRangeCheck+0x374>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e03e      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 80038f6:	e021      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 80038f8:	2000      	movs	r0, #0
 80038fa:	4921      	ldr	r1, [pc, #132]	; (8003980 <.text_7>)
 80038fc:	428d      	cmp	r5, r1
 80038fe:	d103      	bne.n	8003908 <ZbZclAttrIntegerRangeCheck+0x386>
 8003900:	4284      	cmp	r4, r0
 8003902:	d101      	bne.n	8003908 <ZbZclAttrIntegerRangeCheck+0x386>
 8003904:	2001      	movs	r0, #1
 8003906:	e035      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003908:	2000      	movs	r0, #0
 800390a:	491d      	ldr	r1, [pc, #116]	; (8003980 <.text_7>)
 800390c:	428d      	cmp	r5, r1
 800390e:	db08      	blt.n	8003922 <ZbZclAttrIntegerRangeCheck+0x3a0>
 8003910:	dc01      	bgt.n	8003916 <ZbZclAttrIntegerRangeCheck+0x394>
 8003912:	4284      	cmp	r4, r0
 8003914:	d305      	bcc.n	8003922 <ZbZclAttrIntegerRangeCheck+0x3a0>
 8003916:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800391a:	db04      	blt.n	8003926 <ZbZclAttrIntegerRangeCheck+0x3a4>
 800391c:	dc01      	bgt.n	8003922 <ZbZclAttrIntegerRangeCheck+0x3a0>
 800391e:	2c00      	cmp	r4, #0
 8003920:	d301      	bcc.n	8003926 <ZbZclAttrIntegerRangeCheck+0x3a4>
 8003922:	2000      	movs	r0, #0
 8003924:	e026      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003926:	e009      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 8003928:	2000      	movs	r0, #0
 800392a:	f05f 4100 	movs.w	r1, #2147483648	; 0x80000000
 800392e:	428d      	cmp	r5, r1
 8003930:	d103      	bne.n	800393a <ZbZclAttrIntegerRangeCheck+0x3b8>
 8003932:	4284      	cmp	r4, r0
 8003934:	d101      	bne.n	800393a <ZbZclAttrIntegerRangeCheck+0x3b8>
 8003936:	2001      	movs	r0, #1
 8003938:	e01c      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 800393a:	e7ff      	b.n	800393c <ZbZclAttrIntegerRangeCheck+0x3ba>
 800393c:	ea56 0008 	orrs.w	r0, r6, r8
 8003940:	ea57 0109 	orrs.w	r1, r7, r9
 8003944:	f05f 0a00 	movs.w	sl, #0
 8003948:	f05f 0b00 	movs.w	fp, #0
 800394c:	4559      	cmp	r1, fp
 800394e:	d103      	bne.n	8003958 <ZbZclAttrIntegerRangeCheck+0x3d6>
 8003950:	4550      	cmp	r0, sl
 8003952:	d101      	bne.n	8003958 <ZbZclAttrIntegerRangeCheck+0x3d6>
 8003954:	2001      	movs	r0, #1
 8003956:	e00d      	b.n	8003974 <ZbZclAttrIntegerRangeCheck+0x3f2>
 8003958:	42bd      	cmp	r5, r7
 800395a:	db09      	blt.n	8003970 <ZbZclAttrIntegerRangeCheck+0x3ee>
 800395c:	dc01      	bgt.n	8003962 <ZbZclAttrIntegerRangeCheck+0x3e0>
 800395e:	42b4      	cmp	r4, r6
 8003960:	d306      	bcc.n	8003970 <ZbZclAttrIntegerRangeCheck+0x3ee>
 8003962:	45a9      	cmp	r9, r5
 8003964:	db04      	blt.n	8003970 <ZbZclAttrIntegerRangeCheck+0x3ee>
 8003966:	dc01      	bgt.n	800396c <ZbZclAttrIntegerRangeCheck+0x3ea>
 8003968:	45a0      	cmp	r8, r4
 800396a:	d301      	bcc.n	8003970 <ZbZclAttrIntegerRangeCheck+0x3ee>
 800396c:	2001      	movs	r0, #1
 800396e:	e000      	b.n	8003972 <ZbZclAttrIntegerRangeCheck+0x3f0>
 8003970:	2000      	movs	r0, #0
 8003972:	b2c0      	uxtb	r0, r0
 8003974:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003978:	4770      	bx	lr
	...

0800397c <.text_6>:
 800397c:	ffff8000 	.word	0xffff8000

08003980 <.text_7>:
 8003980:	ff800000 	.word	0xff800000

08003984 <ZbZclAttrIntegerRead>:
 8003984:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003988:	b085      	sub	sp, #20
 800398a:	0006      	movs	r6, r0
 800398c:	000f      	movs	r7, r1
 800398e:	0015      	movs	r5, r2
 8003990:	001c      	movs	r4, r3
 8003992:	2000      	movs	r0, #0
 8003994:	f88d 0009 	strb.w	r0, [sp, #9]
 8003998:	f05f 0808 	movs.w	r8, #8
 800399c:	f05f 0900 	movs.w	r9, #0
 80039a0:	f10d 0a0c 	add.w	sl, sp, #12
 80039a4:	464a      	mov	r2, r9
 80039a6:	4641      	mov	r1, r8
 80039a8:	4650      	mov	r0, sl
 80039aa:	f002 fd7e 	bl	80064aa <__aeabi_memset>
 80039ae:	2000      	movs	r0, #0
 80039b0:	9001      	str	r0, [sp, #4]
 80039b2:	2008      	movs	r0, #8
 80039b4:	9000      	str	r0, [sp, #0]
 80039b6:	ab03      	add	r3, sp, #12
 80039b8:	f10d 0209 	add.w	r2, sp, #9
 80039bc:	0039      	movs	r1, r7
 80039be:	b289      	uxth	r1, r1
 80039c0:	0030      	movs	r0, r6
 80039c2:	f7fe fcb0 	bl	8002326 <ZbZclAttrRead>
 80039c6:	f88d 0008 	strb.w	r0, [sp, #8]
 80039ca:	2c00      	cmp	r4, #0
 80039cc:	d002      	beq.n	80039d4 <ZbZclAttrIntegerRead+0x50>
 80039ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039d2:	7020      	strb	r0, [r4, #0]
 80039d4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039d8:	2800      	cmp	r0, #0
 80039da:	d002      	beq.n	80039e2 <ZbZclAttrIntegerRead+0x5e>
 80039dc:	2000      	movs	r0, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	e01a      	b.n	8003a18 <ZbZclAttrIntegerRead+0x94>
 80039e2:	aa02      	add	r2, sp, #8
 80039e4:	a903      	add	r1, sp, #12
 80039e6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80039ea:	f7ff fc86 	bl	80032fa <ZbZclParseInteger>
 80039ee:	0002      	movs	r2, r0
 80039f0:	000b      	movs	r3, r1
 80039f2:	2c00      	cmp	r4, #0
 80039f4:	d002      	beq.n	80039fc <ZbZclAttrIntegerRead+0x78>
 80039f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039fa:	7020      	strb	r0, [r4, #0]
 80039fc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d002      	beq.n	8003a0a <ZbZclAttrIntegerRead+0x86>
 8003a04:	2000      	movs	r0, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	e006      	b.n	8003a18 <ZbZclAttrIntegerRead+0x94>
 8003a0a:	2d00      	cmp	r5, #0
 8003a0c:	d002      	beq.n	8003a14 <ZbZclAttrIntegerRead+0x90>
 8003a0e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003a12:	7028      	strb	r0, [r5, #0]
 8003a14:	0010      	movs	r0, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	b006      	add	sp, #24
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a1e <ZbZclAttrIntegerWrite>:
 8003a1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a22:	b087      	sub	sp, #28
 8003a24:	4680      	mov	r8, r0
 8003a26:	4689      	mov	r9, r1
 8003a28:	0014      	movs	r4, r2
 8003a2a:	001d      	movs	r5, r3
 8003a2c:	f1b8 0f00 	cmp.w	r8, #0
 8003a30:	d101      	bne.n	8003a36 <ZbZclAttrIntegerWrite+0x18>
 8003a32:	2087      	movs	r0, #135	; 0x87
 8003a34:	e042      	b.n	8003abc <ZbZclAttrIntegerWrite+0x9e>
 8003a36:	ab04      	add	r3, sp, #16
 8003a38:	f10d 0211 	add.w	r2, sp, #17
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	b289      	uxth	r1, r1
 8003a40:	4640      	mov	r0, r8
 8003a42:	f7ff ff9f 	bl	8003984 <ZbZclAttrIntegerRead>
 8003a46:	0006      	movs	r6, r0
 8003a48:	000f      	movs	r7, r1
 8003a4a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d002      	beq.n	8003a58 <ZbZclAttrIntegerWrite+0x3a>
 8003a52:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003a56:	e031      	b.n	8003abc <ZbZclAttrIntegerWrite+0x9e>
 8003a58:	42af      	cmp	r7, r5
 8003a5a:	d103      	bne.n	8003a64 <ZbZclAttrIntegerWrite+0x46>
 8003a5c:	42a6      	cmp	r6, r4
 8003a5e:	d101      	bne.n	8003a64 <ZbZclAttrIntegerWrite+0x46>
 8003a60:	2000      	movs	r0, #0
 8003a62:	e02b      	b.n	8003abc <ZbZclAttrIntegerWrite+0x9e>
 8003a64:	2000      	movs	r0, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	2100      	movs	r1, #0
 8003a70:	e9cd 0100 	strd	r0, r1, [sp]
 8003a74:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003a78:	0020      	movs	r0, r4
 8003a7a:	0029      	movs	r1, r5
 8003a7c:	f7ff fd81 	bl	8003582 <ZbZclAttrIntegerRangeCheck>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d101      	bne.n	8003a88 <ZbZclAttrIntegerWrite+0x6a>
 8003a84:	2087      	movs	r0, #135	; 0x87
 8003a86:	e019      	b.n	8003abc <ZbZclAttrIntegerWrite+0x9e>
 8003a88:	0022      	movs	r2, r4
 8003a8a:	002b      	movs	r3, r5
 8003a8c:	a805      	add	r0, sp, #20
 8003a8e:	f7fe fb08 	bl	80020a2 <putle64>
 8003a92:	2002      	movs	r0, #2
 8003a94:	9001      	str	r0, [sp, #4]
 8003a96:	2008      	movs	r0, #8
 8003a98:	9000      	str	r0, [sp, #0]
 8003a9a:	ab05      	add	r3, sp, #20
 8003a9c:	464a      	mov	r2, r9
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f7fe fd8e 	bl	80025c4 <ZbZclAttrWrite>
 8003aa8:	f88d 0010 	strb.w	r0, [sp, #16]
 8003aac:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d002      	beq.n	8003aba <ZbZclAttrIntegerWrite+0x9c>
 8003ab4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003ab8:	e000      	b.n	8003abc <ZbZclAttrIntegerWrite+0x9e>
 8003aba:	2000      	movs	r0, #0
 8003abc:	b007      	add	sp, #28
 8003abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003ac2 <ZbZclAttrIntegerIncrement>:
 8003ac2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	468b      	mov	fp, r1
 8003aca:	4690      	mov	r8, r2
 8003acc:	4699      	mov	r9, r3
 8003ace:	f05f 0a00 	movs.w	sl, #0
 8003ad2:	466b      	mov	r3, sp
 8003ad4:	f10d 0201 	add.w	r2, sp, #1
 8003ad8:	4659      	mov	r1, fp
 8003ada:	b289      	uxth	r1, r1
 8003adc:	9802      	ldr	r0, [sp, #8]
 8003ade:	f7ff ff51 	bl	8003984 <ZbZclAttrIntegerRead>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	000b      	movs	r3, r1
 8003ae6:	f89d 0000 	ldrb.w	r0, [sp]
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d002      	beq.n	8003af4 <ZbZclAttrIntegerIncrement+0x32>
 8003aee:	f89d 0000 	ldrb.w	r0, [sp]
 8003af2:	e03a      	b.n	8003b6a <ZbZclAttrIntegerIncrement+0xa8>
 8003af4:	eb12 0408 	adds.w	r4, r2, r8
 8003af8:	eb53 0509 	adcs.w	r5, r3, r9
 8003afc:	0026      	movs	r6, r4
 8003afe:	002f      	movs	r7, r5
 8003b00:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003b04:	f7ff f9a8 	bl	8002e58 <ZbZclAttrTypeLength>
 8003b08:	9001      	str	r0, [sp, #4]
 8003b0a:	9801      	ldr	r0, [sp, #4]
 8003b0c:	2801      	cmp	r0, #1
 8003b0e:	d015      	beq.n	8003b3c <ZbZclAttrIntegerIncrement+0x7a>
 8003b10:	2802      	cmp	r0, #2
 8003b12:	d00b      	beq.n	8003b2c <ZbZclAttrIntegerIncrement+0x6a>
 8003b14:	2804      	cmp	r0, #4
 8003b16:	d002      	beq.n	8003b1e <ZbZclAttrIntegerIncrement+0x5c>
 8003b18:	2808      	cmp	r0, #8
 8003b1a:	d116      	bne.n	8003b4a <ZbZclAttrIntegerIncrement+0x88>
 8003b1c:	e017      	b.n	8003b4e <ZbZclAttrIntegerIncrement+0x8c>
 8003b1e:	f034 0000 	bics.w	r0, r4, #0
 8003b22:	f035 31ff 	bics.w	r1, r5, #4294967295
 8003b26:	0006      	movs	r6, r0
 8003b28:	000f      	movs	r7, r1
 8003b2a:	e010      	b.n	8003b4e <ZbZclAttrIntegerIncrement+0x8c>
 8003b2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b30:	2100      	movs	r1, #0
 8003b32:	4020      	ands	r0, r4
 8003b34:	4029      	ands	r1, r5
 8003b36:	0006      	movs	r6, r0
 8003b38:	000f      	movs	r7, r1
 8003b3a:	e008      	b.n	8003b4e <ZbZclAttrIntegerIncrement+0x8c>
 8003b3c:	f014 00ff 	ands.w	r0, r4, #255	; 0xff
 8003b40:	f015 0100 	ands.w	r1, r5, #0
 8003b44:	0006      	movs	r6, r0
 8003b46:	000f      	movs	r7, r1
 8003b48:	e001      	b.n	8003b4e <ZbZclAttrIntegerIncrement+0x8c>
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	4682      	mov	sl, r0
 8003b4e:	4650      	mov	r0, sl
 8003b50:	b2c0      	uxtb	r0, r0
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d001      	beq.n	8003b5a <ZbZclAttrIntegerIncrement+0x98>
 8003b56:	2086      	movs	r0, #134	; 0x86
 8003b58:	e007      	b.n	8003b6a <ZbZclAttrIntegerIncrement+0xa8>
 8003b5a:	0032      	movs	r2, r6
 8003b5c:	003b      	movs	r3, r7
 8003b5e:	4659      	mov	r1, fp
 8003b60:	b289      	uxth	r1, r1
 8003b62:	9802      	ldr	r0, [sp, #8]
 8003b64:	f7ff ff5b 	bl	8003a1e <ZbZclAttrIntegerWrite>
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b6e <ZbZclAttrEuiRead>:
 8003b6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	0005      	movs	r5, r0
 8003b76:	000e      	movs	r6, r1
 8003b78:	0014      	movs	r4, r2
 8003b7a:	f05f 0808 	movs.w	r8, #8
 8003b7e:	f05f 0900 	movs.w	r9, #0
 8003b82:	af02      	add	r7, sp, #8
 8003b84:	464a      	mov	r2, r9
 8003b86:	4641      	mov	r1, r8
 8003b88:	0038      	movs	r0, r7
 8003b8a:	f002 fc8e 	bl	80064aa <__aeabi_memset>
 8003b8e:	2000      	movs	r0, #0
 8003b90:	9001      	str	r0, [sp, #4]
 8003b92:	2008      	movs	r0, #8
 8003b94:	9000      	str	r0, [sp, #0]
 8003b96:	ab02      	add	r3, sp, #8
 8003b98:	2200      	movs	r2, #0
 8003b9a:	0031      	movs	r1, r6
 8003b9c:	b289      	uxth	r1, r1
 8003b9e:	0028      	movs	r0, r5
 8003ba0:	f7fe fbc1 	bl	8002326 <ZbZclAttrRead>
 8003ba4:	0007      	movs	r7, r0
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d000      	beq.n	8003bac <ZbZclAttrEuiRead+0x3e>
 8003baa:	7027      	strb	r7, [r4, #0]
 8003bac:	0038      	movs	r0, r7
 8003bae:	b2c0      	uxtb	r0, r0
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d002      	beq.n	8003bba <ZbZclAttrEuiRead+0x4c>
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	e002      	b.n	8003bc0 <ZbZclAttrEuiRead+0x52>
 8003bba:	a802      	add	r0, sp, #8
 8003bbc:	f7fe fa1e 	bl	8001ffc <pletoh64>
 8003bc0:	b005      	add	sp, #20
 8003bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003bc6 <ZbZclAttrEuiWrite>:
 8003bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	4680      	mov	r8, r0
 8003bce:	4689      	mov	r9, r1
 8003bd0:	0014      	movs	r4, r2
 8003bd2:	001d      	movs	r5, r3
 8003bd4:	f1b8 0f00 	cmp.w	r8, #0
 8003bd8:	d101      	bne.n	8003bde <ZbZclAttrEuiWrite+0x18>
 8003bda:	2087      	movs	r0, #135	; 0x87
 8003bdc:	e02e      	b.n	8003c3c <ZbZclAttrEuiWrite+0x76>
 8003bde:	aa02      	add	r2, sp, #8
 8003be0:	4649      	mov	r1, r9
 8003be2:	b289      	uxth	r1, r1
 8003be4:	4640      	mov	r0, r8
 8003be6:	f7ff ffc2 	bl	8003b6e <ZbZclAttrEuiRead>
 8003bea:	0006      	movs	r6, r0
 8003bec:	000f      	movs	r7, r1
 8003bee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d002      	beq.n	8003bfc <ZbZclAttrEuiWrite+0x36>
 8003bf6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003bfa:	e01f      	b.n	8003c3c <ZbZclAttrEuiWrite+0x76>
 8003bfc:	42af      	cmp	r7, r5
 8003bfe:	d103      	bne.n	8003c08 <ZbZclAttrEuiWrite+0x42>
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d101      	bne.n	8003c08 <ZbZclAttrEuiWrite+0x42>
 8003c04:	2000      	movs	r0, #0
 8003c06:	e019      	b.n	8003c3c <ZbZclAttrEuiWrite+0x76>
 8003c08:	0022      	movs	r2, r4
 8003c0a:	002b      	movs	r3, r5
 8003c0c:	a803      	add	r0, sp, #12
 8003c0e:	f7fe fa48 	bl	80020a2 <putle64>
 8003c12:	2002      	movs	r0, #2
 8003c14:	9001      	str	r0, [sp, #4]
 8003c16:	2008      	movs	r0, #8
 8003c18:	9000      	str	r0, [sp, #0]
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	464a      	mov	r2, r9
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	2100      	movs	r1, #0
 8003c22:	4640      	mov	r0, r8
 8003c24:	f7fe fcce 	bl	80025c4 <ZbZclAttrWrite>
 8003c28:	f88d 0008 	strb.w	r0, [sp, #8]
 8003c2c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d002      	beq.n	8003c3a <ZbZclAttrEuiWrite+0x74>
 8003c34:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003c38:	e000      	b.n	8003c3c <ZbZclAttrEuiWrite+0x76>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	b005      	add	sp, #20
 8003c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003c44 <ZbZclAttrAppendList>:
 8003c44:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c48:	b087      	sub	sp, #28
 8003c4a:	4680      	mov	r8, r0
 8003c4c:	000f      	movs	r7, r1
 8003c4e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003c52:	9006      	str	r0, [sp, #24]
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	d002      	beq.n	8003c5e <ZbZclAttrAppendList+0x1a>
 8003c58:	9808      	ldr	r0, [sp, #32]
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d101      	bne.n	8003c62 <ZbZclAttrAppendList+0x1e>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e0c7      	b.n	8003df2 <ZbZclAttrAppendList+0x1ae>
 8003c62:	f05f 0900 	movs.w	r9, #0
 8003c66:	9808      	ldr	r0, [sp, #32]
 8003c68:	4581      	cmp	r9, r0
 8003c6a:	f080 80be 	bcs.w	8003dea <ZbZclAttrAppendList+0x1a6>
 8003c6e:	2028      	movs	r0, #40	; 0x28
 8003c70:	fb00 f009 	mul.w	r0, r0, r9
 8003c74:	4438      	add	r0, r7
 8003c76:	7900      	ldrb	r0, [r0, #4]
 8003c78:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8003c7c:	d008      	beq.n	8003c90 <ZbZclAttrAppendList+0x4c>
 8003c7e:	2028      	movs	r0, #40	; 0x28
 8003c80:	fb00 f009 	mul.w	r0, r0, r9
 8003c84:	4438      	add	r0, r7
 8003c86:	68c0      	ldr	r0, [r0, #12]
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d101      	bne.n	8003c90 <ZbZclAttrAppendList+0x4c>
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	e0b0      	b.n	8003df2 <ZbZclAttrAppendList+0x1ae>
 8003c90:	2028      	movs	r0, #40	; 0x28
 8003c92:	fb00 f009 	mul.w	r0, r0, r9
 8003c96:	5a39      	ldrh	r1, [r7, r0]
 8003c98:	4640      	mov	r0, r8
 8003c9a:	f7fe fa40 	bl	800211e <ZbZclAttrFind>
 8003c9e:	0006      	movs	r6, r0
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	d003      	beq.n	8003cac <ZbZclAttrAppendList+0x68>
 8003ca4:	0031      	movs	r1, r6
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f000 f8b6 	bl	8003e18 <ZbZclAttrFreeAttr>
 8003cac:	2518      	movs	r5, #24
 8003cae:	f05f 0a00 	movs.w	sl, #0
 8003cb2:	46eb      	mov	fp, sp
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	0029      	movs	r1, r5
 8003cb8:	4658      	mov	r0, fp
 8003cba:	f002 fbf6 	bl	80064aa <__aeabi_memset>
 8003cbe:	4668      	mov	r0, sp
 8003cc0:	9000      	str	r0, [sp, #0]
 8003cc2:	4668      	mov	r0, sp
 8003cc4:	9001      	str	r0, [sp, #4]
 8003cc6:	2028      	movs	r0, #40	; 0x28
 8003cc8:	fb00 f009 	mul.w	r0, r0, r9
 8003ccc:	4438      	add	r0, r7
 8003cce:	9002      	str	r0, [sp, #8]
 8003cd0:	2028      	movs	r0, #40	; 0x28
 8003cd2:	fb00 f009 	mul.w	r0, r0, r9
 8003cd6:	4438      	add	r0, r7
 8003cd8:	7900      	ldrb	r0, [r0, #4]
 8003cda:	0780      	lsls	r0, r0, #30
 8003cdc:	d50d      	bpl.n	8003cfa <ZbZclAttrAppendList+0xb6>
 8003cde:	2028      	movs	r0, #40	; 0x28
 8003ce0:	fb00 f009 	mul.w	r0, r0, r9
 8003ce4:	4438      	add	r0, r7
 8003ce6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8003ce8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003cec:	2028      	movs	r0, #40	; 0x28
 8003cee:	fb00 f009 	mul.w	r0, r0, r9
 8003cf2:	4438      	add	r0, r7
 8003cf4:	8c00      	ldrh	r0, [r0, #32]
 8003cf6:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003cfa:	2028      	movs	r0, #40	; 0x28
 8003cfc:	fb00 f009 	mul.w	r0, r0, r9
 8003d00:	4438      	add	r0, r7
 8003d02:	7900      	ldrb	r0, [r0, #4]
 8003d04:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 8003d08:	2830      	cmp	r0, #48	; 0x30
 8003d0a:	d108      	bne.n	8003d1e <ZbZclAttrAppendList+0xda>
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	0004      	movs	r4, r0
 8003d10:	2028      	movs	r0, #40	; 0x28
 8003d12:	fb00 f009 	mul.w	r0, r0, r9
 8003d16:	4438      	add	r0, r7
 8003d18:	6880      	ldr	r0, [r0, #8]
 8003d1a:	9004      	str	r0, [sp, #16]
 8003d1c:	e035      	b.n	8003d8a <ZbZclAttrAppendList+0x146>
 8003d1e:	2028      	movs	r0, #40	; 0x28
 8003d20:	fb00 f009 	mul.w	r0, r0, r9
 8003d24:	4438      	add	r0, r7
 8003d26:	6880      	ldr	r0, [r0, #8]
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d01f      	beq.n	8003d6c <ZbZclAttrAppendList+0x128>
 8003d2c:	2028      	movs	r0, #40	; 0x28
 8003d2e:	fb00 f009 	mul.w	r0, r0, r9
 8003d32:	4438      	add	r0, r7
 8003d34:	6880      	ldr	r0, [r0, #8]
 8003d36:	9004      	str	r0, [sp, #16]
 8003d38:	9802      	ldr	r0, [sp, #8]
 8003d3a:	7880      	ldrb	r0, [r0, #2]
 8003d3c:	2841      	cmp	r0, #65	; 0x41
 8003d3e:	d003      	beq.n	8003d48 <ZbZclAttrAppendList+0x104>
 8003d40:	9802      	ldr	r0, [sp, #8]
 8003d42:	7880      	ldrb	r0, [r0, #2]
 8003d44:	2842      	cmp	r0, #66	; 0x42
 8003d46:	d103      	bne.n	8003d50 <ZbZclAttrAppendList+0x10c>
 8003d48:	9804      	ldr	r0, [sp, #16]
 8003d4a:	1c40      	adds	r0, r0, #1
 8003d4c:	9004      	str	r0, [sp, #16]
 8003d4e:	e00a      	b.n	8003d66 <ZbZclAttrAppendList+0x122>
 8003d50:	9802      	ldr	r0, [sp, #8]
 8003d52:	7880      	ldrb	r0, [r0, #2]
 8003d54:	2843      	cmp	r0, #67	; 0x43
 8003d56:	d003      	beq.n	8003d60 <ZbZclAttrAppendList+0x11c>
 8003d58:	9802      	ldr	r0, [sp, #8]
 8003d5a:	7880      	ldrb	r0, [r0, #2]
 8003d5c:	2844      	cmp	r0, #68	; 0x44
 8003d5e:	d102      	bne.n	8003d66 <ZbZclAttrAppendList+0x122>
 8003d60:	9804      	ldr	r0, [sp, #16]
 8003d62:	1c80      	adds	r0, r0, #2
 8003d64:	9004      	str	r0, [sp, #16]
 8003d66:	9804      	ldr	r0, [sp, #16]
 8003d68:	0004      	movs	r4, r0
 8003d6a:	e00e      	b.n	8003d8a <ZbZclAttrAppendList+0x146>
 8003d6c:	2028      	movs	r0, #40	; 0x28
 8003d6e:	fb00 f009 	mul.w	r0, r0, r9
 8003d72:	4438      	add	r0, r7
 8003d74:	7880      	ldrb	r0, [r0, #2]
 8003d76:	f7ff f86f 	bl	8002e58 <ZbZclAttrTypeLength>
 8003d7a:	9004      	str	r0, [sp, #16]
 8003d7c:	9804      	ldr	r0, [sp, #16]
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d101      	bne.n	8003d86 <ZbZclAttrAppendList+0x142>
 8003d82:	208d      	movs	r0, #141	; 0x8d
 8003d84:	e035      	b.n	8003df2 <ZbZclAttrAppendList+0x1ae>
 8003d86:	9804      	ldr	r0, [sp, #16]
 8003d88:	0004      	movs	r4, r0
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	a233      	add	r2, pc, #204	; (adr r2, 8003e5c <.text_6>)
 8003d8e:	f114 0118 	adds.w	r1, r4, #24
 8003d92:	9806      	ldr	r0, [sp, #24]
 8003d94:	f009 fa4e 	bl	800d234 <zb_heap_alloc>
 8003d98:	0005      	movs	r5, r0
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	d101      	bne.n	8003da2 <ZbZclAttrAppendList+0x15e>
 8003d9e:	2089      	movs	r0, #137	; 0x89
 8003da0:	e027      	b.n	8003df2 <ZbZclAttrAppendList+0x1ae>
 8003da2:	2618      	movs	r6, #24
 8003da4:	46ea      	mov	sl, sp
 8003da6:	0032      	movs	r2, r6
 8003da8:	4651      	mov	r1, sl
 8003daa:	0028      	movs	r0, r5
 8003dac:	f00b ff24 	bl	800fbf8 <__aeabi_memcpy>
 8003db0:	2c00      	cmp	r4, #0
 8003db2:	d00a      	beq.n	8003dca <ZbZclAttrAppendList+0x186>
 8003db4:	f115 0018 	adds.w	r0, r5, #24
 8003db8:	60e8      	str	r0, [r5, #12]
 8003dba:	2600      	movs	r6, #0
 8003dbc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8003dc0:	0032      	movs	r2, r6
 8003dc2:	0021      	movs	r1, r4
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f002 fb70 	bl	80064aa <__aeabi_memset>
 8003dca:	0029      	movs	r1, r5
 8003dcc:	4640      	mov	r0, r8
 8003dce:	f7fe f977 	bl	80020c0 <ZbZclAttrAddSorted>
 8003dd2:	68e8      	ldr	r0, [r5, #12]
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d005      	beq.n	8003de4 <ZbZclAttrAppendList+0x1a0>
 8003dd8:	692a      	ldr	r2, [r5, #16]
 8003dda:	68e9      	ldr	r1, [r5, #12]
 8003ddc:	68a8      	ldr	r0, [r5, #8]
 8003dde:	7880      	ldrb	r0, [r0, #2]
 8003de0:	f7fe fdba 	bl	8002958 <ZbZclAttrDefaultValue>
 8003de4:	f119 0901 	adds.w	r9, r9, #1
 8003de8:	e73d      	b.n	8003c66 <ZbZclAttrAppendList+0x22>
 8003dea:	4640      	mov	r0, r8
 8003dec:	f000 ff38 	bl	8004c60 <zcl_reporting_create_default_reports>
 8003df0:	2000      	movs	r0, #0
 8003df2:	b009      	add	sp, #36	; 0x24
 8003df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003df8 <ZbZclAttrCallbackExec>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	0004      	movs	r4, r0
 8003dfc:	000d      	movs	r5, r1
 8003dfe:	0016      	movs	r6, r2
 8003e00:	68a8      	ldr	r0, [r5, #8]
 8003e02:	68c0      	ldr	r0, [r0, #12]
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d005      	beq.n	8003e14 <ZbZclAttrCallbackExec+0x1c>
 8003e08:	0031      	movs	r1, r6
 8003e0a:	0020      	movs	r0, r4
 8003e0c:	68aa      	ldr	r2, [r5, #8]
 8003e0e:	68d2      	ldr	r2, [r2, #12]
 8003e10:	4790      	blx	r2
 8003e12:	e000      	b.n	8003e16 <ZbZclAttrCallbackExec+0x1e>
 8003e14:	2001      	movs	r0, #1
 8003e16:	bd70      	pop	{r4, r5, r6, pc}

08003e18 <ZbZclAttrFreeAttr>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	0004      	movs	r4, r0
 8003e1c:	000d      	movs	r5, r1
 8003e1e:	68a8      	ldr	r0, [r5, #8]
 8003e20:	7900      	ldrb	r0, [r0, #4]
 8003e22:	0780      	lsls	r0, r0, #30
 8003e24:	d50b      	bpl.n	8003e3e <ZbZclAttrFreeAttr+0x26>
 8003e26:	2200      	movs	r2, #0
 8003e28:	68a8      	ldr	r0, [r5, #8]
 8003e2a:	8801      	ldrh	r1, [r0, #0]
 8003e2c:	0020      	movs	r0, r4
 8003e2e:	f000 fdf7 	bl	8004a20 <zcl_cluster_attr_report_delete>
 8003e32:	2201      	movs	r2, #1
 8003e34:	68a8      	ldr	r0, [r5, #8]
 8003e36:	8801      	ldrh	r1, [r0, #0]
 8003e38:	0020      	movs	r0, r4
 8003e3a:	f000 fdf1 	bl	8004a20 <zcl_cluster_attr_report_delete>
 8003e3e:	6868      	ldr	r0, [r5, #4]
 8003e40:	6829      	ldr	r1, [r5, #0]
 8003e42:	6048      	str	r0, [r1, #4]
 8003e44:	6828      	ldr	r0, [r5, #0]
 8003e46:	6869      	ldr	r1, [r5, #4]
 8003e48:	6008      	str	r0, [r1, #0]
 8003e4a:	602d      	str	r5, [r5, #0]
 8003e4c:	606d      	str	r5, [r5, #4]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	a202      	add	r2, pc, #8	; (adr r2, 8003e5c <.text_6>)
 8003e52:	0029      	movs	r1, r5
 8003e54:	68a0      	ldr	r0, [r4, #8]
 8003e56:	f009 f9fc 	bl	800d252 <zb_heap_free>
 8003e5a:	bd31      	pop	{r0, r4, r5, pc}

08003e5c <.text_6>:
 8003e5c:	00000000 	.word	0x00000000

08003e60 <ZbZclAttrFreeList>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	0005      	movs	r5, r0
 8003e64:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e66:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003e6a:	4288      	cmp	r0, r1
 8003e6c:	d001      	beq.n	8003e72 <ZbZclAttrFreeList+0x12>
 8003e6e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003e70:	e000      	b.n	8003e74 <ZbZclAttrFreeList+0x14>
 8003e72:	2400      	movs	r4, #0
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	d005      	beq.n	8003e84 <ZbZclAttrFreeList+0x24>
 8003e78:	0026      	movs	r6, r4
 8003e7a:	0031      	movs	r1, r6
 8003e7c:	0028      	movs	r0, r5
 8003e7e:	f7ff ffcb 	bl	8003e18 <ZbZclAttrFreeAttr>
 8003e82:	e7ef      	b.n	8003e64 <ZbZclAttrFreeList+0x4>
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e88 <zcl_reporting_send_conf>:
 8003e88:	000b      	movs	r3, r1
 8003e8a:	7e02      	ldrb	r2, [r0, #24]
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	d004      	beq.n	8003e9a <zcl_reporting_send_conf+0x12>
 8003e90:	7e02      	ldrb	r2, [r0, #24]
 8003e92:	2aa4      	cmp	r2, #164	; 0xa4
 8003e94:	d001      	beq.n	8003e9a <zcl_reporting_send_conf+0x12>
 8003e96:	7e02      	ldrb	r2, [r0, #24]
 8003e98:	2aa3      	cmp	r2, #163	; 0xa3
 8003e9a:	4770      	bx	lr

08003e9c <report_command_timer>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	0004      	movs	r4, r0
 8003ea0:	000d      	movs	r5, r1
 8003ea2:	f115 0108 	adds.w	r1, r5, #8
 8003ea6:	6828      	ldr	r0, [r5, #0]
 8003ea8:	f000 f84e 	bl	8003f48 <zcl_reporting_send_report>
 8003eac:	6868      	ldr	r0, [r5, #4]
 8003eae:	f008 fe7b 	bl	800cba8 <ZbTimerFree>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	a2cd      	add	r2, pc, #820	; (adr r2, 80041ec <.text_11>)
 8003eb6:	0029      	movs	r1, r5
 8003eb8:	6828      	ldr	r0, [r5, #0]
 8003eba:	6880      	ldr	r0, [r0, #8]
 8003ebc:	f009 f9c9 	bl	800d252 <zb_heap_free>
 8003ec0:	bd31      	pop	{r0, r4, r5, pc}

08003ec2 <zcl_reporting_queue_report>:
 8003ec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec6:	0007      	movs	r7, r0
 8003ec8:	000e      	movs	r6, r1
 8003eca:	0014      	movs	r4, r2
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	d104      	bne.n	8003eda <zcl_reporting_queue_report+0x18>
 8003ed0:	0031      	movs	r1, r6
 8003ed2:	0038      	movs	r0, r7
 8003ed4:	f000 f838 	bl	8003f48 <zcl_reporting_send_report>
 8003ed8:	e033      	b.n	8003f42 <zcl_reporting_queue_report+0x80>
 8003eda:	2300      	movs	r3, #0
 8003edc:	a2c3      	add	r2, pc, #780	; (adr r2, 80041ec <.text_11>)
 8003ede:	2198      	movs	r1, #152	; 0x98
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f009 f9a7 	bl	800d234 <zb_heap_alloc>
 8003ee6:	0005      	movs	r5, r0
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	d101      	bne.n	8003ef0 <zcl_reporting_queue_report+0x2e>
 8003eec:	2000      	movs	r0, #0
 8003eee:	e029      	b.n	8003f44 <zcl_reporting_queue_report+0x82>
 8003ef0:	f05f 0898 	movs.w	r8, #152	; 0x98
 8003ef4:	f05f 0900 	movs.w	r9, #0
 8003ef8:	464a      	mov	r2, r9
 8003efa:	4641      	mov	r1, r8
 8003efc:	0028      	movs	r0, r5
 8003efe:	f002 fad4 	bl	80064aa <__aeabi_memset>
 8003f02:	002a      	movs	r2, r5
 8003f04:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 8004ba0 <.text_28>
 8003f08:	68b8      	ldr	r0, [r7, #8]
 8003f0a:	f008 fdfd 	bl	800cb08 <ZbTimerAlloc>
 8003f0e:	6068      	str	r0, [r5, #4]
 8003f10:	6868      	ldr	r0, [r5, #4]
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d107      	bne.n	8003f26 <zcl_reporting_queue_report+0x64>
 8003f16:	2300      	movs	r3, #0
 8003f18:	a2b4      	add	r2, pc, #720	; (adr r2, 80041ec <.text_11>)
 8003f1a:	0029      	movs	r1, r5
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f009 f998 	bl	800d252 <zb_heap_free>
 8003f22:	2000      	movs	r0, #0
 8003f24:	e00e      	b.n	8003f44 <zcl_reporting_queue_report+0x82>
 8003f26:	602f      	str	r7, [r5, #0]
 8003f28:	f05f 0890 	movs.w	r8, #144	; 0x90
 8003f2c:	f115 0908 	adds.w	r9, r5, #8
 8003f30:	4642      	mov	r2, r8
 8003f32:	0031      	movs	r1, r6
 8003f34:	4648      	mov	r0, r9
 8003f36:	f00b fe5f 	bl	800fbf8 <__aeabi_memcpy>
 8003f3a:	0021      	movs	r1, r4
 8003f3c:	6868      	ldr	r0, [r5, #4]
 8003f3e:	f008 fe65 	bl	800cc0c <ZbTimerReset>
 8003f42:	2001      	movs	r0, #1
 8003f44:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08003f48 <zcl_reporting_send_report>:
 8003f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	b0cc      	sub	sp, #304	; 0x130
 8003f4e:	0005      	movs	r5, r0
 8003f50:	000e      	movs	r6, r1
 8003f52:	2400      	movs	r4, #0
 8003f54:	2000      	movs	r0, #0
 8003f56:	f88d 0004 	strb.w	r0, [sp, #4]
 8003f5a:	8a28      	ldrh	r0, [r5, #16]
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d001      	beq.n	8003f64 <zcl_reporting_send_report+0x1c>
 8003f60:	2001      	movs	r0, #1
 8003f62:	e000      	b.n	8003f66 <zcl_reporting_send_report+0x1e>
 8003f64:	2000      	movs	r0, #0
 8003f66:	f88d 0005 	strb.w	r0, [sp, #5]
 8003f6a:	8a28      	ldrh	r0, [r5, #16]
 8003f6c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8003f70:	7f28      	ldrb	r0, [r5, #28]
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d103      	bne.n	8003f7e <zcl_reporting_send_report+0x36>
 8003f76:	2001      	movs	r0, #1
 8003f78:	f88d 0006 	strb.w	r0, [sp, #6]
 8003f7c:	e002      	b.n	8003f84 <zcl_reporting_send_report+0x3c>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f88d 0006 	strb.w	r0, [sp, #6]
 8003f84:	2001      	movs	r0, #1
 8003f86:	f88d 0007 	strb.w	r0, [sp, #7]
 8003f8a:	f008 ff63 	bl	800ce54 <ZbZclGetNextSeqnum>
 8003f8e:	f88d 000a 	strb.w	r0, [sp, #10]
 8003f92:	200a      	movs	r0, #10
 8003f94:	f88d 000b 	strb.w	r0, [sp, #11]
 8003f98:	2205      	movs	r2, #5
 8003f9a:	a903      	add	r1, sp, #12
 8003f9c:	a801      	add	r0, sp, #4
 8003f9e:	f7fd facb 	bl	8001538 <ZbZclAppendHeader>
 8003fa2:	0007      	movs	r7, r0
 8003fa4:	2f01      	cmp	r7, #1
 8003fa6:	f2c0 8096 	blt.w	80040d6 <zcl_reporting_send_report+0x18e>
 8003faa:	a803      	add	r0, sp, #12
 8003fac:	a91a      	add	r1, sp, #104	; 0x68
 8003fae:	0022      	movs	r2, r4
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8003fb6:	0038      	movs	r0, r7
 8003fb8:	b2c0      	uxtb	r0, r0
 8003fba:	a91a      	add	r1, sp, #104	; 0x68
 8003fbc:	0022      	movs	r2, r4
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003fc4:	6048      	str	r0, [r1, #4]
 8003fc6:	1c64      	adds	r4, r4, #1
 8003fc8:	2000      	movs	r0, #0
 8003fca:	4680      	mov	r8, r0
 8003fcc:	f1b8 0f0c 	cmp.w	r8, #12
 8003fd0:	d231      	bcs.n	8004036 <zcl_reporting_send_report+0xee>
 8003fd2:	200c      	movs	r0, #12
 8003fd4:	fb00 f008 	mul.w	r0, r0, r8
 8003fd8:	4430      	add	r0, r6
 8003fda:	7a00      	ldrb	r0, [r0, #8]
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d02a      	beq.n	8004036 <zcl_reporting_send_report+0xee>
 8003fe0:	200c      	movs	r0, #12
 8003fe2:	fb00 f008 	mul.w	r0, r0, r8
 8003fe6:	4430      	add	r0, r6
 8003fe8:	3009      	adds	r0, #9
 8003fea:	a91a      	add	r1, sp, #104	; 0x68
 8003fec:	0022      	movs	r2, r4
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8003ff4:	2003      	movs	r0, #3
 8003ff6:	a91a      	add	r1, sp, #104	; 0x68
 8003ff8:	0022      	movs	r2, r4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004000:	6048      	str	r0, [r1, #4]
 8004002:	1c64      	adds	r4, r4, #1
 8004004:	200c      	movs	r0, #12
 8004006:	fb00 f008 	mul.w	r0, r0, r8
 800400a:	4430      	add	r0, r6
 800400c:	6840      	ldr	r0, [r0, #4]
 800400e:	a91a      	add	r1, sp, #104	; 0x68
 8004010:	0022      	movs	r2, r4
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8004018:	200c      	movs	r0, #12
 800401a:	fb00 f008 	mul.w	r0, r0, r8
 800401e:	4430      	add	r0, r6
 8004020:	7a00      	ldrb	r0, [r0, #8]
 8004022:	a91a      	add	r1, sp, #104	; 0x68
 8004024:	0022      	movs	r2, r4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800402c:	6048      	str	r0, [r1, #4]
 800402e:	1c64      	adds	r4, r4, #1
 8004030:	f118 0801 	adds.w	r8, r8, #1
 8004034:	e7ca      	b.n	8003fcc <zcl_reporting_send_report+0x84>
 8004036:	2200      	movs	r2, #0
 8004038:	a906      	add	r1, sp, #24
 800403a:	0028      	movs	r0, r5
 800403c:	f7fc fa46 	bl	80004cc <ZbZclClusterInitApsdeReq>
 8004040:	a806      	add	r0, sp, #24
 8004042:	f8df 1b64 	ldr.w	r1, [pc, #2916]	; 8004ba8 <.text_30>
 8004046:	6809      	ldr	r1, [r1, #0]
 8004048:	2210      	movs	r2, #16
 800404a:	f00b fdd5 	bl	800fbf8 <__aeabi_memcpy>
 800404e:	2001      	movs	r0, #1
 8004050:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004054:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8004058:	f050 0004 	orrs.w	r0, r0, #4
 800405c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004060:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8004064:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8004068:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800406c:	7ca8      	ldrb	r0, [r5, #18]
 800406e:	28ab      	cmp	r0, #171	; 0xab
 8004070:	d005      	beq.n	800407e <zcl_reporting_send_report+0x136>
 8004072:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8004076:	f050 0002 	orrs.w	r0, r0, #2
 800407a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800407e:	2001      	movs	r0, #1
 8004080:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8004084:	2000      	movs	r0, #0
 8004086:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 800408a:	a81a      	add	r0, sp, #104	; 0x68
 800408c:	900c      	str	r0, [sp, #48]	; 0x30
 800408e:	0020      	movs	r0, r4
 8004090:	b2c0      	uxtb	r0, r0
 8004092:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8004096:	68ab      	ldr	r3, [r5, #8]
 8004098:	f8df 2b10 	ldr.w	r2, [pc, #2832]	; 8004bac <.text_31>
 800409c:	a906      	add	r1, sp, #24
 800409e:	68a8      	ldr	r0, [r5, #8]
 80040a0:	f008 fb06 	bl	800c6b0 <ZbApsdeDataReqCallback>
 80040a4:	f88d 0000 	strb.w	r0, [sp]
 80040a8:	f89d 0000 	ldrb.w	r0, [sp]
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d012      	beq.n	80040d6 <zcl_reporting_send_report+0x18e>
 80040b0:	f05f 0920 	movs.w	r9, #32
 80040b4:	f05f 0a00 	movs.w	sl, #0
 80040b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80040bc:	4652      	mov	r2, sl
 80040be:	4649      	mov	r1, r9
 80040c0:	4658      	mov	r0, fp
 80040c2:	f002 f9f2 	bl	80064aa <__aeabi_memset>
 80040c6:	f89d 0000 	ldrb.w	r0, [sp]
 80040ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80040ce:	68a9      	ldr	r1, [r5, #8]
 80040d0:	a812      	add	r0, sp, #72	; 0x48
 80040d2:	f7ff fed9 	bl	8003e88 <zcl_reporting_send_conf>
 80040d6:	f05f 0900 	movs.w	r9, #0
 80040da:	f1b9 0f0c 	cmp.w	r9, #12
 80040de:	d21f      	bcs.n	8004120 <zcl_reporting_send_report+0x1d8>
 80040e0:	200c      	movs	r0, #12
 80040e2:	fb00 f009 	mul.w	r0, r0, r9
 80040e6:	4430      	add	r0, r6
 80040e8:	6840      	ldr	r0, [r0, #4]
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d018      	beq.n	8004120 <zcl_reporting_send_report+0x1d8>
 80040ee:	2300      	movs	r3, #0
 80040f0:	a23e      	add	r2, pc, #248	; (adr r2, 80041ec <.text_11>)
 80040f2:	200c      	movs	r0, #12
 80040f4:	fb00 f009 	mul.w	r0, r0, r9
 80040f8:	4430      	add	r0, r6
 80040fa:	6841      	ldr	r1, [r0, #4]
 80040fc:	68a8      	ldr	r0, [r5, #8]
 80040fe:	f009 f8a8 	bl	800d252 <zb_heap_free>
 8004102:	2000      	movs	r0, #0
 8004104:	210c      	movs	r1, #12
 8004106:	fb01 f109 	mul.w	r1, r1, r9
 800410a:	4431      	add	r1, r6
 800410c:	6048      	str	r0, [r1, #4]
 800410e:	2000      	movs	r0, #0
 8004110:	210c      	movs	r1, #12
 8004112:	fb01 f109 	mul.w	r1, r1, r9
 8004116:	4431      	add	r1, r6
 8004118:	7208      	strb	r0, [r1, #8]
 800411a:	f119 0901 	adds.w	r9, r9, #1
 800411e:	e7dc      	b.n	80040da <zcl_reporting_send_report+0x192>
 8004120:	b04d      	add	sp, #308	; 0x134
 8004122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004126 <zcl_report_check_time>:
 8004126:	4281      	cmp	r1, r0
 8004128:	d201      	bcs.n	800412e <zcl_report_check_time+0x8>
 800412a:	0008      	movs	r0, r1
 800412c:	e7ff      	b.n	800412e <zcl_report_check_time+0x8>
 800412e:	4770      	bx	lr

08004130 <zcl_report_kick>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	0004      	movs	r4, r0
 8004134:	000d      	movs	r5, r1
 8004136:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004138:	2800      	cmp	r0, #0
 800413a:	d101      	bne.n	8004140 <zcl_report_kick+0x10>
 800413c:	2000      	movs	r0, #0
 800413e:	e00d      	b.n	800415c <zcl_report_kick+0x2c>
 8004140:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004144:	2800      	cmp	r0, #0
 8004146:	d001      	beq.n	800414c <zcl_report_kick+0x1c>
 8004148:	2001      	movs	r0, #1
 800414a:	e007      	b.n	800415c <zcl_report_kick+0x2c>
 800414c:	2001      	movs	r0, #1
 800414e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8004152:	0029      	movs	r1, r5
 8004154:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004156:	f008 fd59 	bl	800cc0c <ZbTimerReset>
 800415a:	2001      	movs	r0, #1
 800415c:	bd32      	pop	{r1, r4, r5, pc}

0800415e <ZbZclAttrReportKick>:
 800415e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004160:	0004      	movs	r4, r0
 8004162:	000d      	movs	r5, r1
 8004164:	0016      	movs	r6, r2
 8004166:	001f      	movs	r7, r3
 8004168:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800416a:	2800      	cmp	r0, #0
 800416c:	d001      	beq.n	8004172 <ZbZclAttrReportKick+0x14>
 800416e:	2001      	movs	r0, #1
 8004170:	e010      	b.n	8004194 <ZbZclAttrReportKick+0x36>
 8004172:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8004176:	6426      	str	r6, [r4, #64]	; 0x40
 8004178:	6467      	str	r7, [r4, #68]	; 0x44
 800417a:	2100      	movs	r1, #0
 800417c:	0020      	movs	r0, r4
 800417e:	f7ff ffd7 	bl	8004130 <zcl_report_kick>
 8004182:	2800      	cmp	r0, #0
 8004184:	d105      	bne.n	8004192 <ZbZclAttrReportKick+0x34>
 8004186:	2000      	movs	r0, #0
 8004188:	6420      	str	r0, [r4, #64]	; 0x40
 800418a:	2000      	movs	r0, #0
 800418c:	6460      	str	r0, [r4, #68]	; 0x44
 800418e:	2001      	movs	r0, #1
 8004190:	e000      	b.n	8004194 <ZbZclAttrReportKick+0x36>
 8004192:	2000      	movs	r0, #0
 8004194:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004196 <zcl_report_append_attr>:
 8004196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800419a:	0004      	movs	r4, r0
 800419c:	000d      	movs	r5, r1
 800419e:	0016      	movs	r6, r2
 80041a0:	001f      	movs	r7, r3
 80041a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80041aa:	2300      	movs	r3, #0
 80041ac:	a20f      	add	r2, pc, #60	; (adr r2, 80041ec <.text_11>)
 80041ae:	4649      	mov	r1, r9
 80041b0:	0020      	movs	r0, r4
 80041b2:	f009 f83f 	bl	800d234 <zb_heap_alloc>
 80041b6:	6068      	str	r0, [r5, #4]
 80041b8:	6868      	ldr	r0, [r5, #4]
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d101      	bne.n	80041c2 <zcl_report_append_attr+0x2c>
 80041be:	2000      	movs	r0, #0
 80041c0:	e011      	b.n	80041e6 <zcl_report_append_attr+0x50>
 80041c2:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80041c6:	464a      	mov	r2, r9
 80041c8:	4641      	mov	r1, r8
 80041ca:	4650      	mov	r0, sl
 80041cc:	f00b fd14 	bl	800fbf8 <__aeabi_memcpy>
 80041d0:	f885 9008 	strb.w	r9, [r5, #8]
 80041d4:	802e      	strh	r6, [r5, #0]
 80041d6:	0031      	movs	r1, r6
 80041d8:	b289      	uxth	r1, r1
 80041da:	f115 0009 	adds.w	r0, r5, #9
 80041de:	f7fd ff1b 	bl	8002018 <putle16>
 80041e2:	72ef      	strb	r7, [r5, #11]
 80041e4:	2001      	movs	r0, #1
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080041ec <.text_11>:
 80041ec:	00000000 	.word	0x00000000

080041f0 <zcl_cluster_report_check_timeout>:
 80041f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f4:	0006      	movs	r6, r0
 80041f6:	000f      	movs	r7, r1
 80041f8:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80041fa:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 80041fe:	4288      	cmp	r0, r1
 8004200:	d001      	beq.n	8004206 <zcl_cluster_report_check_timeout+0x16>
 8004202:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8004204:	e000      	b.n	8004208 <zcl_cluster_report_check_timeout+0x18>
 8004206:	2000      	movs	r0, #0
 8004208:	2800      	cmp	r0, #0
 800420a:	d101      	bne.n	8004210 <zcl_cluster_report_check_timeout+0x20>
 800420c:	2000      	movs	r0, #0
 800420e:	e042      	b.n	8004296 <zcl_cluster_report_check_timeout+0xa6>
 8004210:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8004212:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8004216:	4288      	cmp	r0, r1
 8004218:	d001      	beq.n	800421e <zcl_cluster_report_check_timeout+0x2e>
 800421a:	6b35      	ldr	r5, [r6, #48]	; 0x30
 800421c:	e000      	b.n	8004220 <zcl_cluster_report_check_timeout+0x30>
 800421e:	2500      	movs	r5, #0
 8004220:	2d00      	cmp	r5, #0
 8004222:	d037      	beq.n	8004294 <zcl_cluster_report_check_timeout+0xa4>
 8004224:	46a8      	mov	r8, r5
 8004226:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 800422a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800422e:	4288      	cmp	r0, r1
 8004230:	d027      	beq.n	8004282 <zcl_cluster_report_check_timeout+0x92>
 8004232:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8004236:	2800      	cmp	r0, #0
 8004238:	d00e      	beq.n	8004258 <zcl_cluster_report_check_timeout+0x68>
 800423a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800423e:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8004242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004246:	fb00 1909 	mla	r9, r0, r9, r1
 800424a:	4649      	mov	r1, r9
 800424c:	0038      	movs	r0, r7
 800424e:	f008 fd0b 	bl	800cc68 <ZbTimeoutRemaining>
 8004252:	0004      	movs	r4, r0
 8004254:	2c00      	cmp	r4, #0
 8004256:	d114      	bne.n	8004282 <zcl_cluster_report_check_timeout+0x92>
 8004258:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 800425c:	2800      	cmp	r0, #0
 800425e:	d010      	beq.n	8004282 <zcl_cluster_report_check_timeout+0x92>
 8004260:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004264:	f8b8 9022 	ldrh.w	r9, [r8, #34]	; 0x22
 8004268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800426c:	fb00 1909 	mla	r9, r0, r9, r1
 8004270:	4649      	mov	r1, r9
 8004272:	0038      	movs	r0, r7
 8004274:	f008 fcf8 	bl	800cc68 <ZbTimeoutRemaining>
 8004278:	0004      	movs	r4, r0
 800427a:	2c00      	cmp	r4, #0
 800427c:	d101      	bne.n	8004282 <zcl_cluster_report_check_timeout+0x92>
 800427e:	2001      	movs	r0, #1
 8004280:	e009      	b.n	8004296 <zcl_cluster_report_check_timeout+0xa6>
 8004282:	6828      	ldr	r0, [r5, #0]
 8004284:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8004288:	4288      	cmp	r0, r1
 800428a:	d001      	beq.n	8004290 <zcl_cluster_report_check_timeout+0xa0>
 800428c:	682d      	ldr	r5, [r5, #0]
 800428e:	e7c7      	b.n	8004220 <zcl_cluster_report_check_timeout+0x30>
 8004290:	2500      	movs	r5, #0
 8004292:	e7c5      	b.n	8004220 <zcl_cluster_report_check_timeout+0x30>
 8004294:	2000      	movs	r0, #0
 8004296:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

0800429c <zcl_cluster_reports_timer>:
 800429c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	b081      	sub	sp, #4
 80042a2:	ed2d 8b04 	vpush	{d8-d9}
 80042a6:	b0b0      	sub	sp, #192	; 0xc0
 80042a8:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80042aa:	9003      	str	r0, [sp, #12]
 80042ac:	2000      	movs	r0, #0
 80042ae:	9005      	str	r0, [sp, #20]
 80042b0:	2000      	movs	r0, #0
 80042b2:	9007      	str	r0, [sp, #28]
 80042b4:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8004bb0 <.text_32>
 80042b8:	9006      	str	r0, [sp, #24]
 80042ba:	2000      	movs	r0, #0
 80042bc:	f88d 000b 	strb.w	r0, [sp, #11]
 80042c0:	f05f 0b00 	movs.w	fp, #0
 80042c4:	9803      	ldr	r0, [sp, #12]
 80042c6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80042ca:	f88d 0008 	strb.w	r0, [sp, #8]
 80042ce:	2000      	movs	r0, #0
 80042d0:	f88d 0010 	strb.w	r0, [sp, #16]
 80042d4:	2000      	movs	r0, #0
 80042d6:	9903      	ldr	r1, [sp, #12]
 80042d8:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 80042dc:	2000      	movs	r0, #0
 80042de:	9903      	ldr	r1, [sp, #12]
 80042e0:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80042e4:	9803      	ldr	r0, [sp, #12]
 80042e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80042e8:	9903      	ldr	r1, [sp, #12]
 80042ea:	3130      	adds	r1, #48	; 0x30
 80042ec:	4288      	cmp	r0, r1
 80042ee:	d002      	beq.n	80042f6 <zcl_cluster_reports_timer+0x5a>
 80042f0:	9803      	ldr	r0, [sp, #12]
 80042f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80042f4:	e000      	b.n	80042f8 <zcl_cluster_reports_timer+0x5c>
 80042f6:	2000      	movs	r0, #0
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f000 81f9 	beq.w	80046f0 <zcl_cluster_reports_timer+0x454>
 80042fe:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8004300:	f008 fd31 	bl	800cd66 <ZbZclUptime>
 8004304:	9009      	str	r0, [sp, #36]	; 0x24
 8004306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004308:	9803      	ldr	r0, [sp, #12]
 800430a:	f7ff ff71 	bl	80041f0 <zcl_cluster_report_check_timeout>
 800430e:	2800      	cmp	r0, #0
 8004310:	d004      	beq.n	800431c <zcl_cluster_reports_timer+0x80>
 8004312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004314:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
 8004318:	900b      	str	r0, [sp, #44]	; 0x2c
 800431a:	e001      	b.n	8004320 <zcl_cluster_reports_timer+0x84>
 800431c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800431e:	900b      	str	r0, [sp, #44]	; 0x2c
 8004320:	2690      	movs	r6, #144	; 0x90
 8004322:	2700      	movs	r7, #0
 8004324:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004328:	003a      	movs	r2, r7
 800432a:	0031      	movs	r1, r6
 800432c:	4640      	mov	r0, r8
 800432e:	f002 f8bc 	bl	80064aa <__aeabi_memset>
 8004332:	2000      	movs	r0, #0
 8004334:	4682      	mov	sl, r0
 8004336:	2000      	movs	r0, #0
 8004338:	f88d 0009 	strb.w	r0, [sp, #9]
 800433c:	9803      	ldr	r0, [sp, #12]
 800433e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004340:	9903      	ldr	r1, [sp, #12]
 8004342:	3130      	adds	r1, #48	; 0x30
 8004344:	4288      	cmp	r0, r1
 8004346:	d002      	beq.n	800434e <zcl_cluster_reports_timer+0xb2>
 8004348:	9803      	ldr	r0, [sp, #12]
 800434a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800434c:	e000      	b.n	8004350 <zcl_cluster_reports_timer+0xb4>
 800434e:	2500      	movs	r5, #0
 8004350:	2d00      	cmp	r5, #0
 8004352:	f000 817d 	beq.w	8004650 <zcl_cluster_reports_timer+0x3b4>
 8004356:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800435a:	f88d 000a 	strb.w	r0, [sp, #10]
 800435e:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 8004bb0 <.text_32>
 8004362:	900a      	str	r0, [sp, #40]	; 0x28
 8004364:	002c      	movs	r4, r5
 8004366:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004368:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800436c:	4288      	cmp	r0, r1
 800436e:	f000 8166 	beq.w	800463e <zcl_cluster_reports_timer+0x3a2>
 8004372:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004376:	2800      	cmp	r0, #0
 8004378:	d116      	bne.n	80043a8 <zcl_cluster_reports_timer+0x10c>
 800437a:	8c20      	ldrh	r0, [r4, #32]
 800437c:	2800      	cmp	r0, #0
 800437e:	d013      	beq.n	80043a8 <zcl_cluster_reports_timer+0x10c>
 8004380:	6921      	ldr	r1, [r4, #16]
 8004382:	8c26      	ldrh	r6, [r4, #32]
 8004384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004388:	fb00 1606 	mla	r6, r0, r6, r1
 800438c:	0031      	movs	r1, r6
 800438e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004390:	f008 fc6a 	bl	800cc68 <ZbTimeoutRemaining>
 8004394:	9008      	str	r0, [sp, #32]
 8004396:	9808      	ldr	r0, [sp, #32]
 8004398:	2800      	cmp	r0, #0
 800439a:	d005      	beq.n	80043a8 <zcl_cluster_reports_timer+0x10c>
 800439c:	9908      	ldr	r1, [sp, #32]
 800439e:	9806      	ldr	r0, [sp, #24]
 80043a0:	f7ff fec1 	bl	8004126 <zcl_report_check_time>
 80043a4:	9006      	str	r0, [sp, #24]
 80043a6:	e14a      	b.n	800463e <zcl_cluster_reports_timer+0x3a2>
 80043a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d115      	bne.n	80043dc <zcl_cluster_reports_timer+0x140>
 80043b0:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d012      	beq.n	80043dc <zcl_cluster_reports_timer+0x140>
 80043b6:	6921      	ldr	r1, [r4, #16]
 80043b8:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 80043ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043be:	fb00 1606 	mla	r6, r0, r6, r1
 80043c2:	0031      	movs	r1, r6
 80043c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043c6:	f008 fc4f 	bl	800cc68 <ZbTimeoutRemaining>
 80043ca:	900a      	str	r0, [sp, #40]	; 0x28
 80043cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d104      	bne.n	80043dc <zcl_cluster_reports_timer+0x140>
 80043d2:	2001      	movs	r0, #1
 80043d4:	f88d 000a 	strb.w	r0, [sp, #10]
 80043d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043da:	6120      	str	r0, [r4, #16]
 80043dc:	9803      	ldr	r0, [sp, #12]
 80043de:	8982      	ldrh	r2, [r0, #12]
 80043e0:	9803      	ldr	r0, [sp, #12]
 80043e2:	7b81      	ldrb	r1, [r0, #14]
 80043e4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80043e6:	f008 fa90 	bl	800c90a <ZbApsBindSrcExists>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d105      	bne.n	80043fa <zcl_cluster_reports_timer+0x15e>
 80043ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043f0:	9806      	ldr	r0, [sp, #24]
 80043f2:	f7ff fe98 	bl	8004126 <zcl_report_check_time>
 80043f6:	9006      	str	r0, [sp, #24]
 80043f8:	e121      	b.n	800463e <zcl_cluster_reports_timer+0x3a2>
 80043fa:	9805      	ldr	r0, [sp, #20]
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d10b      	bne.n	8004418 <zcl_cluster_reports_timer+0x17c>
 8004400:	2300      	movs	r3, #0
 8004402:	a28b      	add	r2, pc, #556	; (adr r2, 8004630 <zcl_cluster_reports_timer+0x394>)
 8004404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004408:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800440a:	f008 ff13 	bl	800d234 <zb_heap_alloc>
 800440e:	9005      	str	r0, [sp, #20]
 8004410:	9805      	ldr	r0, [sp, #20]
 8004412:	2800      	cmp	r0, #0
 8004414:	f000 816c 	beq.w	80046f0 <zcl_cluster_reports_timer+0x454>
 8004418:	2000      	movs	r0, #0
 800441a:	9001      	str	r0, [sp, #4]
 800441c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004420:	9000      	str	r0, [sp, #0]
 8004422:	9b05      	ldr	r3, [sp, #20]
 8004424:	f10d 0211 	add.w	r2, sp, #17
 8004428:	89a1      	ldrh	r1, [r4, #12]
 800442a:	9803      	ldr	r0, [sp, #12]
 800442c:	f7fd ff7b 	bl	8002326 <ZbZclAttrRead>
 8004430:	2800      	cmp	r0, #0
 8004432:	d003      	beq.n	800443c <zcl_cluster_reports_timer+0x1a0>
 8004434:	0020      	movs	r0, r4
 8004436:	f000 fb08 	bl	8004a4a <zcl_reporting_disable>
 800443a:	e097      	b.n	800456c <zcl_cluster_reports_timer+0x2d0>
 800443c:	2300      	movs	r3, #0
 800443e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004442:	9905      	ldr	r1, [sp, #20]
 8004444:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8004448:	f7fe fd91 	bl	8002f6e <ZbZclAttrParseLength>
 800444c:	9007      	str	r0, [sp, #28]
 800444e:	9807      	ldr	r0, [sp, #28]
 8004450:	2800      	cmp	r0, #0
 8004452:	d503      	bpl.n	800445c <zcl_cluster_reports_timer+0x1c0>
 8004454:	0020      	movs	r0, r4
 8004456:	f000 faf8 	bl	8004a4a <zcl_reporting_disable>
 800445a:	e087      	b.n	800456c <zcl_cluster_reports_timer+0x2d0>
 800445c:	9807      	ldr	r0, [sp, #28]
 800445e:	2800      	cmp	r0, #0
 8004460:	f000 8084 	beq.w	800456c <zcl_cluster_reports_timer+0x2d0>
 8004464:	7ba0      	ldrb	r0, [r4, #14]
 8004466:	2838      	cmp	r0, #56	; 0x38
 8004468:	db37      	blt.n	80044da <zcl_cluster_reports_timer+0x23e>
 800446a:	7ba0      	ldrb	r0, [r4, #14]
 800446c:	283b      	cmp	r0, #59	; 0x3b
 800446e:	da34      	bge.n	80044da <zcl_cluster_reports_timer+0x23e>
 8004470:	f10d 0201 	add.w	r2, sp, #1
 8004474:	9905      	ldr	r1, [sp, #20]
 8004476:	7ba0      	ldrb	r0, [r4, #14]
 8004478:	f001 fcdd 	bl	8005e36 <ZbZclParseFloat>
 800447c:	eeb0 8a40 	vmov.f32	s16, s0
 8004480:	eef0 8a60 	vmov.f32	s17, s1
 8004484:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004488:	2800      	cmp	r0, #0
 800448a:	d003      	beq.n	8004494 <zcl_cluster_reports_timer+0x1f8>
 800448c:	0020      	movs	r0, r4
 800448e:	f000 fadc 	bl	8004a4a <zcl_reporting_disable>
 8004492:	e06b      	b.n	800456c <zcl_cluster_reports_timer+0x2d0>
 8004494:	ec51 0b18 	vmov	r0, r1, d8
 8004498:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800449c:	f002 f8c0 	bl	8006620 <__aeabi_dsub>
 80044a0:	ec41 0b19 	vmov	d9, r0, r1
 80044a4:	ec51 0b19 	vmov	r0, r1, d9
 80044a8:	2200      	movs	r2, #0
 80044aa:	2300      	movs	r3, #0
 80044ac:	f002 fcd0 	bl	8006e50 <__aeabi_cdcmpeq>
 80044b0:	d205      	bcs.n	80044be <zcl_cluster_reports_timer+0x222>
 80044b2:	ec51 0b19 	vmov	r0, r1, d9
 80044b6:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80044ba:	ec41 0b19 	vmov	d9, r0, r1
 80044be:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d106      	bne.n	80044d4 <zcl_cluster_reports_timer+0x238>
 80044c6:	ec51 0b19 	vmov	r0, r1, d9
 80044ca:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80044ce:	f002 fcbf 	bl	8006e50 <__aeabi_cdcmpeq>
 80044d2:	d34b      	bcc.n	800456c <zcl_cluster_reports_timer+0x2d0>
 80044d4:	ed84 8b06 	vstr	d8, [r4, #24]
 80044d8:	e043      	b.n	8004562 <zcl_cluster_reports_timer+0x2c6>
 80044da:	7ba0      	ldrb	r0, [r4, #14]
 80044dc:	f7fe fdf8 	bl	80030d0 <ZbZclAttrIsAnalog>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d02e      	beq.n	8004542 <zcl_cluster_reports_timer+0x2a6>
 80044e4:	466a      	mov	r2, sp
 80044e6:	9905      	ldr	r1, [sp, #20]
 80044e8:	7ba0      	ldrb	r0, [r4, #14]
 80044ea:	f7fe ff06 	bl	80032fa <ZbZclParseInteger>
 80044ee:	4680      	mov	r8, r0
 80044f0:	4689      	mov	r9, r1
 80044f2:	f89d 0000 	ldrb.w	r0, [sp]
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d003      	beq.n	8004502 <zcl_cluster_reports_timer+0x266>
 80044fa:	0020      	movs	r0, r4
 80044fc:	f000 faa5 	bl	8004a4a <zcl_reporting_disable>
 8004500:	e034      	b.n	800456c <zcl_cluster_reports_timer+0x2d0>
 8004502:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8004506:	ebb8 0600 	subs.w	r6, r8, r0
 800450a:	eb79 0701 	sbcs.w	r7, r9, r1
 800450e:	2000      	movs	r0, #0
 8004510:	2100      	movs	r1, #0
 8004512:	428f      	cmp	r7, r1
 8004514:	dc05      	bgt.n	8004522 <zcl_cluster_reports_timer+0x286>
 8004516:	db01      	blt.n	800451c <zcl_cluster_reports_timer+0x280>
 8004518:	4286      	cmp	r6, r0
 800451a:	d202      	bcs.n	8004522 <zcl_cluster_reports_timer+0x286>
 800451c:	4276      	negs	r6, r6
 800451e:	eb77 0747 	sbcs.w	r7, r7, r7, lsl #1
 8004522:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004526:	2800      	cmp	r0, #0
 8004528:	d108      	bne.n	800453c <zcl_cluster_reports_timer+0x2a0>
 800452a:	0030      	movs	r0, r6
 800452c:	0039      	movs	r1, r7
 800452e:	f002 fa01 	bl	8006934 <__aeabi_l2d>
 8004532:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004536:	f002 fc8b 	bl	8006e50 <__aeabi_cdcmpeq>
 800453a:	d317      	bcc.n	800456c <zcl_cluster_reports_timer+0x2d0>
 800453c:	e9c4 8906 	strd	r8, r9, [r4, #24]
 8004540:	e00f      	b.n	8004562 <zcl_cluster_reports_timer+0x2c6>
 8004542:	9a07      	ldr	r2, [sp, #28]
 8004544:	9905      	ldr	r1, [sp, #20]
 8004546:	2000      	movs	r0, #0
 8004548:	f008 fe92 	bl	800d270 <WpanCrc>
 800454c:	0001      	movs	r1, r0
 800454e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004552:	2800      	cmp	r0, #0
 8004554:	d104      	bne.n	8004560 <zcl_cluster_reports_timer+0x2c4>
 8004556:	8b20      	ldrh	r0, [r4, #24]
 8004558:	000a      	movs	r2, r1
 800455a:	b292      	uxth	r2, r2
 800455c:	4290      	cmp	r0, r2
 800455e:	d005      	beq.n	800456c <zcl_cluster_reports_timer+0x2d0>
 8004560:	8321      	strh	r1, [r4, #24]
 8004562:	2001      	movs	r0, #1
 8004564:	f88d 000a 	strb.w	r0, [sp, #10]
 8004568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456a:	6120      	str	r0, [r4, #16]
 800456c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004570:	2800      	cmp	r0, #0
 8004572:	d05f      	beq.n	8004634 <zcl_cluster_reports_timer+0x398>
 8004574:	9807      	ldr	r0, [sp, #28]
 8004576:	2800      	cmp	r0, #0
 8004578:	d05c      	beq.n	8004634 <zcl_cluster_reports_timer+0x398>
 800457a:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800457e:	1c40      	adds	r0, r0, #1
 8004580:	f88d 000b 	strb.w	r0, [sp, #11]
 8004584:	4650      	mov	r0, sl
 8004586:	b2c0      	uxtb	r0, r0
 8004588:	280c      	cmp	r0, #12
 800458a:	d007      	beq.n	800459c <zcl_cluster_reports_timer+0x300>
 800458c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004590:	9907      	ldr	r1, [sp, #28]
 8004592:	fa51 f080 	uxtab	r0, r1, r0
 8004596:	1cc0      	adds	r0, r0, #3
 8004598:	2837      	cmp	r0, #55	; 0x37
 800459a:	d314      	bcc.n	80045c6 <zcl_cluster_reports_timer+0x32a>
 800459c:	465a      	mov	r2, fp
 800459e:	a90c      	add	r1, sp, #48	; 0x30
 80045a0:	9803      	ldr	r0, [sp, #12]
 80045a2:	f7ff fc8e 	bl	8003ec2 <zcl_reporting_queue_report>
 80045a6:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 80045aa:	2690      	movs	r6, #144	; 0x90
 80045ac:	2700      	movs	r7, #0
 80045ae:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80045b2:	003a      	movs	r2, r7
 80045b4:	0031      	movs	r1, r6
 80045b6:	4640      	mov	r0, r8
 80045b8:	f001 ff77 	bl	80064aa <__aeabi_memset>
 80045bc:	2000      	movs	r0, #0
 80045be:	4682      	mov	sl, r0
 80045c0:	2000      	movs	r0, #0
 80045c2:	f88d 0009 	strb.w	r0, [sp, #9]
 80045c6:	9807      	ldr	r0, [sp, #28]
 80045c8:	9001      	str	r0, [sp, #4]
 80045ca:	9805      	ldr	r0, [sp, #20]
 80045cc:	9000      	str	r0, [sp, #0]
 80045ce:	7ba3      	ldrb	r3, [r4, #14]
 80045d0:	89a2      	ldrh	r2, [r4, #12]
 80045d2:	a90c      	add	r1, sp, #48	; 0x30
 80045d4:	4656      	mov	r6, sl
 80045d6:	b2f6      	uxtb	r6, r6
 80045d8:	200c      	movs	r0, #12
 80045da:	4346      	muls	r6, r0
 80045dc:	4431      	add	r1, r6
 80045de:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80045e0:	f7ff fdd9 	bl	8004196 <zcl_report_append_attr>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d02a      	beq.n	800463e <zcl_cluster_reports_timer+0x3a2>
 80045e8:	f11a 0a01 	adds.w	sl, sl, #1
 80045ec:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80045f0:	9907      	ldr	r1, [sp, #28]
 80045f2:	1cc9      	adds	r1, r1, #3
 80045f4:	1808      	adds	r0, r1, r0
 80045f6:	f88d 0009 	strb.w	r0, [sp, #9]
 80045fa:	8c20      	ldrh	r0, [r4, #32]
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d005      	beq.n	800460c <zcl_cluster_reports_timer+0x370>
 8004600:	8c21      	ldrh	r1, [r4, #32]
 8004602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004606:	4341      	muls	r1, r0
 8004608:	9108      	str	r1, [sp, #32]
 800460a:	e00b      	b.n	8004624 <zcl_cluster_reports_timer+0x388>
 800460c:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800460e:	2800      	cmp	r0, #0
 8004610:	d005      	beq.n	800461e <zcl_cluster_reports_timer+0x382>
 8004612:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8004614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004618:	4341      	muls	r1, r0
 800461a:	9108      	str	r1, [sp, #32]
 800461c:	e002      	b.n	8004624 <zcl_cluster_reports_timer+0x388>
 800461e:	f8df 0590 	ldr.w	r0, [pc, #1424]	; 8004bb0 <.text_32>
 8004622:	9008      	str	r0, [sp, #32]
 8004624:	9908      	ldr	r1, [sp, #32]
 8004626:	9806      	ldr	r0, [sp, #24]
 8004628:	f7ff fd7d 	bl	8004126 <zcl_report_check_time>
 800462c:	9006      	str	r0, [sp, #24]
 800462e:	e006      	b.n	800463e <zcl_cluster_reports_timer+0x3a2>
 8004630:	00000000 	.word	0x00000000
 8004634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004636:	9806      	ldr	r0, [sp, #24]
 8004638:	f7ff fd75 	bl	8004126 <zcl_report_check_time>
 800463c:	9006      	str	r0, [sp, #24]
 800463e:	6828      	ldr	r0, [r5, #0]
 8004640:	9903      	ldr	r1, [sp, #12]
 8004642:	3130      	adds	r1, #48	; 0x30
 8004644:	4288      	cmp	r0, r1
 8004646:	d001      	beq.n	800464c <zcl_cluster_reports_timer+0x3b0>
 8004648:	682d      	ldr	r5, [r5, #0]
 800464a:	e681      	b.n	8004350 <zcl_cluster_reports_timer+0xb4>
 800464c:	2500      	movs	r5, #0
 800464e:	e67f      	b.n	8004350 <zcl_cluster_reports_timer+0xb4>
 8004650:	9805      	ldr	r0, [sp, #20]
 8004652:	2800      	cmp	r0, #0
 8004654:	d04c      	beq.n	80046f0 <zcl_cluster_reports_timer+0x454>
 8004656:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800465a:	2800      	cmp	r0, #0
 800465c:	d042      	beq.n	80046e4 <zcl_cluster_reports_timer+0x448>
 800465e:	2001      	movs	r0, #1
 8004660:	9007      	str	r0, [sp, #28]
 8004662:	2001      	movs	r0, #1
 8004664:	9905      	ldr	r1, [sp, #20]
 8004666:	7008      	strb	r0, [r1, #0]
 8004668:	4650      	mov	r0, sl
 800466a:	b2c0      	uxtb	r0, r0
 800466c:	280c      	cmp	r0, #12
 800466e:	d007      	beq.n	8004680 <zcl_cluster_reports_timer+0x3e4>
 8004670:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004674:	9907      	ldr	r1, [sp, #28]
 8004676:	fa51 f080 	uxtab	r0, r1, r0
 800467a:	1cc0      	adds	r0, r0, #3
 800467c:	2837      	cmp	r0, #55	; 0x37
 800467e:	d314      	bcc.n	80046aa <zcl_cluster_reports_timer+0x40e>
 8004680:	465a      	mov	r2, fp
 8004682:	a90c      	add	r1, sp, #48	; 0x30
 8004684:	9803      	ldr	r0, [sp, #12]
 8004686:	f7ff fc1c 	bl	8003ec2 <zcl_reporting_queue_report>
 800468a:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 800468e:	2690      	movs	r6, #144	; 0x90
 8004690:	2700      	movs	r7, #0
 8004692:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004696:	003a      	movs	r2, r7
 8004698:	0031      	movs	r1, r6
 800469a:	4640      	mov	r0, r8
 800469c:	f001 ff05 	bl	80064aa <__aeabi_memset>
 80046a0:	2000      	movs	r0, #0
 80046a2:	4682      	mov	sl, r0
 80046a4:	2000      	movs	r0, #0
 80046a6:	f88d 0009 	strb.w	r0, [sp, #9]
 80046aa:	9807      	ldr	r0, [sp, #28]
 80046ac:	9001      	str	r0, [sp, #4]
 80046ae:	9805      	ldr	r0, [sp, #20]
 80046b0:	9000      	str	r0, [sp, #0]
 80046b2:	2330      	movs	r3, #48	; 0x30
 80046b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046b8:	a90c      	add	r1, sp, #48	; 0x30
 80046ba:	4656      	mov	r6, sl
 80046bc:	b2f6      	uxtb	r6, r6
 80046be:	200c      	movs	r0, #12
 80046c0:	4346      	muls	r6, r0
 80046c2:	4431      	add	r1, r6
 80046c4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80046c6:	f7ff fd66 	bl	8004196 <zcl_report_append_attr>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d001      	beq.n	80046d2 <zcl_cluster_reports_timer+0x436>
 80046ce:	f11a 0a01 	adds.w	sl, sl, #1
 80046d2:	4650      	mov	r0, sl
 80046d4:	b2c0      	uxtb	r0, r0
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d004      	beq.n	80046e4 <zcl_cluster_reports_timer+0x448>
 80046da:	465a      	mov	r2, fp
 80046dc:	a90c      	add	r1, sp, #48	; 0x30
 80046de:	9803      	ldr	r0, [sp, #12]
 80046e0:	f7ff fbef 	bl	8003ec2 <zcl_reporting_queue_report>
 80046e4:	2300      	movs	r3, #0
 80046e6:	a2b8      	add	r2, pc, #736	; (adr r2, 80049c8 <.text_20>)
 80046e8:	9905      	ldr	r1, [sp, #20]
 80046ea:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80046ec:	f008 fdb1 	bl	800d252 <zb_heap_free>
 80046f0:	9806      	ldr	r0, [sp, #24]
 80046f2:	28c8      	cmp	r0, #200	; 0xc8
 80046f4:	d201      	bcs.n	80046fa <zcl_cluster_reports_timer+0x45e>
 80046f6:	20c8      	movs	r0, #200	; 0xc8
 80046f8:	9006      	str	r0, [sp, #24]
 80046fa:	9803      	ldr	r0, [sp, #12]
 80046fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80046fe:	2800      	cmp	r0, #0
 8004700:	d00c      	beq.n	800471c <zcl_cluster_reports_timer+0x480>
 8004702:	9803      	ldr	r0, [sp, #12]
 8004704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004706:	9906      	ldr	r1, [sp, #24]
 8004708:	9803      	ldr	r0, [sp, #12]
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4798      	blx	r3
 8004710:	2000      	movs	r0, #0
 8004712:	9903      	ldr	r1, [sp, #12]
 8004714:	6408      	str	r0, [r1, #64]	; 0x40
 8004716:	2000      	movs	r0, #0
 8004718:	9903      	ldr	r1, [sp, #12]
 800471a:	6448      	str	r0, [r1, #68]	; 0x44
 800471c:	2301      	movs	r3, #1
 800471e:	aa04      	add	r2, sp, #16
 8004720:	f240 410c 	movw	r1, #1036	; 0x40c
 8004724:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8004726:	f008 fb09 	bl	800cd3c <ZbNwkGet>
 800472a:	2800      	cmp	r0, #0
 800472c:	d002      	beq.n	8004734 <zcl_cluster_reports_timer+0x498>
 800472e:	2000      	movs	r0, #0
 8004730:	f88d 0010 	strb.w	r0, [sp, #16]
 8004734:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8004738:	2800      	cmp	r0, #0
 800473a:	d110      	bne.n	800475e <zcl_cluster_reports_timer+0x4c2>
 800473c:	9803      	ldr	r0, [sp, #12]
 800473e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004740:	9903      	ldr	r1, [sp, #12]
 8004742:	3130      	adds	r1, #48	; 0x30
 8004744:	4288      	cmp	r0, r1
 8004746:	d002      	beq.n	800474e <zcl_cluster_reports_timer+0x4b2>
 8004748:	9803      	ldr	r0, [sp, #12]
 800474a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800474c:	e000      	b.n	8004750 <zcl_cluster_reports_timer+0x4b4>
 800474e:	2000      	movs	r0, #0
 8004750:	2800      	cmp	r0, #0
 8004752:	d004      	beq.n	800475e <zcl_cluster_reports_timer+0x4c2>
 8004754:	9906      	ldr	r1, [sp, #24]
 8004756:	9803      	ldr	r0, [sp, #12]
 8004758:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800475a:	f008 fa57 	bl	800cc0c <ZbTimerReset>
 800475e:	b030      	add	sp, #192	; 0xc0
 8004760:	ecbd 8b04 	vpop	{d8-d9}
 8004764:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004768 <zcl_attr_reporting_check>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	0005      	movs	r5, r0
 800476c:	000e      	movs	r6, r1
 800476e:	0017      	movs	r7, r2
 8004770:	2000      	movs	r0, #0
 8004772:	f88d 0000 	strb.w	r0, [sp]
 8004776:	2301      	movs	r3, #1
 8004778:	466a      	mov	r2, sp
 800477a:	f240 410c 	movw	r1, #1036	; 0x40c
 800477e:	68a8      	ldr	r0, [r5, #8]
 8004780:	f008 fadc 	bl	800cd3c <ZbNwkGet>
 8004784:	2800      	cmp	r0, #0
 8004786:	d002      	beq.n	800478e <zcl_attr_reporting_check+0x26>
 8004788:	2000      	movs	r0, #0
 800478a:	f88d 0000 	strb.w	r0, [sp]
 800478e:	f89d 0000 	ldrb.w	r0, [sp]
 8004792:	2800      	cmp	r0, #0
 8004794:	d10d      	bne.n	80047b2 <zcl_attr_reporting_check+0x4a>
 8004796:	003a      	movs	r2, r7
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	0031      	movs	r1, r6
 800479c:	b289      	uxth	r1, r1
 800479e:	0028      	movs	r0, r5
 80047a0:	f000 f81a 	bl	80047d8 <zcl_reporting_find>
 80047a4:	0004      	movs	r4, r0
 80047a6:	2c00      	cmp	r4, #0
 80047a8:	d003      	beq.n	80047b2 <zcl_attr_reporting_check+0x4a>
 80047aa:	21c8      	movs	r1, #200	; 0xc8
 80047ac:	0028      	movs	r0, r5
 80047ae:	f7ff fcbf 	bl	8004130 <zcl_report_kick>
 80047b2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080047b4 <ZbZclReportCleanup>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	0005      	movs	r5, r0
 80047b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80047ba:	f115 0130 	adds.w	r1, r5, #48	; 0x30
 80047be:	4288      	cmp	r0, r1
 80047c0:	d001      	beq.n	80047c6 <ZbZclReportCleanup+0x12>
 80047c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80047c4:	e000      	b.n	80047c8 <ZbZclReportCleanup+0x14>
 80047c6:	2400      	movs	r4, #0
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	d004      	beq.n	80047d6 <ZbZclReportCleanup+0x22>
 80047cc:	0026      	movs	r6, r4
 80047ce:	0030      	movs	r0, r6
 80047d0:	f000 f8fc 	bl	80049cc <zcl_reporting_delete>
 80047d4:	e7f0      	b.n	80047b8 <ZbZclReportCleanup+0x4>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}

080047d8 <zcl_reporting_find>:
 80047d8:	b470      	push	{r4, r5, r6}
 80047da:	0004      	movs	r4, r0
 80047dc:	000b      	movs	r3, r1
 80047de:	0010      	movs	r0, r2
 80047e0:	b2c0      	uxtb	r0, r0
 80047e2:	2801      	cmp	r0, #1
 80047e4:	d101      	bne.n	80047ea <zcl_reporting_find+0x12>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e01c      	b.n	8004824 <zcl_reporting_find+0x4c>
 80047ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80047ec:	f114 0130 	adds.w	r1, r4, #48	; 0x30
 80047f0:	4288      	cmp	r0, r1
 80047f2:	d001      	beq.n	80047f8 <zcl_reporting_find+0x20>
 80047f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047f6:	e000      	b.n	80047fa <zcl_reporting_find+0x22>
 80047f8:	2100      	movs	r1, #0
 80047fa:	2900      	cmp	r1, #0
 80047fc:	d011      	beq.n	8004822 <zcl_reporting_find+0x4a>
 80047fe:	000d      	movs	r5, r1
 8004800:	89a8      	ldrh	r0, [r5, #12]
 8004802:	001e      	movs	r6, r3
 8004804:	b2b6      	uxth	r6, r6
 8004806:	42b0      	cmp	r0, r6
 8004808:	d005      	beq.n	8004816 <zcl_reporting_find+0x3e>
 800480a:	6808      	ldr	r0, [r1, #0]
 800480c:	f114 0630 	adds.w	r6, r4, #48	; 0x30
 8004810:	42b0      	cmp	r0, r6
 8004812:	d004      	beq.n	800481e <zcl_reporting_find+0x46>
 8004814:	e001      	b.n	800481a <zcl_reporting_find+0x42>
 8004816:	0028      	movs	r0, r5
 8004818:	e004      	b.n	8004824 <zcl_reporting_find+0x4c>
 800481a:	6809      	ldr	r1, [r1, #0]
 800481c:	e7ed      	b.n	80047fa <zcl_reporting_find+0x22>
 800481e:	2100      	movs	r1, #0
 8004820:	e7eb      	b.n	80047fa <zcl_reporting_find+0x22>
 8004822:	2000      	movs	r0, #0
 8004824:	bc70      	pop	{r4, r5, r6}
 8004826:	4770      	bx	lr

08004828 <zcl_reporting_stack_event>:
 8004828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	0006      	movs	r6, r0
 800482e:	000f      	movs	r7, r1
 8004830:	4690      	mov	r8, r2
 8004832:	4699      	mov	r9, r3
 8004834:	46ca      	mov	sl, r9
 8004836:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800483a:	d001      	beq.n	8004840 <zcl_reporting_stack_event+0x18>
 800483c:	2000      	movs	r0, #0
 800483e:	e01b      	b.n	8004878 <zcl_reporting_stack_event+0x50>
 8004840:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8004844:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 8004848:	4288      	cmp	r0, r1
 800484a:	d002      	beq.n	8004852 <zcl_reporting_stack_event+0x2a>
 800484c:	f8da 4030 	ldr.w	r4, [sl, #48]	; 0x30
 8004850:	e000      	b.n	8004854 <zcl_reporting_stack_event+0x2c>
 8004852:	2400      	movs	r4, #0
 8004854:	2c00      	cmp	r4, #0
 8004856:	d00e      	beq.n	8004876 <zcl_reporting_stack_event+0x4e>
 8004858:	0025      	movs	r5, r4
 800485a:	2201      	movs	r2, #1
 800485c:	0029      	movs	r1, r5
 800485e:	0030      	movs	r0, r6
 8004860:	f000 f946 	bl	8004af0 <zcl_reporting_reset_defaults>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 800486a:	4288      	cmp	r0, r1
 800486c:	d001      	beq.n	8004872 <zcl_reporting_stack_event+0x4a>
 800486e:	6824      	ldr	r4, [r4, #0]
 8004870:	e7f0      	b.n	8004854 <zcl_reporting_stack_event+0x2c>
 8004872:	2400      	movs	r4, #0
 8004874:	e7ee      	b.n	8004854 <zcl_reporting_stack_event+0x2c>
 8004876:	2000      	movs	r0, #0
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800487c <zcl_reporting_save_curr_val>:
 800487c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004880:	0005      	movs	r5, r0
 8004882:	000e      	movs	r6, r1
 8004884:	68af      	ldr	r7, [r5, #8]
 8004886:	2300      	movs	r3, #0
 8004888:	a24f      	add	r2, pc, #316	; (adr r2, 80049c8 <.text_20>)
 800488a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800488e:	0038      	movs	r0, r7
 8004890:	f008 fcd0 	bl	800d234 <zb_heap_alloc>
 8004894:	0004      	movs	r4, r0
 8004896:	2c00      	cmp	r4, #0
 8004898:	d101      	bne.n	800489e <zcl_reporting_save_curr_val+0x22>
 800489a:	2089      	movs	r0, #137	; 0x89
 800489c:	e05d      	b.n	800495a <zcl_reporting_save_curr_val+0xde>
 800489e:	2001      	movs	r0, #1
 80048a0:	9001      	str	r0, [sp, #4]
 80048a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048a6:	9000      	str	r0, [sp, #0]
 80048a8:	0023      	movs	r3, r4
 80048aa:	f10d 0209 	add.w	r2, sp, #9
 80048ae:	89b1      	ldrh	r1, [r6, #12]
 80048b0:	0028      	movs	r0, r5
 80048b2:	f7fd fd38 	bl	8002326 <ZbZclAttrRead>
 80048b6:	f88d 0008 	strb.w	r0, [sp, #8]
 80048ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80048be:	2800      	cmp	r0, #0
 80048c0:	d002      	beq.n	80048c8 <zcl_reporting_save_curr_val+0x4c>
 80048c2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80048c6:	e048      	b.n	800495a <zcl_reporting_save_curr_val+0xde>
 80048c8:	7bb0      	ldrb	r0, [r6, #14]
 80048ca:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80048ce:	4288      	cmp	r0, r1
 80048d0:	d001      	beq.n	80048d6 <zcl_reporting_save_curr_val+0x5a>
 80048d2:	208d      	movs	r0, #141	; 0x8d
 80048d4:	e041      	b.n	800495a <zcl_reporting_save_curr_val+0xde>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048dc:	0021      	movs	r1, r4
 80048de:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80048e2:	f7fe fb44 	bl	8002f6e <ZbZclAttrParseLength>
 80048e6:	4680      	mov	r8, r0
 80048e8:	f1b8 0f00 	cmp.w	r8, #0
 80048ec:	d501      	bpl.n	80048f2 <zcl_reporting_save_curr_val+0x76>
 80048ee:	2089      	movs	r0, #137	; 0x89
 80048f0:	e033      	b.n	800495a <zcl_reporting_save_curr_val+0xde>
 80048f2:	7bb0      	ldrb	r0, [r6, #14]
 80048f4:	f7fe fbec 	bl	80030d0 <ZbZclAttrIsAnalog>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d106      	bne.n	800490a <zcl_reporting_save_curr_val+0x8e>
 80048fc:	4642      	mov	r2, r8
 80048fe:	0021      	movs	r1, r4
 8004900:	2000      	movs	r0, #0
 8004902:	f008 fcb5 	bl	800d270 <WpanCrc>
 8004906:	8330      	strh	r0, [r6, #24]
 8004908:	e020      	b.n	800494c <zcl_reporting_save_curr_val+0xd0>
 800490a:	7bb0      	ldrb	r0, [r6, #14]
 800490c:	f001 fdc0 	bl	8006490 <ZbZclAttrIsFloat>
 8004910:	2800      	cmp	r0, #0
 8004912:	d00d      	beq.n	8004930 <zcl_reporting_save_curr_val+0xb4>
 8004914:	aa02      	add	r2, sp, #8
 8004916:	0021      	movs	r1, r4
 8004918:	7bb0      	ldrb	r0, [r6, #14]
 800491a:	f001 fa8c 	bl	8005e36 <ZbZclParseFloat>
 800491e:	ed86 0b06 	vstr	d0, [r6, #24]
 8004922:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004926:	2800      	cmp	r0, #0
 8004928:	d010      	beq.n	800494c <zcl_reporting_save_curr_val+0xd0>
 800492a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800492e:	e014      	b.n	800495a <zcl_reporting_save_curr_val+0xde>
 8004930:	aa02      	add	r2, sp, #8
 8004932:	0021      	movs	r1, r4
 8004934:	7bb0      	ldrb	r0, [r6, #14]
 8004936:	f7fe fce0 	bl	80032fa <ZbZclParseInteger>
 800493a:	e9c6 0106 	strd	r0, r1, [r6, #24]
 800493e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004942:	2800      	cmp	r0, #0
 8004944:	d002      	beq.n	800494c <zcl_reporting_save_curr_val+0xd0>
 8004946:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800494a:	e006      	b.n	800495a <zcl_reporting_save_curr_val+0xde>
 800494c:	2300      	movs	r3, #0
 800494e:	a21e      	add	r2, pc, #120	; (adr r2, 80049c8 <.text_20>)
 8004950:	0021      	movs	r1, r4
 8004952:	0038      	movs	r0, r7
 8004954:	f008 fc7d 	bl	800d252 <zb_heap_free>
 8004958:	2000      	movs	r0, #0
 800495a:	b004      	add	sp, #16
 800495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004960 <zcl_reporting_create_new>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	0006      	movs	r6, r0
 8004966:	000f      	movs	r7, r1
 8004968:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	89b9      	ldrh	r1, [r7, #12]
 8004970:	0030      	movs	r0, r6
 8004972:	f7ff ff31 	bl	80047d8 <zcl_reporting_find>
 8004976:	0005      	movs	r5, r0
 8004978:	2d00      	cmp	r5, #0
 800497a:	d001      	beq.n	8004980 <zcl_reporting_create_new+0x20>
 800497c:	0028      	movs	r0, r5
 800497e:	e021      	b.n	80049c4 <zcl_reporting_create_new+0x64>
 8004980:	2300      	movs	r3, #0
 8004982:	a211      	add	r2, pc, #68	; (adr r2, 80049c8 <.text_20>)
 8004984:	2138      	movs	r1, #56	; 0x38
 8004986:	4640      	mov	r0, r8
 8004988:	f008 fc54 	bl	800d234 <zb_heap_alloc>
 800498c:	0004      	movs	r4, r0
 800498e:	2c00      	cmp	r4, #0
 8004990:	d101      	bne.n	8004996 <zcl_reporting_create_new+0x36>
 8004992:	2000      	movs	r0, #0
 8004994:	e016      	b.n	80049c4 <zcl_reporting_create_new+0x64>
 8004996:	2538      	movs	r5, #56	; 0x38
 8004998:	002a      	movs	r2, r5
 800499a:	0039      	movs	r1, r7
 800499c:	0020      	movs	r0, r4
 800499e:	f00b f92b 	bl	800fbf8 <__aeabi_memcpy>
 80049a2:	6024      	str	r4, [r4, #0]
 80049a4:	6064      	str	r4, [r4, #4]
 80049a6:	f116 0030 	adds.w	r0, r6, #48	; 0x30
 80049aa:	6020      	str	r0, [r4, #0]
 80049ac:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80049ae:	6060      	str	r0, [r4, #4]
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	6044      	str	r4, [r0, #4]
 80049b4:	6860      	ldr	r0, [r4, #4]
 80049b6:	6004      	str	r4, [r0, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	0021      	movs	r1, r4
 80049bc:	4640      	mov	r0, r8
 80049be:	f000 f897 	bl	8004af0 <zcl_reporting_reset_defaults>
 80049c2:	0020      	movs	r0, r4
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049c8 <.text_20>:
 80049c8:	00000000 	.word	0x00000000

080049cc <zcl_reporting_delete>:
 80049cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80049ce:	0004      	movs	r4, r0
 80049d0:	68a5      	ldr	r5, [r4, #8]
 80049d2:	68ae      	ldr	r6, [r5, #8]
 80049d4:	2000      	movs	r0, #0
 80049d6:	f88d 0000 	strb.w	r0, [sp]
 80049da:	6860      	ldr	r0, [r4, #4]
 80049dc:	6821      	ldr	r1, [r4, #0]
 80049de:	6048      	str	r0, [r1, #4]
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	6861      	ldr	r1, [r4, #4]
 80049e4:	6008      	str	r0, [r1, #0]
 80049e6:	6024      	str	r4, [r4, #0]
 80049e8:	6064      	str	r4, [r4, #4]
 80049ea:	2300      	movs	r3, #0
 80049ec:	a26d      	add	r2, pc, #436	; (adr r2, 8004ba4 <.text_29>)
 80049ee:	0021      	movs	r1, r4
 80049f0:	0030      	movs	r0, r6
 80049f2:	f008 fc2e 	bl	800d252 <zb_heap_free>
 80049f6:	2301      	movs	r3, #1
 80049f8:	466a      	mov	r2, sp
 80049fa:	f240 410c 	movw	r1, #1036	; 0x40c
 80049fe:	0030      	movs	r0, r6
 8004a00:	f008 f99c 	bl	800cd3c <ZbNwkGet>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d002      	beq.n	8004a0e <zcl_reporting_delete+0x42>
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f88d 0000 	strb.w	r0, [sp]
 8004a0e:	f89d 0000 	ldrb.w	r0, [sp]
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d103      	bne.n	8004a1e <zcl_reporting_delete+0x52>
 8004a16:	21c8      	movs	r1, #200	; 0xc8
 8004a18:	0028      	movs	r0, r5
 8004a1a:	f7ff fb89 	bl	8004130 <zcl_report_kick>
 8004a1e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004a20 <zcl_cluster_attr_report_delete>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	0005      	movs	r5, r0
 8004a24:	000e      	movs	r6, r1
 8004a26:	0017      	movs	r7, r2
 8004a28:	003a      	movs	r2, r7
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	0031      	movs	r1, r6
 8004a2e:	b289      	uxth	r1, r1
 8004a30:	0028      	movs	r0, r5
 8004a32:	f7ff fed1 	bl	80047d8 <zcl_reporting_find>
 8004a36:	0004      	movs	r4, r0
 8004a38:	2c00      	cmp	r4, #0
 8004a3a:	d101      	bne.n	8004a40 <zcl_cluster_attr_report_delete+0x20>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e003      	b.n	8004a48 <zcl_cluster_attr_report_delete+0x28>
 8004a40:	0020      	movs	r0, r4
 8004a42:	f7ff ffc3 	bl	80049cc <zcl_reporting_delete>
 8004a46:	2001      	movs	r0, #1
 8004a48:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004a4a <zcl_reporting_disable>:
 8004a4a:	b538      	push	{r3, r4, r5, lr}
 8004a4c:	0004      	movs	r4, r0
 8004a4e:	68a0      	ldr	r0, [r4, #8]
 8004a50:	6885      	ldr	r5, [r0, #8]
 8004a52:	2000      	movs	r0, #0
 8004a54:	f88d 0000 	strb.w	r0, [sp]
 8004a58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a5c:	8460      	strh	r0, [r4, #34]	; 0x22
 8004a5e:	2000      	movs	r0, #0
 8004a60:	8420      	strh	r0, [r4, #32]
 8004a62:	2301      	movs	r3, #1
 8004a64:	466a      	mov	r2, sp
 8004a66:	f240 410c 	movw	r1, #1036	; 0x40c
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	f008 f966 	bl	800cd3c <ZbNwkGet>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d002      	beq.n	8004a7a <zcl_reporting_disable+0x30>
 8004a74:	2000      	movs	r0, #0
 8004a76:	f88d 0000 	strb.w	r0, [sp]
 8004a7a:	f89d 0000 	ldrb.w	r0, [sp]
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d103      	bne.n	8004a8a <zcl_reporting_disable+0x40>
 8004a82:	21c8      	movs	r1, #200	; 0xc8
 8004a84:	68a0      	ldr	r0, [r4, #8]
 8004a86:	f7ff fb53 	bl	8004130 <zcl_report_kick>
 8004a8a:	bd31      	pop	{r0, r4, r5, pc}

08004a8c <zcl_reporting_check_default_intvl>:
 8004a8c:	880a      	ldrh	r2, [r1, #0]
 8004a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d010      	beq.n	8004ab8 <zcl_reporting_check_default_intvl+0x2c>
 8004a96:	880a      	ldrh	r2, [r1, #0]
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	d00d      	beq.n	8004ab8 <zcl_reporting_check_default_intvl+0x2c>
 8004a9c:	880a      	ldrh	r2, [r1, #0]
 8004a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d102      	bne.n	8004aac <zcl_reporting_check_default_intvl+0x20>
 8004aa6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004aaa:	800a      	strh	r2, [r1, #0]
 8004aac:	880a      	ldrh	r2, [r1, #0]
 8004aae:	8803      	ldrh	r3, [r0, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d201      	bcs.n	8004ab8 <zcl_reporting_check_default_intvl+0x2c>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	8002      	strh	r2, [r0, #0]
 8004ab8:	4770      	bx	lr

08004aba <zcl_reporting_config_attr_defaults>:
 8004aba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8004abc:	0004      	movs	r4, r0
 8004abe:	000d      	movs	r5, r1
 8004ac0:	0016      	movs	r6, r2
 8004ac2:	8aa8      	ldrh	r0, [r5, #20]
 8004ac4:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004ac8:	8ae8      	ldrh	r0, [r5, #22]
 8004aca:	f8ad 0000 	strh.w	r0, [sp]
 8004ace:	4669      	mov	r1, sp
 8004ad0:	f10d 0002 	add.w	r0, sp, #2
 8004ad4:	f7ff ffda 	bl	8004a8c <zcl_reporting_check_default_intvl>
 8004ad8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004adc:	84b0      	strh	r0, [r6, #36]	; 0x24
 8004ade:	f8bd 0000 	ldrh.w	r0, [sp]
 8004ae2:	84f0      	strh	r0, [r6, #38]	; 0x26
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	0031      	movs	r1, r6
 8004ae8:	0020      	movs	r0, r4
 8004aea:	f000 f801 	bl	8004af0 <zcl_reporting_reset_defaults>
 8004aee:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004af0 <zcl_reporting_reset_defaults>:
 8004af0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8004af2:	0004      	movs	r4, r0
 8004af4:	000d      	movs	r5, r1
 8004af6:	0016      	movs	r6, r2
 8004af8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8004afa:	8428      	strh	r0, [r5, #32]
 8004afc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8004afe:	8468      	strh	r0, [r5, #34]	; 0x22
 8004b00:	8c28      	ldrh	r0, [r5, #32]
 8004b02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b06:	4288      	cmp	r0, r1
 8004b08:	d106      	bne.n	8004b18 <zcl_reporting_reset_defaults+0x28>
 8004b0a:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d103      	bne.n	8004b18 <zcl_reporting_reset_defaults+0x28>
 8004b10:	203d      	movs	r0, #61	; 0x3d
 8004b12:	8468      	strh	r0, [r5, #34]	; 0x22
 8004b14:	2000      	movs	r0, #0
 8004b16:	8428      	strh	r0, [r5, #32]
 8004b18:	ed95 0b0c 	vldr	d0, [r5, #48]	; 0x30
 8004b1c:	ed85 0b0a 	vstr	d0, [r5, #40]	; 0x28
 8004b20:	0020      	movs	r0, r4
 8004b22:	f008 f920 	bl	800cd66 <ZbZclUptime>
 8004b26:	6128      	str	r0, [r5, #16]
 8004b28:	0030      	movs	r0, r6
 8004b2a:	b2c0      	uxtb	r0, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d013      	beq.n	8004b58 <zcl_reporting_reset_defaults+0x68>
 8004b30:	2301      	movs	r3, #1
 8004b32:	466a      	mov	r2, sp
 8004b34:	f240 410c 	movw	r1, #1036	; 0x40c
 8004b38:	0020      	movs	r0, r4
 8004b3a:	f008 f8ff 	bl	800cd3c <ZbNwkGet>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d002      	beq.n	8004b48 <zcl_reporting_reset_defaults+0x58>
 8004b42:	2000      	movs	r0, #0
 8004b44:	f88d 0000 	strb.w	r0, [sp]
 8004b48:	f89d 0000 	ldrb.w	r0, [sp]
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d103      	bne.n	8004b58 <zcl_reporting_reset_defaults+0x68>
 8004b50:	21c8      	movs	r1, #200	; 0xc8
 8004b52:	68a8      	ldr	r0, [r5, #8]
 8004b54:	f7ff faec 	bl	8004130 <zcl_report_kick>
 8004b58:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004b5a <zcl_reporting_epsilon_default>:
 8004b5a:	b538      	push	{r3, r4, r5, lr}
 8004b5c:	0004      	movs	r4, r0
 8004b5e:	000d      	movs	r5, r1
 8004b60:	0028      	movs	r0, r5
 8004b62:	b2c0      	uxtb	r0, r0
 8004b64:	2838      	cmp	r0, #56	; 0x38
 8004b66:	db09      	blt.n	8004b7c <zcl_reporting_epsilon_default+0x22>
 8004b68:	0028      	movs	r0, r5
 8004b6a:	b2c0      	uxtb	r0, r0
 8004b6c:	283b      	cmp	r0, #59	; 0x3b
 8004b6e:	da05      	bge.n	8004b7c <zcl_reporting_epsilon_default+0x22>
 8004b70:	2000      	movs	r0, #0
 8004b72:	f8df 1bc8 	ldr.w	r1, [pc, #3016]	; 800573c <.text_40>
 8004b76:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8004b7a:	e00f      	b.n	8004b9c <zcl_reporting_epsilon_default+0x42>
 8004b7c:	0028      	movs	r0, r5
 8004b7e:	b2c0      	uxtb	r0, r0
 8004b80:	f7fe faa6 	bl	80030d0 <ZbZclAttrIsAnalog>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d005      	beq.n	8004b94 <zcl_reporting_epsilon_default+0x3a>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f8df 1bb0 	ldr.w	r1, [pc, #2992]	; 800573c <.text_40>
 8004b8e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8004b92:	e003      	b.n	8004b9c <zcl_reporting_epsilon_default+0x42>
 8004b94:	2000      	movs	r0, #0
 8004b96:	2100      	movs	r1, #0
 8004b98:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8004b9c:	bd31      	pop	{r0, r4, r5, pc}
	...

08004ba0 <.text_28>:
 8004ba0:	08003e9d 	.word	0x08003e9d

08004ba4 <.text_29>:
 8004ba4:	00000000 	.word	0x00000000

08004ba8 <.text_30>:
 8004ba8:	20000014 	.word	0x20000014

08004bac <.text_31>:
 8004bac:	08003e89 	.word	0x08003e89

08004bb0 <.text_32>:
 8004bb0:	0036ee80 	.word	0x0036ee80

08004bb4 <zcl_reporting_epsilon_check>:
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	0004      	movs	r4, r0
 8004bb8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004bba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bbe:	4288      	cmp	r0, r1
 8004bc0:	d101      	bne.n	8004bc6 <zcl_reporting_epsilon_check+0x12>
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	e04b      	b.n	8004c5e <zcl_reporting_epsilon_check+0xaa>
 8004bc6:	8c20      	ldrh	r0, [r4, #32]
 8004bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004bcc:	4288      	cmp	r0, r1
 8004bce:	d104      	bne.n	8004bda <zcl_reporting_epsilon_check+0x26>
 8004bd0:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d101      	bne.n	8004bda <zcl_reporting_epsilon_check+0x26>
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	e041      	b.n	8004c5e <zcl_reporting_epsilon_check+0xaa>
 8004bda:	7ba0      	ldrb	r0, [r4, #14]
 8004bdc:	2838      	cmp	r0, #56	; 0x38
 8004bde:	db1d      	blt.n	8004c1c <zcl_reporting_epsilon_check+0x68>
 8004be0:	7ba0      	ldrb	r0, [r4, #14]
 8004be2:	283b      	cmp	r0, #59	; 0x3b
 8004be4:	da1a      	bge.n	8004c1c <zcl_reporting_epsilon_check+0x68>
 8004be6:	8c20      	ldrh	r0, [r4, #32]
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d108      	bne.n	8004bfe <zcl_reporting_epsilon_check+0x4a>
 8004bec:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	f002 f92c 	bl	8006e50 <__aeabi_cdcmpeq>
 8004bf8:	d101      	bne.n	8004bfe <zcl_reporting_epsilon_check+0x4a>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e02f      	b.n	8004c5e <zcl_reporting_epsilon_check+0xaa>
 8004bfe:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	f002 f923 	bl	8006e50 <__aeabi_cdcmpeq>
 8004c0a:	d205      	bcs.n	8004c18 <zcl_reporting_epsilon_check+0x64>
 8004c0c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8004c10:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004c14:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8004c18:	2001      	movs	r0, #1
 8004c1a:	e020      	b.n	8004c5e <zcl_reporting_epsilon_check+0xaa>
 8004c1c:	7ba0      	ldrb	r0, [r4, #14]
 8004c1e:	f7fe fa57 	bl	80030d0 <ZbZclAttrIsAnalog>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d01a      	beq.n	8004c5c <zcl_reporting_epsilon_check+0xa8>
 8004c26:	8c20      	ldrh	r0, [r4, #32]
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d108      	bne.n	8004c3e <zcl_reporting_epsilon_check+0x8a>
 8004c2c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004c30:	2000      	movs	r0, #0
 8004c32:	2100      	movs	r1, #0
 8004c34:	f002 f90c 	bl	8006e50 <__aeabi_cdcmpeq>
 8004c38:	d101      	bne.n	8004c3e <zcl_reporting_epsilon_check+0x8a>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e00f      	b.n	8004c5e <zcl_reporting_epsilon_check+0xaa>
 8004c3e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f002 f903 	bl	8006e50 <__aeabi_cdcmpeq>
 8004c4a:	d205      	bcs.n	8004c58 <zcl_reporting_epsilon_check+0xa4>
 8004c4c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8004c50:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004c54:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8004c58:	2001      	movs	r0, #1
 8004c5a:	e000      	b.n	8004c5e <zcl_reporting_epsilon_check+0xaa>
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <zcl_reporting_create_default_reports>:
 8004c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	b090      	sub	sp, #64	; 0x40
 8004c66:	0005      	movs	r5, r0
 8004c68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c6a:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8004c6e:	4288      	cmp	r0, r1
 8004c70:	d001      	beq.n	8004c76 <zcl_reporting_create_default_reports+0x16>
 8004c72:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004c74:	e000      	b.n	8004c78 <zcl_reporting_create_default_reports+0x18>
 8004c76:	2400      	movs	r4, #0
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d054      	beq.n	8004d26 <zcl_reporting_create_default_reports+0xc6>
 8004c7c:	0026      	movs	r6, r4
 8004c7e:	68b0      	ldr	r0, [r6, #8]
 8004c80:	7900      	ldrb	r0, [r0, #4]
 8004c82:	0780      	lsls	r0, r0, #30
 8004c84:	d546      	bpl.n	8004d14 <zcl_reporting_create_default_reports+0xb4>
 8004c86:	2200      	movs	r2, #0
 8004c88:	68b0      	ldr	r0, [r6, #8]
 8004c8a:	8801      	ldrh	r1, [r0, #0]
 8004c8c:	0028      	movs	r0, r5
 8004c8e:	f7ff fda3 	bl	80047d8 <zcl_reporting_find>
 8004c92:	9001      	str	r0, [sp, #4]
 8004c94:	9801      	ldr	r0, [sp, #4]
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d13c      	bne.n	8004d14 <zcl_reporting_create_default_reports+0xb4>
 8004c9a:	2738      	movs	r7, #56	; 0x38
 8004c9c:	f05f 0800 	movs.w	r8, #0
 8004ca0:	f10d 0908 	add.w	r9, sp, #8
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	0039      	movs	r1, r7
 8004ca8:	4648      	mov	r0, r9
 8004caa:	f001 fbfe 	bl	80064aa <__aeabi_memset>
 8004cae:	68b0      	ldr	r0, [r6, #8]
 8004cb0:	8800      	ldrh	r0, [r0, #0]
 8004cb2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004cb6:	9504      	str	r5, [sp, #16]
 8004cb8:	68b0      	ldr	r0, [r6, #8]
 8004cba:	7880      	ldrb	r0, [r0, #2]
 8004cbc:	f88d 0016 	strb.w	r0, [sp, #22]
 8004cc0:	68b0      	ldr	r0, [r6, #8]
 8004cc2:	7881      	ldrb	r1, [r0, #2]
 8004cc4:	a802      	add	r0, sp, #8
 8004cc6:	f7ff ff48 	bl	8004b5a <zcl_reporting_epsilon_default>
 8004cca:	f05f 0908 	movs.w	r9, #8
 8004cce:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8004cd2:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8004cd6:	464a      	mov	r2, r9
 8004cd8:	4651      	mov	r1, sl
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f00a ff8c 	bl	800fbf8 <__aeabi_memcpy>
 8004ce0:	aa02      	add	r2, sp, #8
 8004ce2:	0031      	movs	r1, r6
 8004ce4:	68a8      	ldr	r0, [r5, #8]
 8004ce6:	f7ff fee8 	bl	8004aba <zcl_reporting_config_attr_defaults>
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	0028      	movs	r0, r5
 8004cee:	f7ff fdc5 	bl	800487c <zcl_reporting_save_curr_val>
 8004cf2:	f88d 0000 	strb.w	r0, [sp]
 8004cf6:	f89d 0000 	ldrb.w	r0, [sp]
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d002      	beq.n	8004d04 <zcl_reporting_create_default_reports+0xa4>
 8004cfe:	f89d 0000 	ldrb.w	r0, [sp]
 8004d02:	e011      	b.n	8004d28 <zcl_reporting_create_default_reports+0xc8>
 8004d04:	a902      	add	r1, sp, #8
 8004d06:	0028      	movs	r0, r5
 8004d08:	f7ff fe2a 	bl	8004960 <zcl_reporting_create_new>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d101      	bne.n	8004d14 <zcl_reporting_create_default_reports+0xb4>
 8004d10:	2089      	movs	r0, #137	; 0x89
 8004d12:	e009      	b.n	8004d28 <zcl_reporting_create_default_reports+0xc8>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8004d1a:	4288      	cmp	r0, r1
 8004d1c:	d001      	beq.n	8004d22 <zcl_reporting_create_default_reports+0xc2>
 8004d1e:	6824      	ldr	r4, [r4, #0]
 8004d20:	e7aa      	b.n	8004c78 <zcl_reporting_create_default_reports+0x18>
 8004d22:	2400      	movs	r4, #0
 8004d24:	e7a8      	b.n	8004c78 <zcl_reporting_create_default_reports+0x18>
 8004d26:	2000      	movs	r0, #0
 8004d28:	b011      	add	sp, #68	; 0x44
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004d2e <ZbZclHandleConfigReport>:
 8004d2e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d32:	b0ca      	sub	sp, #296	; 0x128
 8004d34:	0004      	movs	r4, r0
 8004d36:	0015      	movs	r5, r2
 8004d38:	68a0      	ldr	r0, [r4, #8]
 8004d3a:	9002      	str	r0, [sp, #8]
 8004d3c:	2700      	movs	r7, #0
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f88d 0003 	strb.w	r0, [sp, #3]
 8004d44:	2600      	movs	r6, #0
 8004d46:	2000      	movs	r0, #0
 8004d48:	f88d 0002 	strb.w	r0, [sp, #2]
 8004d4c:	f05f 0808 	movs.w	r8, #8
 8004d50:	f05f 0900 	movs.w	r9, #0
 8004d54:	f10d 0a10 	add.w	sl, sp, #16
 8004d58:	464a      	mov	r2, r9
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	4650      	mov	r0, sl
 8004d5e:	f001 fba4 	bl	80064aa <__aeabi_memset>
 8004d62:	2000      	movs	r0, #0
 8004d64:	f88d 0010 	strb.w	r0, [sp, #16]
 8004d68:	984a      	ldr	r0, [sp, #296]	; 0x128
 8004d6a:	7840      	ldrb	r0, [r0, #1]
 8004d6c:	f88d 0011 	strb.w	r0, [sp, #17]
 8004d70:	984a      	ldr	r0, [sp, #296]	; 0x128
 8004d72:	7880      	ldrb	r0, [r0, #2]
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d003      	beq.n	8004d80 <ZbZclHandleConfigReport+0x52>
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f88d 0012 	strb.w	r0, [sp, #18]
 8004d7e:	e002      	b.n	8004d86 <ZbZclHandleConfigReport+0x58>
 8004d80:	2001      	movs	r0, #1
 8004d82:	f88d 0012 	strb.w	r0, [sp, #18]
 8004d86:	2001      	movs	r0, #1
 8004d88:	f88d 0013 	strb.w	r0, [sp, #19]
 8004d8c:	984a      	ldr	r0, [sp, #296]	; 0x128
 8004d8e:	8880      	ldrh	r0, [r0, #4]
 8004d90:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004d94:	984a      	ldr	r0, [sp, #296]	; 0x128
 8004d96:	7980      	ldrb	r0, [r0, #6]
 8004d98:	f88d 0016 	strb.w	r0, [sp, #22]
 8004d9c:	2007      	movs	r0, #7
 8004d9e:	f88d 0017 	strb.w	r0, [sp, #23]
 8004da2:	2205      	movs	r2, #5
 8004da4:	a917      	add	r1, sp, #92	; 0x5c
 8004da6:	a804      	add	r0, sp, #16
 8004da8:	f7fc fbc6 	bl	8001538 <ZbZclAppendHeader>
 8004dac:	9006      	str	r0, [sp, #24]
 8004dae:	9806      	ldr	r0, [sp, #24]
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d506      	bpl.n	8004dc2 <ZbZclHandleConfigReport+0x94>
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8004db8:	0029      	movs	r1, r5
 8004dba:	0020      	movs	r0, r4
 8004dbc:	f008 f8bf 	bl	800cf3e <ZbZclSendDefaultResponse>
 8004dc0:	e230      	b.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 8004dc2:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004dc4:	4286      	cmp	r6, r0
 8004dc6:	f080 81b0 	bcs.w	800512a <ZbZclHandleConfigReport+0x3fc>
 8004dca:	f05f 0900 	movs.w	r9, #0
 8004dce:	f05f 0838 	movs.w	r8, #56	; 0x38
 8004dd2:	f05f 0a00 	movs.w	sl, #0
 8004dd6:	f10d 0b20 	add.w	fp, sp, #32
 8004dda:	4652      	mov	r2, sl
 8004ddc:	4641      	mov	r1, r8
 8004dde:	4658      	mov	r0, fp
 8004de0:	f001 fb63 	bl	80064aa <__aeabi_memset>
 8004de4:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004de6:	1cf1      	adds	r1, r6, #3
 8004de8:	4288      	cmp	r0, r1
 8004dea:	d206      	bcs.n	8004dfa <ZbZclHandleConfigReport+0xcc>
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8004df0:	0029      	movs	r1, r5
 8004df2:	0020      	movs	r0, r4
 8004df4:	f008 f8a3 	bl	800cf3e <ZbZclSendDefaultResponse>
 8004df8:	e214      	b.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 8004dfa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004dfc:	5d80      	ldrb	r0, [r0, r6]
 8004dfe:	f88d 0001 	strb.w	r0, [sp, #1]
 8004e02:	1c76      	adds	r6, r6, #1
 8004e04:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004e06:	4430      	add	r0, r6
 8004e08:	f7fd f8ba 	bl	8001f80 <pletoh16>
 8004e0c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8004e10:	1cb6      	adds	r6, r6, #2
 8004e12:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f040 8154 	bne.w	80050c4 <ZbZclHandleConfigReport+0x396>
 8004e1c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004e1e:	1cb1      	adds	r1, r6, #2
 8004e20:	4288      	cmp	r0, r1
 8004e22:	d206      	bcs.n	8004e32 <ZbZclHandleConfigReport+0x104>
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8004e28:	0029      	movs	r1, r5
 8004e2a:	0020      	movs	r0, r4
 8004e2c:	f008 f887 	bl	800cf3e <ZbZclSendDefaultResponse>
 8004e30:	e1f8      	b.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 8004e32:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004e34:	1c71      	adds	r1, r6, #1
 8004e36:	4288      	cmp	r0, r1
 8004e38:	f0c0 808f 	bcc.w	8004f5a <ZbZclHandleConfigReport+0x22c>
 8004e3c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004e3e:	5d80      	ldrb	r0, [r0, r6]
 8004e40:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
 8004e44:	1c76      	adds	r6, r6, #1
 8004e46:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004e48:	1cb1      	adds	r1, r6, #2
 8004e4a:	4288      	cmp	r0, r1
 8004e4c:	f0c0 8085 	bcc.w	8004f5a <ZbZclHandleConfigReport+0x22c>
 8004e50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004e52:	4430      	add	r0, r6
 8004e54:	f7fd f894 	bl	8001f80 <pletoh16>
 8004e58:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8004e5c:	1cb6      	adds	r6, r6, #2
 8004e5e:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004e60:	1cb1      	adds	r1, r6, #2
 8004e62:	4288      	cmp	r0, r1
 8004e64:	d379      	bcc.n	8004f5a <ZbZclHandleConfigReport+0x22c>
 8004e66:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004e68:	4430      	add	r0, r6
 8004e6a:	f7fd f889 	bl	8001f80 <pletoh16>
 8004e6e:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8004e72:	1cb6      	adds	r6, r6, #2
 8004e74:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004e76:	1c71      	adds	r1, r6, #1
 8004e78:	4288      	cmp	r0, r1
 8004e7a:	d36e      	bcc.n	8004f5a <ZbZclHandleConfigReport+0x22c>
 8004e7c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004e80:	2848      	cmp	r0, #72	; 0x48
 8004e82:	d00b      	beq.n	8004e9c <ZbZclHandleConfigReport+0x16e>
 8004e84:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004e88:	284c      	cmp	r0, #76	; 0x4c
 8004e8a:	d007      	beq.n	8004e9c <ZbZclHandleConfigReport+0x16e>
 8004e8c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004e90:	2850      	cmp	r0, #80	; 0x50
 8004e92:	d003      	beq.n	8004e9c <ZbZclHandleConfigReport+0x16e>
 8004e94:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004e98:	2851      	cmp	r0, #81	; 0x51
 8004e9a:	d103      	bne.n	8004ea4 <ZbZclHandleConfigReport+0x176>
 8004e9c:	208c      	movs	r0, #140	; 0x8c
 8004e9e:	f88d 0000 	strb.w	r0, [sp]
 8004ea2:	e129      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004ea4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004ea8:	2838      	cmp	r0, #56	; 0x38
 8004eaa:	db29      	blt.n	8004f00 <ZbZclHandleConfigReport+0x1d2>
 8004eac:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004eb0:	283b      	cmp	r0, #59	; 0x3b
 8004eb2:	da25      	bge.n	8004f00 <ZbZclHandleConfigReport+0x1d2>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8004eb8:	1b92      	subs	r2, r2, r6
 8004eba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ebc:	eb00 0106 	add.w	r1, r0, r6
 8004ec0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004ec4:	f7fe f853 	bl	8002f6e <ZbZclAttrParseLength>
 8004ec8:	9003      	str	r0, [sp, #12]
 8004eca:	9803      	ldr	r0, [sp, #12]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d503      	bpl.n	8004ed8 <ZbZclHandleConfigReport+0x1aa>
 8004ed0:	2085      	movs	r0, #133	; 0x85
 8004ed2:	f88d 0000 	strb.w	r0, [sp]
 8004ed6:	e10f      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004ed8:	466a      	mov	r2, sp
 8004eda:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004edc:	eb00 0106 	add.w	r1, r0, r6
 8004ee0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004ee4:	f000 ffa7 	bl	8005e36 <ZbZclParseFloat>
 8004ee8:	ed8d 0b12 	vstr	d0, [sp, #72]	; 0x48
 8004eec:	f89d 0000 	ldrb.w	r0, [sp]
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	f040 8101 	bne.w	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004ef6:	9803      	ldr	r0, [sp, #12]
 8004ef8:	1986      	adds	r6, r0, r6
 8004efa:	2001      	movs	r0, #1
 8004efc:	4681      	mov	r9, r0
 8004efe:	e02c      	b.n	8004f5a <ZbZclHandleConfigReport+0x22c>
 8004f00:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004f04:	f7fe f8e4 	bl	80030d0 <ZbZclAttrIsAnalog>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d026      	beq.n	8004f5a <ZbZclHandleConfigReport+0x22c>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8004f10:	1b92      	subs	r2, r2, r6
 8004f12:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f14:	eb00 0106 	add.w	r1, r0, r6
 8004f18:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004f1c:	f7fe f827 	bl	8002f6e <ZbZclAttrParseLength>
 8004f20:	9003      	str	r0, [sp, #12]
 8004f22:	9803      	ldr	r0, [sp, #12]
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d503      	bpl.n	8004f30 <ZbZclHandleConfigReport+0x202>
 8004f28:	2085      	movs	r0, #133	; 0x85
 8004f2a:	f88d 0000 	strb.w	r0, [sp]
 8004f2e:	e0e3      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004f30:	466a      	mov	r2, sp
 8004f32:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f34:	eb00 0106 	add.w	r1, r0, r6
 8004f38:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004f3c:	f7fe f9dd 	bl	80032fa <ZbZclParseInteger>
 8004f40:	f001 fcf8 	bl	8006934 <__aeabi_l2d>
 8004f44:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004f48:	f89d 0000 	ldrb.w	r0, [sp]
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f040 80d3 	bne.w	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004f52:	9803      	ldr	r0, [sp, #12]
 8004f54:	1986      	adds	r6, r0, r6
 8004f56:	2001      	movs	r0, #1
 8004f58:	4681      	mov	r9, r0
 8004f5a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8004f5e:	0020      	movs	r0, r4
 8004f60:	f7fd f8dd 	bl	800211e <ZbZclAttrFind>
 8004f64:	4682      	mov	sl, r0
 8004f66:	f1ba 0f00 	cmp.w	sl, #0
 8004f6a:	d103      	bne.n	8004f74 <ZbZclHandleConfigReport+0x246>
 8004f6c:	2086      	movs	r0, #134	; 0x86
 8004f6e:	f88d 0000 	strb.w	r0, [sp]
 8004f72:	e0c1      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004f74:	f8da 0008 	ldr.w	r0, [sl, #8]
 8004f78:	7900      	ldrb	r0, [r0, #4]
 8004f7a:	0780      	lsls	r0, r0, #30
 8004f7c:	d403      	bmi.n	8004f86 <ZbZclHandleConfigReport+0x258>
 8004f7e:	208c      	movs	r0, #140	; 0x8c
 8004f80:	f88d 0000 	strb.w	r0, [sp]
 8004f84:	e0b8      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8004f86:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
 8004f8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f8e:	4288      	cmp	r0, r1
 8004f90:	d101      	bne.n	8004f96 <ZbZclHandleConfigReport+0x268>
 8004f92:	2000      	movs	r0, #0
 8004f94:	4681      	mov	r9, r0
 8004f96:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004f9a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8004f9e:	0020      	movs	r0, r4
 8004fa0:	f7ff fc1a 	bl	80047d8 <zcl_reporting_find>
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8004faa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fae:	4288      	cmp	r0, r1
 8004fb0:	d11b      	bne.n	8004fea <ZbZclHandleConfigReport+0x2bc>
 8004fb2:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d117      	bne.n	8004fea <ZbZclHandleConfigReport+0x2bc>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	4681      	mov	r9, r0
 8004fbe:	f1b8 0f00 	cmp.w	r8, #0
 8004fc2:	d00d      	beq.n	8004fe0 <ZbZclHandleConfigReport+0x2b2>
 8004fc4:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 8004fc8:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8004fcc:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 8004fd0:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	a908      	add	r1, sp, #32
 8004fd8:	9802      	ldr	r0, [sp, #8]
 8004fda:	f7ff fd89 	bl	8004af0 <zcl_reporting_reset_defaults>
 8004fde:	e004      	b.n	8004fea <ZbZclHandleConfigReport+0x2bc>
 8004fe0:	aa08      	add	r2, sp, #32
 8004fe2:	4651      	mov	r1, sl
 8004fe4:	9802      	ldr	r0, [sp, #8]
 8004fe6:	f7ff fd68 	bl	8004aba <zcl_reporting_config_attr_defaults>
 8004fea:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8004fee:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004ff2:	7889      	ldrb	r1, [r1, #2]
 8004ff4:	4288      	cmp	r0, r1
 8004ff6:	d003      	beq.n	8005000 <ZbZclHandleConfigReport+0x2d2>
 8004ff8:	208d      	movs	r0, #141	; 0x8d
 8004ffa:	f88d 0000 	strb.w	r0, [sp]
 8004ffe:	e07b      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8005000:	f1b8 0f00 	cmp.w	r8, #0
 8005004:	d021      	beq.n	800504a <ZbZclHandleConfigReport+0x31c>
 8005006:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800500a:	f8a8 0020 	strh.w	r0, [r8, #32]
 800500e:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
 8005012:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
 8005016:	4648      	mov	r0, r9
 8005018:	b2c0      	uxtb	r0, r0
 800501a:	2800      	cmp	r0, #0
 800501c:	d00c      	beq.n	8005038 <ZbZclHandleConfigReport+0x30a>
 800501e:	a808      	add	r0, sp, #32
 8005020:	f7ff fdc8 	bl	8004bb4 <zcl_reporting_epsilon_check>
 8005024:	2800      	cmp	r0, #0
 8005026:	d103      	bne.n	8005030 <ZbZclHandleConfigReport+0x302>
 8005028:	2085      	movs	r0, #133	; 0x85
 800502a:	f88d 0000 	strb.w	r0, [sp]
 800502e:	e063      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8005030:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8005034:	ed88 0b0a 	vstr	d0, [r8, #40]	; 0x28
 8005038:	9802      	ldr	r0, [sp, #8]
 800503a:	f007 fe94 	bl	800cd66 <ZbZclUptime>
 800503e:	f8c8 0010 	str.w	r0, [r8, #16]
 8005042:	2001      	movs	r0, #1
 8005044:	f88d 0002 	strb.w	r0, [sp, #2]
 8005048:	e6bb      	b.n	8004dc2 <ZbZclHandleConfigReport+0x94>
 800504a:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
 800504e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005052:	4288      	cmp	r0, r1
 8005054:	f43f aeb5 	beq.w	8004dc2 <ZbZclHandleConfigReport+0x94>
 8005058:	940a      	str	r4, [sp, #40]	; 0x28
 800505a:	4648      	mov	r0, r9
 800505c:	b2c0      	uxtb	r0, r0
 800505e:	2800      	cmp	r0, #0
 8005060:	d008      	beq.n	8005074 <ZbZclHandleConfigReport+0x346>
 8005062:	a808      	add	r0, sp, #32
 8005064:	f7ff fda6 	bl	8004bb4 <zcl_reporting_epsilon_check>
 8005068:	2800      	cmp	r0, #0
 800506a:	d108      	bne.n	800507e <ZbZclHandleConfigReport+0x350>
 800506c:	2085      	movs	r0, #133	; 0x85
 800506e:	f88d 0000 	strb.w	r0, [sp]
 8005072:	e041      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 8005074:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
 8005078:	a808      	add	r0, sp, #32
 800507a:	f7ff fd6e 	bl	8004b5a <zcl_reporting_epsilon_default>
 800507e:	2008      	movs	r0, #8
 8005080:	9016      	str	r0, [sp, #88]	; 0x58
 8005082:	a812      	add	r0, sp, #72	; 0x48
 8005084:	9007      	str	r0, [sp, #28]
 8005086:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800508a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800508c:	9907      	ldr	r1, [sp, #28]
 800508e:	4658      	mov	r0, fp
 8005090:	f00a fdb2 	bl	800fbf8 <__aeabi_memcpy>
 8005094:	a908      	add	r1, sp, #32
 8005096:	0020      	movs	r0, r4
 8005098:	f7ff fbf0 	bl	800487c <zcl_reporting_save_curr_val>
 800509c:	f88d 0000 	strb.w	r0, [sp]
 80050a0:	f89d 0000 	ldrb.w	r0, [sp]
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d127      	bne.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 80050a8:	a908      	add	r1, sp, #32
 80050aa:	0020      	movs	r0, r4
 80050ac:	f7ff fc58 	bl	8004960 <zcl_reporting_create_new>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d103      	bne.n	80050bc <ZbZclHandleConfigReport+0x38e>
 80050b4:	2189      	movs	r1, #137	; 0x89
 80050b6:	f88d 1000 	strb.w	r1, [sp]
 80050ba:	e01d      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 80050bc:	2101      	movs	r1, #1
 80050be:	f88d 1002 	strb.w	r1, [sp, #2]
 80050c2:	e67e      	b.n	8004dc2 <ZbZclHandleConfigReport+0x94>
 80050c4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80050c8:	2801      	cmp	r0, #1
 80050ca:	d10e      	bne.n	80050ea <ZbZclHandleConfigReport+0x3bc>
 80050cc:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80050ce:	1cb1      	adds	r1, r6, #2
 80050d0:	4288      	cmp	r0, r1
 80050d2:	d206      	bcs.n	80050e2 <ZbZclHandleConfigReport+0x3b4>
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 80050d8:	0029      	movs	r1, r5
 80050da:	0020      	movs	r0, r4
 80050dc:	f007 ff2f 	bl	800cf3e <ZbZclSendDefaultResponse>
 80050e0:	e0a0      	b.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 80050e2:	208c      	movs	r0, #140	; 0x8c
 80050e4:	f88d 0000 	strb.w	r0, [sp]
 80050e8:	e006      	b.n	80050f8 <ZbZclHandleConfigReport+0x3ca>
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 80050ee:	0029      	movs	r1, r5
 80050f0:	0020      	movs	r0, r4
 80050f2:	f007 ff24 	bl	800cf3e <ZbZclSendDefaultResponse>
 80050f6:	e095      	b.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 80050f8:	f89d 0000 	ldrb.w	r0, [sp]
 80050fc:	f88d 0003 	strb.w	r0, [sp, #3]
 8005100:	1d38      	adds	r0, r7, #4
 8005102:	2837      	cmp	r0, #55	; 0x37
 8005104:	d211      	bcs.n	800512a <ZbZclHandleConfigReport+0x3fc>
 8005106:	f89d 0000 	ldrb.w	r0, [sp]
 800510a:	a93c      	add	r1, sp, #240	; 0xf0
 800510c:	55c8      	strb	r0, [r1, r7]
 800510e:	1c7f      	adds	r7, r7, #1
 8005110:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8005114:	a93c      	add	r1, sp, #240	; 0xf0
 8005116:	55c8      	strb	r0, [r1, r7]
 8005118:	1c7f      	adds	r7, r7, #1
 800511a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800511e:	a83c      	add	r0, sp, #240	; 0xf0
 8005120:	4438      	add	r0, r7
 8005122:	f7fc ff79 	bl	8002018 <putle16>
 8005126:	1cbf      	adds	r7, r7, #2
 8005128:	e64b      	b.n	8004dc2 <ZbZclHandleConfigReport+0x94>
 800512a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800512e:	2800      	cmp	r0, #0
 8005130:	d105      	bne.n	800513e <ZbZclHandleConfigReport+0x410>
 8005132:	2000      	movs	r0, #0
 8005134:	2100      	movs	r1, #0
 8005136:	aa3c      	add	r2, sp, #240	; 0xf0
 8005138:	5411      	strb	r1, [r2, r0]
 800513a:	1c40      	adds	r0, r0, #1
 800513c:	0007      	movs	r7, r0
 800513e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005142:	2800      	cmp	r0, #0
 8005144:	d127      	bne.n	8005196 <ZbZclHandleConfigReport+0x468>
 8005146:	f05f 0920 	movs.w	r9, #32
 800514a:	f05f 0800 	movs.w	r8, #0
 800514e:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
 8005152:	4642      	mov	r2, r8
 8005154:	4649      	mov	r1, r9
 8005156:	4650      	mov	r0, sl
 8005158:	f001 f9a7 	bl	80064aa <__aeabi_memset>
 800515c:	9802      	ldr	r0, [sp, #8]
 800515e:	f007 f9a3 	bl	800c4a8 <ZbExtendedAddress>
 8005162:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8005166:	8868      	ldrh	r0, [r5, #2]
 8005168:	f88d 0080 	strb.w	r0, [sp, #128]	; 0x80
 800516c:	89a0      	ldrh	r0, [r4, #12]
 800516e:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
 8005172:	2003      	movs	r0, #3
 8005174:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
 8005178:	8a68      	ldrh	r0, [r5, #18]
 800517a:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
 800517e:	8ae8      	ldrh	r0, [r5, #22]
 8005180:	f8ad 008e 	strh.w	r0, [sp, #142]	; 0x8e
 8005184:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8005188:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 800518c:	aa32      	add	r2, sp, #200	; 0xc8
 800518e:	a91e      	add	r1, sp, #120	; 0x78
 8005190:	9802      	ldr	r0, [sp, #8]
 8005192:	f007 fb8b 	bl	800c8ac <ZbApsmeBindReq>
 8005196:	2200      	movs	r2, #0
 8005198:	a926      	add	r1, sp, #152	; 0x98
 800519a:	0020      	movs	r0, r4
 800519c:	f7fb f996 	bl	80004cc <ZbZclClusterInitApsdeReq>
 80051a0:	a826      	add	r0, sp, #152	; 0x98
 80051a2:	f115 0110 	adds.w	r1, r5, #16
 80051a6:	2210      	movs	r2, #16
 80051a8:	f00a fd26 	bl	800fbf8 <__aeabi_memcpy>
 80051ac:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 80051b0:	f7fb f927 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 80051b4:	f8ad 00bc 	strh.w	r0, [sp, #188]	; 0xbc
 80051b8:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 80051bc:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 80051c0:	f8ad 00bc 	strh.w	r0, [sp, #188]	; 0xbc
 80051c4:	2001      	movs	r0, #1
 80051c6:	f88d 00be 	strb.w	r0, [sp, #190]	; 0xbe
 80051ca:	2000      	movs	r0, #0
 80051cc:	f88d 00bf 	strb.w	r0, [sp, #191]	; 0xbf
 80051d0:	a817      	add	r0, sp, #92	; 0x5c
 80051d2:	9019      	str	r0, [sp, #100]	; 0x64
 80051d4:	9806      	ldr	r0, [sp, #24]
 80051d6:	901a      	str	r0, [sp, #104]	; 0x68
 80051d8:	a83c      	add	r0, sp, #240	; 0xf0
 80051da:	901b      	str	r0, [sp, #108]	; 0x6c
 80051dc:	971c      	str	r7, [sp, #112]	; 0x70
 80051de:	a819      	add	r0, sp, #100	; 0x64
 80051e0:	902c      	str	r0, [sp, #176]	; 0xb0
 80051e2:	2002      	movs	r0, #2
 80051e4:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 80051e8:	2300      	movs	r3, #0
 80051ea:	2200      	movs	r2, #0
 80051ec:	a926      	add	r1, sp, #152	; 0x98
 80051ee:	9802      	ldr	r0, [sp, #8]
 80051f0:	f007 fa5e 	bl	800c6b0 <ZbApsdeDataReqCallback>
 80051f4:	f89d 0002 	ldrb.w	r0, [sp, #2]
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d013      	beq.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 80051fc:	2301      	movs	r3, #1
 80051fe:	aa01      	add	r2, sp, #4
 8005200:	f240 410c 	movw	r1, #1036	; 0x40c
 8005204:	9802      	ldr	r0, [sp, #8]
 8005206:	f007 fd99 	bl	800cd3c <ZbNwkGet>
 800520a:	2800      	cmp	r0, #0
 800520c:	d002      	beq.n	8005214 <ZbZclHandleConfigReport+0x4e6>
 800520e:	2000      	movs	r0, #0
 8005210:	f88d 0004 	strb.w	r0, [sp, #4]
 8005214:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005218:	2800      	cmp	r0, #0
 800521a:	d103      	bne.n	8005224 <ZbZclHandleConfigReport+0x4f6>
 800521c:	21c8      	movs	r1, #200	; 0xc8
 800521e:	0020      	movs	r0, r4
 8005220:	f7fe ff86 	bl	8004130 <zcl_report_kick>
 8005224:	b04b      	add	sp, #300	; 0x12c
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800522a <ZbZclHandleReadReport>:
 800522a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522e:	b09a      	sub	sp, #104	; 0x68
 8005230:	4680      	mov	r8, r0
 8005232:	4691      	mov	r9, r2
 8005234:	f05f 0a00 	movs.w	sl, #0
 8005238:	2300      	movs	r3, #0
 800523a:	a28d      	add	r2, pc, #564	; (adr r2, 8005470 <.text_37>)
 800523c:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8005240:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005244:	f007 fff6 	bl	800d234 <zb_heap_alloc>
 8005248:	0007      	movs	r7, r0
 800524a:	2f00      	cmp	r7, #0
 800524c:	d106      	bne.n	800525c <ZbZclHandleReadReport+0x32>
 800524e:	2389      	movs	r3, #137	; 0x89
 8005250:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005252:	4649      	mov	r1, r9
 8005254:	4640      	mov	r0, r8
 8005256:	f007 fe72 	bl	800cf3e <ZbZclSendDefaultResponse>
 800525a:	e105      	b.n	8005468 <ZbZclHandleReadReport+0x23e>
 800525c:	2408      	movs	r4, #8
 800525e:	2500      	movs	r5, #0
 8005260:	ae01      	add	r6, sp, #4
 8005262:	002a      	movs	r2, r5
 8005264:	0021      	movs	r1, r4
 8005266:	0030      	movs	r0, r6
 8005268:	f001 f91f 	bl	80064aa <__aeabi_memset>
 800526c:	2000      	movs	r0, #0
 800526e:	f88d 0004 	strb.w	r0, [sp, #4]
 8005272:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005274:	7840      	ldrb	r0, [r0, #1]
 8005276:	f88d 0005 	strb.w	r0, [sp, #5]
 800527a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800527c:	7880      	ldrb	r0, [r0, #2]
 800527e:	2800      	cmp	r0, #0
 8005280:	d103      	bne.n	800528a <ZbZclHandleReadReport+0x60>
 8005282:	2001      	movs	r0, #1
 8005284:	f88d 0006 	strb.w	r0, [sp, #6]
 8005288:	e002      	b.n	8005290 <ZbZclHandleReadReport+0x66>
 800528a:	2000      	movs	r0, #0
 800528c:	f88d 0006 	strb.w	r0, [sp, #6]
 8005290:	2001      	movs	r0, #1
 8005292:	f88d 0007 	strb.w	r0, [sp, #7]
 8005296:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005298:	8880      	ldrh	r0, [r0, #4]
 800529a:	f8ad 0008 	strh.w	r0, [sp, #8]
 800529e:	981a      	ldr	r0, [sp, #104]	; 0x68
 80052a0:	7980      	ldrb	r0, [r0, #6]
 80052a2:	f88d 000a 	strb.w	r0, [sp, #10]
 80052a6:	2009      	movs	r0, #9
 80052a8:	f88d 000b 	strb.w	r0, [sp, #11]
 80052ac:	2205      	movs	r2, #5
 80052ae:	0039      	movs	r1, r7
 80052b0:	a801      	add	r0, sp, #4
 80052b2:	f7fc f941 	bl	8001538 <ZbZclAppendHeader>
 80052b6:	0004      	movs	r4, r0
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	d506      	bpl.n	80052ca <ZbZclHandleReadReport+0xa0>
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80052c0:	4649      	mov	r1, r9
 80052c2:	4640      	mov	r0, r8
 80052c4:	f007 fe3b 	bl	800cf3e <ZbZclSendDefaultResponse>
 80052c8:	e0ce      	b.n	8005468 <ZbZclHandleReadReport+0x23e>
 80052ca:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 80052ce:	4582      	cmp	sl, r0
 80052d0:	f080 80a1 	bcs.w	8005416 <ZbZclHandleReadReport+0x1ec>
 80052d4:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 80052d8:	f11a 0103 	adds.w	r1, sl, #3
 80052dc:	4288      	cmp	r0, r1
 80052de:	d206      	bcs.n	80052ee <ZbZclHandleReadReport+0xc4>
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80052e4:	4649      	mov	r1, r9
 80052e6:	4640      	mov	r0, r8
 80052e8:	f007 fe29 	bl	800cf3e <ZbZclSendDefaultResponse>
 80052ec:	e0bc      	b.n	8005468 <ZbZclHandleReadReport+0x23e>
 80052ee:	4650      	mov	r0, sl
 80052f0:	f110 0a01 	adds.w	sl, r0, #1
 80052f4:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 80052f8:	5c08      	ldrb	r0, [r1, r0]
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d003      	beq.n	8005306 <ZbZclHandleReadReport+0xdc>
 80052fe:	2001      	movs	r0, #1
 8005300:	f88d 0000 	strb.w	r0, [sp]
 8005304:	e002      	b.n	800530c <ZbZclHandleReadReport+0xe2>
 8005306:	2000      	movs	r0, #0
 8005308:	f88d 0000 	strb.w	r0, [sp]
 800530c:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8005310:	4450      	add	r0, sl
 8005312:	f7fc fe35 	bl	8001f80 <pletoh16>
 8005316:	f8ad 0002 	strh.w	r0, [sp, #2]
 800531a:	f11a 0a02 	adds.w	sl, sl, #2
 800531e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005322:	4640      	mov	r0, r8
 8005324:	f7fc fefb 	bl	800211e <ZbZclAttrFind>
 8005328:	0006      	movs	r6, r0
 800532a:	2e00      	cmp	r6, #0
 800532c:	d102      	bne.n	8005334 <ZbZclHandleReadReport+0x10a>
 800532e:	f05f 0b86 	movs.w	fp, #134	; 0x86
 8005332:	e05c      	b.n	80053ee <ZbZclHandleReadReport+0x1c4>
 8005334:	68b0      	ldr	r0, [r6, #8]
 8005336:	7900      	ldrb	r0, [r0, #4]
 8005338:	0780      	lsls	r0, r0, #30
 800533a:	d402      	bmi.n	8005342 <ZbZclHandleReadReport+0x118>
 800533c:	f05f 0b8c 	movs.w	fp, #140	; 0x8c
 8005340:	e055      	b.n	80053ee <ZbZclHandleReadReport+0x1c4>
 8005342:	f89d 2000 	ldrb.w	r2, [sp]
 8005346:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800534a:	4640      	mov	r0, r8
 800534c:	f7ff fa44 	bl	80047d8 <zcl_reporting_find>
 8005350:	0005      	movs	r5, r0
 8005352:	2d00      	cmp	r5, #0
 8005354:	d102      	bne.n	800535c <ZbZclHandleReadReport+0x132>
 8005356:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 800535a:	e048      	b.n	80053ee <ZbZclHandleReadReport+0x1c4>
 800535c:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 800535e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005362:	4288      	cmp	r0, r1
 8005364:	d102      	bne.n	800536c <ZbZclHandleReadReport+0x142>
 8005366:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 800536a:	e040      	b.n	80053ee <ZbZclHandleReadReport+0x1c4>
 800536c:	2020      	movs	r0, #32
 800536e:	9005      	str	r0, [sp, #20]
 8005370:	2000      	movs	r0, #0
 8005372:	9004      	str	r0, [sp, #16]
 8005374:	f10d 0b18 	add.w	fp, sp, #24
 8005378:	9a04      	ldr	r2, [sp, #16]
 800537a:	9905      	ldr	r1, [sp, #20]
 800537c:	4658      	mov	r0, fp
 800537e:	f001 f894 	bl	80064aa <__aeabi_memset>
 8005382:	f89d 0000 	ldrb.w	r0, [sp]
 8005386:	2800      	cmp	r0, #0
 8005388:	d003      	beq.n	8005392 <ZbZclHandleReadReport+0x168>
 800538a:	2001      	movs	r0, #1
 800538c:	f88d 0018 	strb.w	r0, [sp, #24]
 8005390:	e002      	b.n	8005398 <ZbZclHandleReadReport+0x16e>
 8005392:	2000      	movs	r0, #0
 8005394:	f88d 0018 	strb.w	r0, [sp, #24]
 8005398:	89a8      	ldrh	r0, [r5, #12]
 800539a:	f8ad 001a 	strh.w	r0, [sp, #26]
 800539e:	7ba8      	ldrb	r0, [r5, #14]
 80053a0:	f88d 001c 	strb.w	r0, [sp, #28]
 80053a4:	8c28      	ldrh	r0, [r5, #32]
 80053a6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80053aa:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80053ac:	f8ad 0020 	strh.w	r0, [sp, #32]
 80053b0:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
 80053b4:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
 80053b8:	2000      	movs	r0, #0
 80053ba:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80053be:	2000      	movs	r0, #0
 80053c0:	5538      	strb	r0, [r7, r4]
 80053c2:	1c64      	adds	r4, r4, #1
 80053c4:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80053c8:	0020      	movs	r0, r4
 80053ca:	b280      	uxth	r0, r0
 80053cc:	1a12      	subs	r2, r2, r0
 80053ce:	eb07 0104 	add.w	r1, r7, r4
 80053d2:	a806      	add	r0, sp, #24
 80053d4:	f000 f896 	bl	8005504 <zcl_append_report_config_record>
 80053d8:	9003      	str	r0, [sp, #12]
 80053da:	9803      	ldr	r0, [sp, #12]
 80053dc:	2800      	cmp	r0, #0
 80053de:	d503      	bpl.n	80053e8 <ZbZclHandleReadReport+0x1be>
 80053e0:	1e64      	subs	r4, r4, #1
 80053e2:	f05f 0b01 	movs.w	fp, #1
 80053e6:	e002      	b.n	80053ee <ZbZclHandleReadReport+0x1c4>
 80053e8:	9803      	ldr	r0, [sp, #12]
 80053ea:	1904      	adds	r4, r0, r4
 80053ec:	e76d      	b.n	80052ca <ZbZclHandleReadReport+0xa0>
 80053ee:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 80053f2:	1ce1      	adds	r1, r4, #3
 80053f4:	4288      	cmp	r0, r1
 80053f6:	d30e      	bcc.n	8005416 <ZbZclHandleReadReport+0x1ec>
 80053f8:	f807 b004 	strb.w	fp, [r7, r4]
 80053fc:	1c64      	adds	r4, r4, #1
 80053fe:	f89d 0000 	ldrb.w	r0, [sp]
 8005402:	5538      	strb	r0, [r7, r4]
 8005404:	1c64      	adds	r4, r4, #1
 8005406:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800540a:	eb07 0004 	add.w	r0, r7, r4
 800540e:	f7fc fe03 	bl	8002018 <putle16>
 8005412:	1ca4      	adds	r4, r4, #2
 8005414:	e759      	b.n	80052ca <ZbZclHandleReadReport+0xa0>
 8005416:	464a      	mov	r2, r9
 8005418:	a90e      	add	r1, sp, #56	; 0x38
 800541a:	4640      	mov	r0, r8
 800541c:	f7fb f856 	bl	80004cc <ZbZclClusterInitApsdeReq>
 8005420:	a80e      	add	r0, sp, #56	; 0x38
 8005422:	f119 0110 	adds.w	r1, r9, #16
 8005426:	2210      	movs	r2, #16
 8005428:	f00a fbe6 	bl	800fbf8 <__aeabi_memcpy>
 800542c:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 8005430:	f7fa ffe7 	bl	8000402 <ZbZclTxOptsFromSecurityStatus>
 8005434:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8005438:	2001      	movs	r0, #1
 800543a:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
 800543e:	2000      	movs	r0, #0
 8005440:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
 8005444:	9714      	str	r7, [sp, #80]	; 0x50
 8005446:	0020      	movs	r0, r4
 8005448:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 800544c:	2300      	movs	r3, #0
 800544e:	2200      	movs	r2, #0
 8005450:	a90e      	add	r1, sp, #56	; 0x38
 8005452:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005456:	f007 f92b 	bl	800c6b0 <ZbApsdeDataReqCallback>
 800545a:	2300      	movs	r3, #0
 800545c:	a204      	add	r2, pc, #16	; (adr r2, 8005470 <.text_37>)
 800545e:	0039      	movs	r1, r7
 8005460:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005464:	f007 fef5 	bl	800d252 <zb_heap_free>
 8005468:	b01b      	add	sp, #108	; 0x6c
 800546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005470 <.text_37>:
 8005470:	00000000 	.word	0x00000000

08005474 <ZbZclHandleReportAttr>:
 8005474:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	0004      	movs	r4, r0
 800547a:	000d      	movs	r5, r1
 800547c:	0016      	movs	r6, r2
 800547e:	f05f 0a00 	movs.w	sl, #0
 8005482:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005484:	2800      	cmp	r0, #0
 8005486:	d03b      	beq.n	8005500 <ZbZclHandleReportAttr+0x8c>
 8005488:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800548a:	4651      	mov	r1, sl
 800548c:	b289      	uxth	r1, r1
 800548e:	1cc9      	adds	r1, r1, #3
 8005490:	4288      	cmp	r0, r1
 8005492:	d335      	bcc.n	8005500 <ZbZclHandleReportAttr+0x8c>
 8005494:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005496:	4651      	mov	r1, sl
 8005498:	b289      	uxth	r1, r1
 800549a:	4408      	add	r0, r1
 800549c:	f7fc fd70 	bl	8001f80 <pletoh16>
 80054a0:	0007      	movs	r7, r0
 80054a2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80054a4:	4651      	mov	r1, sl
 80054a6:	b289      	uxth	r1, r1
 80054a8:	4408      	add	r0, r1
 80054aa:	7880      	ldrb	r0, [r0, #2]
 80054ac:	4680      	mov	r8, r0
 80054ae:	f11a 0a03 	adds.w	sl, sl, #3
 80054b2:	2300      	movs	r3, #0
 80054b4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80054b6:	4650      	mov	r0, sl
 80054b8:	b280      	uxth	r0, r0
 80054ba:	1a12      	subs	r2, r2, r0
 80054bc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80054be:	4651      	mov	r1, sl
 80054c0:	b289      	uxth	r1, r1
 80054c2:	4401      	add	r1, r0
 80054c4:	4640      	mov	r0, r8
 80054c6:	b2c0      	uxtb	r0, r0
 80054c8:	f7fd fd51 	bl	8002f6e <ZbZclAttrParseLength>
 80054cc:	4681      	mov	r9, r0
 80054ce:	f1b9 0f00 	cmp.w	r9, #0
 80054d2:	d415      	bmi.n	8005500 <ZbZclHandleReportAttr+0x8c>
 80054d4:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80054d6:	ebb0 000a 	subs.w	r0, r0, sl
 80054da:	b280      	uxth	r0, r0
 80054dc:	9001      	str	r0, [sp, #4]
 80054de:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80054e0:	4651      	mov	r1, sl
 80054e2:	b289      	uxth	r1, r1
 80054e4:	4408      	add	r0, r1
 80054e6:	9000      	str	r0, [sp, #0]
 80054e8:	4643      	mov	r3, r8
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	003a      	movs	r2, r7
 80054ee:	b292      	uxth	r2, r2
 80054f0:	0031      	movs	r1, r6
 80054f2:	0020      	movs	r0, r4
 80054f4:	f8d4 c05c 	ldr.w	ip, [r4, #92]	; 0x5c
 80054f8:	47e0      	blx	ip
 80054fa:	eb19 0a0a 	adds.w	sl, r9, sl
 80054fe:	e7c3      	b.n	8005488 <ZbZclHandleReportAttr+0x14>
 8005500:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

08005504 <zcl_append_report_config_record>:
 8005504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005508:	0005      	movs	r5, r0
 800550a:	000e      	movs	r6, r1
 800550c:	4690      	mov	r8, r2
 800550e:	2700      	movs	r7, #0
 8005510:	7828      	ldrb	r0, [r5, #0]
 8005512:	2800      	cmp	r0, #0
 8005514:	d003      	beq.n	800551e <zcl_append_report_config_record+0x1a>
 8005516:	2801      	cmp	r0, #1
 8005518:	f000 80f4 	beq.w	8005704 <zcl_append_report_config_record+0x200>
 800551c:	e108      	b.n	8005730 <zcl_append_report_config_record+0x22c>
 800551e:	7928      	ldrb	r0, [r5, #4]
 8005520:	f000 ffb6 	bl	8006490 <ZbZclAttrIsFloat>
 8005524:	2800      	cmp	r0, #0
 8005526:	d002      	beq.n	800552e <zcl_append_report_config_record+0x2a>
 8005528:	2001      	movs	r0, #1
 800552a:	4681      	mov	r9, r0
 800552c:	e009      	b.n	8005542 <zcl_append_report_config_record+0x3e>
 800552e:	7928      	ldrb	r0, [r5, #4]
 8005530:	f7fd fdce 	bl	80030d0 <ZbZclAttrIsAnalog>
 8005534:	2800      	cmp	r0, #0
 8005536:	d002      	beq.n	800553e <zcl_append_report_config_record+0x3a>
 8005538:	2001      	movs	r0, #1
 800553a:	4681      	mov	r9, r0
 800553c:	e001      	b.n	8005542 <zcl_append_report_config_record+0x3e>
 800553e:	2000      	movs	r0, #0
 8005540:	4681      	mov	r9, r0
 8005542:	f1b8 0f08 	cmp.w	r8, #8
 8005546:	d202      	bcs.n	800554e <zcl_append_report_config_record+0x4a>
 8005548:	f05f 30ff 	movs.w	r0, #4294967295
 800554c:	e0f3      	b.n	8005736 <zcl_append_report_config_record+0x232>
 800554e:	7828      	ldrb	r0, [r5, #0]
 8005550:	55f0      	strb	r0, [r6, r7]
 8005552:	1c7f      	adds	r7, r7, #1
 8005554:	8869      	ldrh	r1, [r5, #2]
 8005556:	eb06 0007 	add.w	r0, r6, r7
 800555a:	f7fc fd5d 	bl	8002018 <putle16>
 800555e:	1cbf      	adds	r7, r7, #2
 8005560:	7928      	ldrb	r0, [r5, #4]
 8005562:	55f0      	strb	r0, [r6, r7]
 8005564:	1c7f      	adds	r7, r7, #1
 8005566:	88e9      	ldrh	r1, [r5, #6]
 8005568:	eb06 0007 	add.w	r0, r6, r7
 800556c:	f7fc fd54 	bl	8002018 <putle16>
 8005570:	1cbf      	adds	r7, r7, #2
 8005572:	8929      	ldrh	r1, [r5, #8]
 8005574:	eb06 0007 	add.w	r0, r6, r7
 8005578:	f7fc fd4e 	bl	8002018 <putle16>
 800557c:	1cbf      	adds	r7, r7, #2
 800557e:	4648      	mov	r0, r9
 8005580:	b2c0      	uxtb	r0, r0
 8005582:	2800      	cmp	r0, #0
 8005584:	f000 80bd 	beq.w	8005702 <zcl_append_report_config_record+0x1fe>
 8005588:	7928      	ldrb	r0, [r5, #4]
 800558a:	f7fd fc65 	bl	8002e58 <ZbZclAttrTypeLength>
 800558e:	0004      	movs	r4, r0
 8005590:	2c00      	cmp	r4, #0
 8005592:	d101      	bne.n	8005598 <zcl_append_report_config_record+0x94>
 8005594:	2001      	movs	r0, #1
 8005596:	e0ce      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005598:	2c01      	cmp	r4, #1
 800559a:	d00e      	beq.n	80055ba <zcl_append_report_config_record+0xb6>
 800559c:	f0c0 80af 	bcc.w	80056fe <zcl_append_report_config_record+0x1fa>
 80055a0:	2c03      	cmp	r4, #3
 80055a2:	d02f      	beq.n	8005604 <zcl_append_report_config_record+0x100>
 80055a4:	d319      	bcc.n	80055da <zcl_append_report_config_record+0xd6>
 80055a6:	2c05      	cmp	r4, #5
 80055a8:	d054      	beq.n	8005654 <zcl_append_report_config_record+0x150>
 80055aa:	d33f      	bcc.n	800562c <zcl_append_report_config_record+0x128>
 80055ac:	2c07      	cmp	r4, #7
 80055ae:	d07c      	beq.n	80056aa <zcl_append_report_config_record+0x1a6>
 80055b0:	d365      	bcc.n	800567e <zcl_append_report_config_record+0x17a>
 80055b2:	2c08      	cmp	r4, #8
 80055b4:	f000 808e 	beq.w	80056d4 <zcl_append_report_config_record+0x1d0>
 80055b8:	e0a1      	b.n	80056fe <zcl_append_report_config_record+0x1fa>
 80055ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055be:	2201      	movs	r2, #1
 80055c0:	4b5f      	ldr	r3, [pc, #380]	; (8005740 <.text_41>)
 80055c2:	f001 fc3d 	bl	8006e40 <__aeabi_cdrcmple>
 80055c6:	d801      	bhi.n	80055cc <zcl_append_report_config_record+0xc8>
 80055c8:	2001      	movs	r0, #1
 80055ca:	e0b4      	b.n	8005736 <zcl_append_report_config_record+0x232>
 80055cc:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055d0:	f001 fc78 	bl	8006ec4 <__aeabi_d2iz>
 80055d4:	55f0      	strb	r0, [r6, r7]
 80055d6:	1c7f      	adds	r7, r7, #1
 80055d8:	e093      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 80055da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055de:	2201      	movs	r2, #1
 80055e0:	4b58      	ldr	r3, [pc, #352]	; (8005744 <.text_42>)
 80055e2:	f001 fc2d 	bl	8006e40 <__aeabi_cdrcmple>
 80055e6:	d801      	bhi.n	80055ec <zcl_append_report_config_record+0xe8>
 80055e8:	2001      	movs	r0, #1
 80055ea:	e0a4      	b.n	8005736 <zcl_append_report_config_record+0x232>
 80055ec:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055f0:	f001 fc68 	bl	8006ec4 <__aeabi_d2iz>
 80055f4:	0001      	movs	r1, r0
 80055f6:	b289      	uxth	r1, r1
 80055f8:	eb06 0007 	add.w	r0, r6, r7
 80055fc:	f7fc fd0c 	bl	8002018 <putle16>
 8005600:	1cbf      	adds	r7, r7, #2
 8005602:	e07e      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 8005604:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005608:	4a4f      	ldr	r2, [pc, #316]	; (8005748 <.text_43>)
 800560a:	4b50      	ldr	r3, [pc, #320]	; (800574c <.text_44>)
 800560c:	f001 fc18 	bl	8006e40 <__aeabi_cdrcmple>
 8005610:	d801      	bhi.n	8005616 <zcl_append_report_config_record+0x112>
 8005612:	2001      	movs	r0, #1
 8005614:	e08f      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005616:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800561a:	f001 fc7b 	bl	8006f14 <__aeabi_d2uiz>
 800561e:	0001      	movs	r1, r0
 8005620:	eb06 0007 	add.w	r0, r6, r7
 8005624:	f7fc fcfe 	bl	8002024 <putle24>
 8005628:	1cff      	adds	r7, r7, #3
 800562a:	e06a      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 800562c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005630:	4a47      	ldr	r2, [pc, #284]	; (8005750 <.text_45>)
 8005632:	4b48      	ldr	r3, [pc, #288]	; (8005754 <.text_46>)
 8005634:	f001 fc04 	bl	8006e40 <__aeabi_cdrcmple>
 8005638:	d801      	bhi.n	800563e <zcl_append_report_config_record+0x13a>
 800563a:	2001      	movs	r0, #1
 800563c:	e07b      	b.n	8005736 <zcl_append_report_config_record+0x232>
 800563e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005642:	f001 fc67 	bl	8006f14 <__aeabi_d2uiz>
 8005646:	0001      	movs	r1, r0
 8005648:	eb06 0007 	add.w	r0, r6, r7
 800564c:	f7fc fcf6 	bl	800203c <putle32>
 8005650:	1d3f      	adds	r7, r7, #4
 8005652:	e056      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 8005654:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005658:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <.text_47>)
 800565a:	4b40      	ldr	r3, [pc, #256]	; (800575c <.text_48>)
 800565c:	f001 fbf0 	bl	8006e40 <__aeabi_cdrcmple>
 8005660:	d801      	bhi.n	8005666 <zcl_append_report_config_record+0x162>
 8005662:	2001      	movs	r0, #1
 8005664:	e067      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005666:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800566a:	f001 fca3 	bl	8006fb4 <__aeabi_d2ulz>
 800566e:	0002      	movs	r2, r0
 8005670:	000b      	movs	r3, r1
 8005672:	eb06 0007 	add.w	r0, r6, r7
 8005676:	f7fc fcec 	bl	8002052 <putle40>
 800567a:	1d7f      	adds	r7, r7, #5
 800567c:	e041      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 800567e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005682:	f07f 021e 	mvns.w	r2, #30
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <.text_49>)
 8005688:	f001 fbda 	bl	8006e40 <__aeabi_cdrcmple>
 800568c:	d801      	bhi.n	8005692 <zcl_append_report_config_record+0x18e>
 800568e:	2001      	movs	r0, #1
 8005690:	e051      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005692:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005696:	f001 fc8d 	bl	8006fb4 <__aeabi_d2ulz>
 800569a:	0002      	movs	r2, r0
 800569c:	000b      	movs	r3, r1
 800569e:	eb06 0007 	add.w	r0, r6, r7
 80056a2:	f7fc fce0 	bl	8002066 <putle48>
 80056a6:	1dbf      	adds	r7, r7, #6
 80056a8:	e02b      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 80056aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80056ae:	2201      	movs	r2, #1
 80056b0:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <.text_50>)
 80056b2:	f001 fbc5 	bl	8006e40 <__aeabi_cdrcmple>
 80056b6:	d801      	bhi.n	80056bc <zcl_append_report_config_record+0x1b8>
 80056b8:	2001      	movs	r0, #1
 80056ba:	e03c      	b.n	8005736 <zcl_append_report_config_record+0x232>
 80056bc:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80056c0:	f001 fc78 	bl	8006fb4 <__aeabi_d2ulz>
 80056c4:	0002      	movs	r2, r0
 80056c6:	000b      	movs	r3, r1
 80056c8:	eb06 0007 	add.w	r0, r6, r7
 80056cc:	f7fc fcda 	bl	8002084 <putle56>
 80056d0:	1dff      	adds	r7, r7, #7
 80056d2:	e016      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 80056d4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80056d8:	2201      	movs	r2, #1
 80056da:	4b23      	ldr	r3, [pc, #140]	; (8005768 <.text_51>)
 80056dc:	f001 fbb0 	bl	8006e40 <__aeabi_cdrcmple>
 80056e0:	d801      	bhi.n	80056e6 <zcl_append_report_config_record+0x1e2>
 80056e2:	2001      	movs	r0, #1
 80056e4:	e027      	b.n	8005736 <zcl_append_report_config_record+0x232>
 80056e6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80056ea:	f001 fc63 	bl	8006fb4 <__aeabi_d2ulz>
 80056ee:	0002      	movs	r2, r0
 80056f0:	000b      	movs	r3, r1
 80056f2:	eb06 0007 	add.w	r0, r6, r7
 80056f6:	f7fc fcd4 	bl	80020a2 <putle64>
 80056fa:	3708      	adds	r7, #8
 80056fc:	e001      	b.n	8005702 <zcl_append_report_config_record+0x1fe>
 80056fe:	2001      	movs	r0, #1
 8005700:	e019      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005702:	e017      	b.n	8005734 <zcl_append_report_config_record+0x230>
 8005704:	f1b8 0f08 	cmp.w	r8, #8
 8005708:	d202      	bcs.n	8005710 <zcl_append_report_config_record+0x20c>
 800570a:	f05f 30ff 	movs.w	r0, #4294967295
 800570e:	e012      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005710:	7828      	ldrb	r0, [r5, #0]
 8005712:	55f0      	strb	r0, [r6, r7]
 8005714:	1c7f      	adds	r7, r7, #1
 8005716:	8869      	ldrh	r1, [r5, #2]
 8005718:	eb06 0007 	add.w	r0, r6, r7
 800571c:	f7fc fc7c 	bl	8002018 <putle16>
 8005720:	1cbf      	adds	r7, r7, #2
 8005722:	8b29      	ldrh	r1, [r5, #24]
 8005724:	eb06 0007 	add.w	r0, r6, r7
 8005728:	f7fc fc76 	bl	8002018 <putle16>
 800572c:	1cbf      	adds	r7, r7, #2
 800572e:	e001      	b.n	8005734 <zcl_append_report_config_record+0x230>
 8005730:	2001      	movs	r0, #1
 8005732:	e000      	b.n	8005736 <zcl_append_report_config_record+0x232>
 8005734:	0038      	movs	r0, r7
 8005736:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

0800573c <.text_40>:
 800573c:	3ff00000 	.word	0x3ff00000

08005740 <.text_41>:
 8005740:	406fe000 	.word	0x406fe000

08005744 <.text_42>:
 8005744:	40efffe0 	.word	0x40efffe0

08005748 <.text_43>:
 8005748:	e0000001 	.word	0xe0000001

0800574c <.text_44>:
 800574c:	416fffff 	.word	0x416fffff

08005750 <.text_45>:
 8005750:	ffe00001 	.word	0xffe00001

08005754 <.text_46>:
 8005754:	41efffff 	.word	0x41efffff

08005758 <.text_47>:
 8005758:	ffffe001 	.word	0xffffe001

0800575c <.text_48>:
 800575c:	426fffff 	.word	0x426fffff

08005760 <.text_49>:
 8005760:	42efffff 	.word	0x42efffff

08005764 <.text_50>:
 8005764:	43700000 	.word	0x43700000

08005768 <.text_51>:
 8005768:	43f00000 	.word	0x43f00000

0800576c <ZbZclAttrReportConfigReq>:
 800576c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	b09b      	sub	sp, #108	; 0x6c
 8005772:	0004      	movs	r4, r0
 8005774:	000d      	movs	r5, r1
 8005776:	001e      	movs	r6, r3
 8005778:	2700      	movs	r7, #0
 800577a:	7c28      	ldrb	r0, [r5, #16]
 800577c:	2800      	cmp	r0, #0
 800577e:	d002      	beq.n	8005786 <ZbZclAttrReportConfigReq+0x1a>
 8005780:	7c28      	ldrb	r0, [r5, #16]
 8005782:	2807      	cmp	r0, #7
 8005784:	d301      	bcc.n	800578a <ZbZclAttrReportConfigReq+0x1e>
 8005786:	2001      	movs	r0, #1
 8005788:	e059      	b.n	800583e <ZbZclAttrReportConfigReq+0xd2>
 800578a:	f05f 0800 	movs.w	r8, #0
 800578e:	7c28      	ldrb	r0, [r5, #16]
 8005790:	4580      	cmp	r8, r0
 8005792:	d215      	bcs.n	80057c0 <ZbZclAttrReportConfigReq+0x54>
 8005794:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8005798:	4428      	add	r0, r5
 800579a:	f110 0918 	adds.w	r9, r0, #24
 800579e:	f1d7 0239 	rsbs	r2, r7, #57	; 0x39
 80057a2:	a80c      	add	r0, sp, #48	; 0x30
 80057a4:	eb00 0107 	add.w	r1, r0, r7
 80057a8:	4648      	mov	r0, r9
 80057aa:	f7ff feab 	bl	8005504 <zcl_append_report_config_record>
 80057ae:	0001      	movs	r1, r0
 80057b0:	2901      	cmp	r1, #1
 80057b2:	da01      	bge.n	80057b8 <ZbZclAttrReportConfigReq+0x4c>
 80057b4:	2001      	movs	r0, #1
 80057b6:	e042      	b.n	800583e <ZbZclAttrReportConfigReq+0xd2>
 80057b8:	19cf      	adds	r7, r1, r7
 80057ba:	f118 0801 	adds.w	r8, r8, #1
 80057be:	e7e6      	b.n	800578e <ZbZclAttrReportConfigReq+0x22>
 80057c0:	f05f 0930 	movs.w	r9, #48	; 0x30
 80057c4:	f05f 0a00 	movs.w	sl, #0
 80057c8:	46eb      	mov	fp, sp
 80057ca:	4652      	mov	r2, sl
 80057cc:	4649      	mov	r1, r9
 80057ce:	4658      	mov	r0, fp
 80057d0:	f000 fe6b 	bl	80064aa <__aeabi_memset>
 80057d4:	2000      	movs	r0, #0
 80057d6:	f88d 001a 	strb.w	r0, [sp, #26]
 80057da:	8a20      	ldrh	r0, [r4, #16]
 80057dc:	2800      	cmp	r0, #0
 80057de:	d001      	beq.n	80057e4 <ZbZclAttrReportConfigReq+0x78>
 80057e0:	2001      	movs	r0, #1
 80057e2:	e000      	b.n	80057e6 <ZbZclAttrReportConfigReq+0x7a>
 80057e4:	2000      	movs	r0, #0
 80057e6:	f88d 001b 	strb.w	r0, [sp, #27]
 80057ea:	8a20      	ldrh	r0, [r4, #16]
 80057ec:	f8ad 001e 	strh.w	r0, [sp, #30]
 80057f0:	2006      	movs	r0, #6
 80057f2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80057f6:	f007 fb2d 	bl	800ce54 <ZbZclGetNextSeqnum>
 80057fa:	f88d 0020 	strb.w	r0, [sp, #32]
 80057fe:	4668      	mov	r0, sp
 8005800:	0029      	movs	r1, r5
 8005802:	2210      	movs	r2, #16
 8005804:	f00a f9f8 	bl	800fbf8 <__aeabi_memcpy>
 8005808:	8aa0      	ldrh	r0, [r4, #20]
 800580a:	f8ad 0010 	strh.w	r0, [sp, #16]
 800580e:	89a0      	ldrh	r0, [r4, #12]
 8005810:	f8ad 0012 	strh.w	r0, [sp, #18]
 8005814:	7ba0      	ldrb	r0, [r4, #14]
 8005816:	f8ad 0014 	strh.w	r0, [sp, #20]
 800581a:	8ae0      	ldrh	r0, [r4, #22]
 800581c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8005820:	7e20      	ldrb	r0, [r4, #24]
 8005822:	f88d 0018 	strb.w	r0, [sp, #24]
 8005826:	7e60      	ldrb	r0, [r4, #25]
 8005828:	f88d 0019 	strb.w	r0, [sp, #25]
 800582c:	a80c      	add	r0, sp, #48	; 0x30
 800582e:	9009      	str	r0, [sp, #36]	; 0x24
 8005830:	970a      	str	r7, [sp, #40]	; 0x28
 8005832:	0033      	movs	r3, r6
 8005834:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005836:	4669      	mov	r1, sp
 8005838:	68a0      	ldr	r0, [r4, #8]
 800583a:	f007 fb33 	bl	800cea4 <ZbZclCommandReq>
 800583e:	b01d      	add	sp, #116	; 0x74
 8005840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005844 <ZbZclAttrReportReadReq>:
 8005844:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	b09b      	sub	sp, #108	; 0x6c
 800584a:	0005      	movs	r5, r0
 800584c:	000e      	movs	r6, r1
 800584e:	001f      	movs	r7, r3
 8005850:	2400      	movs	r4, #0
 8005852:	7c30      	ldrb	r0, [r6, #16]
 8005854:	2800      	cmp	r0, #0
 8005856:	d002      	beq.n	800585e <ZbZclAttrReportReadReq+0x1a>
 8005858:	7c30      	ldrb	r0, [r6, #16]
 800585a:	2807      	cmp	r0, #7
 800585c:	d301      	bcc.n	8005862 <ZbZclAttrReportReadReq+0x1e>
 800585e:	2001      	movs	r0, #1
 8005860:	e050      	b.n	8005904 <ZbZclAttrReportReadReq+0xc0>
 8005862:	f05f 0800 	movs.w	r8, #0
 8005866:	7c30      	ldrb	r0, [r6, #16]
 8005868:	4580      	cmp	r8, r0
 800586a:	d217      	bcs.n	800589c <ZbZclAttrReportReadReq+0x58>
 800586c:	1ce0      	adds	r0, r4, #3
 800586e:	283a      	cmp	r0, #58	; 0x3a
 8005870:	d301      	bcc.n	8005876 <ZbZclAttrReportReadReq+0x32>
 8005872:	2001      	movs	r0, #1
 8005874:	e046      	b.n	8005904 <ZbZclAttrReportReadReq+0xc0>
 8005876:	ea5f 1048 	movs.w	r0, r8, lsl #5
 800587a:	4430      	add	r0, r6
 800587c:	7e00      	ldrb	r0, [r0, #24]
 800587e:	a90c      	add	r1, sp, #48	; 0x30
 8005880:	5508      	strb	r0, [r1, r4]
 8005882:	1c64      	adds	r4, r4, #1
 8005884:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8005888:	4430      	add	r0, r6
 800588a:	8b41      	ldrh	r1, [r0, #26]
 800588c:	a80c      	add	r0, sp, #48	; 0x30
 800588e:	4420      	add	r0, r4
 8005890:	f7fc fbc2 	bl	8002018 <putle16>
 8005894:	1ca4      	adds	r4, r4, #2
 8005896:	f118 0801 	adds.w	r8, r8, #1
 800589a:	e7e4      	b.n	8005866 <ZbZclAttrReportReadReq+0x22>
 800589c:	f05f 0930 	movs.w	r9, #48	; 0x30
 80058a0:	f05f 0a00 	movs.w	sl, #0
 80058a4:	46eb      	mov	fp, sp
 80058a6:	4652      	mov	r2, sl
 80058a8:	4649      	mov	r1, r9
 80058aa:	4658      	mov	r0, fp
 80058ac:	f000 fdfd 	bl	80064aa <__aeabi_memset>
 80058b0:	2000      	movs	r0, #0
 80058b2:	f88d 001a 	strb.w	r0, [sp, #26]
 80058b6:	2008      	movs	r0, #8
 80058b8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80058bc:	f007 faca 	bl	800ce54 <ZbZclGetNextSeqnum>
 80058c0:	f88d 0020 	strb.w	r0, [sp, #32]
 80058c4:	4668      	mov	r0, sp
 80058c6:	0031      	movs	r1, r6
 80058c8:	2210      	movs	r2, #16
 80058ca:	f00a f995 	bl	800fbf8 <__aeabi_memcpy>
 80058ce:	8aa8      	ldrh	r0, [r5, #20]
 80058d0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80058d4:	89a8      	ldrh	r0, [r5, #12]
 80058d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80058da:	7ba8      	ldrb	r0, [r5, #14]
 80058dc:	f8ad 0014 	strh.w	r0, [sp, #20]
 80058e0:	8ae8      	ldrh	r0, [r5, #22]
 80058e2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80058e6:	7e28      	ldrb	r0, [r5, #24]
 80058e8:	f88d 0018 	strb.w	r0, [sp, #24]
 80058ec:	7e68      	ldrb	r0, [r5, #25]
 80058ee:	f88d 0019 	strb.w	r0, [sp, #25]
 80058f2:	a80c      	add	r0, sp, #48	; 0x30
 80058f4:	9009      	str	r0, [sp, #36]	; 0x24
 80058f6:	940a      	str	r4, [sp, #40]	; 0x28
 80058f8:	003b      	movs	r3, r7
 80058fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058fc:	4669      	mov	r1, sp
 80058fe:	68a8      	ldr	r0, [r5, #8]
 8005900:	f007 fad0 	bl	800cea4 <ZbZclCommandReq>
 8005904:	b01d      	add	sp, #116	; 0x74
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800590a <ZbZclAttrReportConfigDefault>:
 800590a:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800590e:	0007      	movs	r7, r0
 8005910:	4688      	mov	r8, r1
 8005912:	4691      	mov	r9, r2
 8005914:	469a      	mov	sl, r3
 8005916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005918:	4641      	mov	r1, r8
 800591a:	b289      	uxth	r1, r1
 800591c:	0038      	movs	r0, r7
 800591e:	f7fc fbfe 	bl	800211e <ZbZclAttrFind>
 8005922:	0005      	movs	r5, r0
 8005924:	2d00      	cmp	r5, #0
 8005926:	d101      	bne.n	800592c <ZbZclAttrReportConfigDefault+0x22>
 8005928:	2086      	movs	r0, #134	; 0x86
 800592a:	e02b      	b.n	8005984 <ZbZclAttrReportConfigDefault+0x7a>
 800592c:	68a8      	ldr	r0, [r5, #8]
 800592e:	7900      	ldrb	r0, [r0, #4]
 8005930:	0780      	lsls	r0, r0, #30
 8005932:	d401      	bmi.n	8005938 <ZbZclAttrReportConfigDefault+0x2e>
 8005934:	208c      	movs	r0, #140	; 0x8c
 8005936:	e025      	b.n	8005984 <ZbZclAttrReportConfigDefault+0x7a>
 8005938:	2200      	movs	r2, #0
 800593a:	4641      	mov	r1, r8
 800593c:	b289      	uxth	r1, r1
 800593e:	0038      	movs	r0, r7
 8005940:	f7fe ff4a 	bl	80047d8 <zcl_reporting_find>
 8005944:	0006      	movs	r6, r0
 8005946:	2e00      	cmp	r6, #0
 8005948:	d101      	bne.n	800594e <ZbZclAttrReportConfigDefault+0x44>
 800594a:	208b      	movs	r0, #139	; 0x8b
 800594c:	e01a      	b.n	8005984 <ZbZclAttrReportConfigDefault+0x7a>
 800594e:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005952:	f8ad a000 	strh.w	sl, [sp]
 8005956:	4669      	mov	r1, sp
 8005958:	f10d 0002 	add.w	r0, sp, #2
 800595c:	f7ff f896 	bl	8004a8c <zcl_reporting_check_default_intvl>
 8005960:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8005964:	84b0      	strh	r0, [r6, #36]	; 0x24
 8005966:	f8bd 0000 	ldrh.w	r0, [sp]
 800596a:	84f0      	strh	r0, [r6, #38]	; 0x26
 800596c:	2c00      	cmp	r4, #0
 800596e:	d003      	beq.n	8005978 <ZbZclAttrReportConfigDefault+0x6e>
 8005970:	ed94 0b00 	vldr	d0, [r4]
 8005974:	ed86 0b0c 	vstr	d0, [r6, #48]	; 0x30
 8005978:	2201      	movs	r2, #1
 800597a:	0031      	movs	r1, r6
 800597c:	68b8      	ldr	r0, [r7, #8]
 800597e:	f7ff f8b7 	bl	8004af0 <zcl_reporting_reset_defaults>
 8005982:	2000      	movs	r0, #0
 8005984:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08005988 <ZbZclClusterReportCallbackAttach>:
 8005988:	65c1      	str	r1, [r0, #92]	; 0x5c
 800598a:	4770      	bx	lr

0800598c <ZbZclHandleGetSceneData>:
 800598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005990:	b0a2      	sub	sp, #136	; 0x88
 8005992:	0004      	movs	r4, r0
 8005994:	000d      	movs	r5, r1
 8005996:	0016      	movs	r6, r2
 8005998:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800599a:	2800      	cmp	r0, #0
 800599c:	d106      	bne.n	80059ac <ZbZclHandleGetSceneData+0x20>
 800599e:	2381      	movs	r3, #129	; 0x81
 80059a0:	002a      	movs	r2, r5
 80059a2:	0031      	movs	r1, r6
 80059a4:	0020      	movs	r0, r4
 80059a6:	f007 faca 	bl	800cf3e <ZbZclSendDefaultResponse>
 80059aa:	e06b      	b.n	8005a84 <ZbZclHandleGetSceneData+0xf8>
 80059ac:	2708      	movs	r7, #8
 80059ae:	f05f 0800 	movs.w	r8, #0
 80059b2:	46e9      	mov	r9, sp
 80059b4:	4642      	mov	r2, r8
 80059b6:	0039      	movs	r1, r7
 80059b8:	4648      	mov	r0, r9
 80059ba:	f000 fd76 	bl	80064aa <__aeabi_memset>
 80059be:	2000      	movs	r0, #0
 80059c0:	f88d 0000 	strb.w	r0, [sp]
 80059c4:	2001      	movs	r0, #1
 80059c6:	f88d 0001 	strb.w	r0, [sp, #1]
 80059ca:	78a8      	ldrb	r0, [r5, #2]
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d103      	bne.n	80059d8 <ZbZclHandleGetSceneData+0x4c>
 80059d0:	2001      	movs	r0, #1
 80059d2:	f88d 0002 	strb.w	r0, [sp, #2]
 80059d6:	e002      	b.n	80059de <ZbZclHandleGetSceneData+0x52>
 80059d8:	2000      	movs	r0, #0
 80059da:	f88d 0002 	strb.w	r0, [sp, #2]
 80059de:	2001      	movs	r0, #1
 80059e0:	f88d 0003 	strb.w	r0, [sp, #3]
 80059e4:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80059e8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80059ec:	79a8      	ldrb	r0, [r5, #6]
 80059ee:	f88d 0006 	strb.w	r0, [sp, #6]
 80059f2:	20f0      	movs	r0, #240	; 0xf0
 80059f4:	f88d 0007 	strb.w	r0, [sp, #7]
 80059f8:	8b62      	ldrh	r2, [r4, #26]
 80059fa:	a90e      	add	r1, sp, #56	; 0x38
 80059fc:	4668      	mov	r0, sp
 80059fe:	f7fb fd9b 	bl	8001538 <ZbZclAppendHeader>
 8005a02:	0007      	movs	r7, r0
 8005a04:	2f00      	cmp	r7, #0
 8005a06:	d506      	bpl.n	8005a16 <ZbZclHandleGetSceneData+0x8a>
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	002a      	movs	r2, r5
 8005a0c:	0031      	movs	r1, r6
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f007 fa95 	bl	800cf3e <ZbZclSendDefaultResponse>
 8005a14:	e036      	b.n	8005a84 <ZbZclHandleGetSceneData+0xf8>
 8005a16:	46b9      	mov	r9, r7
 8005a18:	f1d9 024d 	rsbs	r2, r9, #77	; 0x4d
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	a80e      	add	r0, sp, #56	; 0x38
 8005a20:	eb00 0109 	add.w	r1, r0, r9
 8005a24:	0020      	movs	r0, r4
 8005a26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a28:	4798      	blx	r3
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	b2c0      	uxtb	r0, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d106      	bne.n	8005a42 <ZbZclHandleGetSceneData+0xb6>
 8005a34:	2381      	movs	r3, #129	; 0x81
 8005a36:	002a      	movs	r2, r5
 8005a38:	0031      	movs	r1, r6
 8005a3a:	0020      	movs	r0, r4
 8005a3c:	f007 fa7f 	bl	800cf3e <ZbZclSendDefaultResponse>
 8005a40:	e020      	b.n	8005a84 <ZbZclHandleGetSceneData+0xf8>
 8005a42:	fa59 f988 	uxtab	r9, r9, r8
 8005a46:	0032      	movs	r2, r6
 8005a48:	a902      	add	r1, sp, #8
 8005a4a:	0020      	movs	r0, r4
 8005a4c:	f7fa fd3e 	bl	80004cc <ZbZclClusterInitApsdeReq>
 8005a50:	a802      	add	r0, sp, #8
 8005a52:	f116 0110 	adds.w	r1, r6, #16
 8005a56:	2210      	movs	r2, #16
 8005a58:	f00a f8ce 	bl	800fbf8 <__aeabi_memcpy>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005a62:	2000      	movs	r0, #0
 8005a64:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005a6e:	a80e      	add	r0, sp, #56	; 0x38
 8005a70:	9008      	str	r0, [sp, #32]
 8005a72:	4648      	mov	r0, r9
 8005a74:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	a902      	add	r1, sp, #8
 8005a7e:	68a0      	ldr	r0, [r4, #8]
 8005a80:	f006 fe16 	bl	800c6b0 <ZbApsdeDataReqCallback>
 8005a84:	b023      	add	sp, #140	; 0x8c
 8005a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005a8a <ZbZclHandleSetSceneData>:
 8005a8a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8e:	b0a4      	sub	sp, #144	; 0x90
 8005a90:	0005      	movs	r5, r0
 8005a92:	000e      	movs	r6, r1
 8005a94:	0017      	movs	r7, r2
 8005a96:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d106      	bne.n	8005aaa <ZbZclHandleSetSceneData+0x20>
 8005a9c:	2381      	movs	r3, #129	; 0x81
 8005a9e:	0032      	movs	r2, r6
 8005aa0:	0039      	movs	r1, r7
 8005aa2:	0028      	movs	r0, r5
 8005aa4:	f007 fa4b 	bl	800cf3e <ZbZclSendDefaultResponse>
 8005aa8:	e083      	b.n	8005bb2 <ZbZclHandleSetSceneData+0x128>
 8005aaa:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8005aac:	2805      	cmp	r0, #5
 8005aae:	da06      	bge.n	8005abe <ZbZclHandleSetSceneData+0x34>
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	0032      	movs	r2, r6
 8005ab4:	0039      	movs	r1, r7
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	f007 fa41 	bl	800cf3e <ZbZclSendDefaultResponse>
 8005abc:	e079      	b.n	8005bb2 <ZbZclHandleSetSceneData+0x128>
 8005abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ac0:	f7fc fa6f 	bl	8001fa2 <pletoh32>
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ac8:	7900      	ldrb	r0, [r0, #4]
 8005aca:	f88d 0000 	strb.w	r0, [sp]
 8005ace:	f89d 0000 	ldrb.w	r0, [sp]
 8005ad2:	1d40      	adds	r0, r0, #5
 8005ad4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005ad6:	4288      	cmp	r0, r1
 8005ad8:	d206      	bcs.n	8005ae8 <ZbZclHandleSetSceneData+0x5e>
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	0032      	movs	r2, r6
 8005ade:	0039      	movs	r1, r7
 8005ae0:	0028      	movs	r0, r5
 8005ae2:	f007 fa2c 	bl	800cf3e <ZbZclSendDefaultResponse>
 8005ae6:	e064      	b.n	8005bb2 <ZbZclHandleSetSceneData+0x128>
 8005ae8:	4643      	mov	r3, r8
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f89d 2000 	ldrb.w	r2, [sp]
 8005af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005af2:	1d41      	adds	r1, r0, #5
 8005af4:	0028      	movs	r0, r5
 8005af6:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8005af8:	47a0      	blx	r4
 8005afa:	4681      	mov	r9, r0
 8005afc:	2408      	movs	r4, #8
 8005afe:	f05f 0a00 	movs.w	sl, #0
 8005b02:	f10d 0b04 	add.w	fp, sp, #4
 8005b06:	4652      	mov	r2, sl
 8005b08:	0021      	movs	r1, r4
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f000 fccd 	bl	80064aa <__aeabi_memset>
 8005b10:	2000      	movs	r0, #0
 8005b12:	f88d 0004 	strb.w	r0, [sp, #4]
 8005b16:	2001      	movs	r0, #1
 8005b18:	f88d 0005 	strb.w	r0, [sp, #5]
 8005b1c:	78b0      	ldrb	r0, [r6, #2]
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d103      	bne.n	8005b2a <ZbZclHandleSetSceneData+0xa0>
 8005b22:	2001      	movs	r0, #1
 8005b24:	f88d 0006 	strb.w	r0, [sp, #6]
 8005b28:	e002      	b.n	8005b30 <ZbZclHandleSetSceneData+0xa6>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f88d 0006 	strb.w	r0, [sp, #6]
 8005b30:	2001      	movs	r0, #1
 8005b32:	f88d 0007 	strb.w	r0, [sp, #7]
 8005b36:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8005b3a:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005b3e:	79b0      	ldrb	r0, [r6, #6]
 8005b40:	f88d 000a 	strb.w	r0, [sp, #10]
 8005b44:	20f1      	movs	r0, #241	; 0xf1
 8005b46:	f88d 000b 	strb.w	r0, [sp, #11]
 8005b4a:	8b6a      	ldrh	r2, [r5, #26]
 8005b4c:	a910      	add	r1, sp, #64	; 0x40
 8005b4e:	a801      	add	r0, sp, #4
 8005b50:	f7fb fcf2 	bl	8001538 <ZbZclAppendHeader>
 8005b54:	0004      	movs	r4, r0
 8005b56:	2c00      	cmp	r4, #0
 8005b58:	d506      	bpl.n	8005b68 <ZbZclHandleSetSceneData+0xde>
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	0032      	movs	r2, r6
 8005b5e:	0039      	movs	r1, r7
 8005b60:	0028      	movs	r0, r5
 8005b62:	f007 f9ec 	bl	800cf3e <ZbZclSendDefaultResponse>
 8005b66:	e024      	b.n	8005bb2 <ZbZclHandleSetSceneData+0x128>
 8005b68:	46a2      	mov	sl, r4
 8005b6a:	a810      	add	r0, sp, #64	; 0x40
 8005b6c:	f800 900a 	strb.w	r9, [r0, sl]
 8005b70:	f11a 0a01 	adds.w	sl, sl, #1
 8005b74:	003a      	movs	r2, r7
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	0028      	movs	r0, r5
 8005b7a:	f7fa fca7 	bl	80004cc <ZbZclClusterInitApsdeReq>
 8005b7e:	a804      	add	r0, sp, #16
 8005b80:	f117 0110 	adds.w	r1, r7, #16
 8005b84:	2210      	movs	r2, #16
 8005b86:	f00a f837 	bl	800fbf8 <__aeabi_memcpy>
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8005b90:	2000      	movs	r0, #0
 8005b92:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
 8005b96:	2000      	movs	r0, #0
 8005b98:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8005b9c:	a810      	add	r0, sp, #64	; 0x40
 8005b9e:	900a      	str	r0, [sp, #40]	; 0x28
 8005ba0:	4650      	mov	r0, sl
 8005ba2:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2200      	movs	r2, #0
 8005baa:	a904      	add	r1, sp, #16
 8005bac:	68a8      	ldr	r0, [r5, #8]
 8005bae:	f006 fd7f 	bl	800c6b0 <ZbApsdeDataReqCallback>
 8005bb2:	b025      	add	sp, #148	; 0x94
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bb8 <ZbZclAppendFloat>:
 8005bb8:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	b081      	sub	sp, #4
 8005bbe:	ed2d 8b04 	vpush	{d8-d9}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	eeb0 8a40 	vmov.f32	s16, s0
 8005bc8:	eef0 8a60 	vmov.f32	s17, s1
 8005bcc:	000e      	movs	r6, r1
 8005bce:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8005bd2:	2838      	cmp	r0, #56	; 0x38
 8005bd4:	d149      	bne.n	8005c6a <ZbZclAppendFloat+0xb2>
 8005bd6:	2400      	movs	r4, #0
 8005bd8:	2510      	movs	r5, #16
 8005bda:	f07f 070e 	mvns.w	r7, #14
 8005bde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005be0:	2802      	cmp	r0, #2
 8005be2:	d202      	bcs.n	8005bea <ZbZclAppendFloat+0x32>
 8005be4:	f05f 30ff 	movs.w	r0, #4294967295
 8005be8:	e120      	b.n	8005e2c <ZbZclAppendFloat+0x274>
 8005bea:	003a      	movs	r2, r7
 8005bec:	0029      	movs	r1, r5
 8005bee:	4668      	mov	r0, sp
 8005bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8005bf4:	eef0 0a68 	vmov.f32	s1, s17
 8005bf8:	f000 fb0e 	bl	8006218 <ZbZclFloatFrexp>
 8005bfc:	eeb0 9a40 	vmov.f32	s18, s0
 8005c00:	eef0 9a60 	vmov.f32	s19, s1
 8005c04:	f8dd 8000 	ldr.w	r8, [sp]
 8005c08:	ebb8 0807 	subs.w	r8, r8, r7
 8005c0c:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8005c10:	f418 48f8 	ands.w	r8, r8, #31744	; 0x7c00
 8005c14:	ec51 0b19 	vmov	r0, r1, d9
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f001 f918 	bl	8006e50 <__aeabi_cdcmpeq>
 8005c20:	d210      	bcs.n	8005c44 <ZbZclAppendFloat+0x8c>
 8005c22:	ec51 0b19 	vmov	r0, r1, d9
 8005c26:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005c2a:	f001 f94b 	bl	8006ec4 <__aeabi_d2iz>
 8005c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c32:	fb10 f101 	smulbb	r1, r0, r1
 8005c36:	0589      	lsls	r1, r1, #22
 8005c38:	0d89      	lsrs	r1, r1, #22
 8005c3a:	ea58 0101 	orrs.w	r1, r8, r1
 8005c3e:	f451 4100 	orrs.w	r1, r1, #32768	; 0x8000
 8005c42:	e00b      	b.n	8005c5c <ZbZclAppendFloat+0xa4>
 8005c44:	ec51 0b19 	vmov	r0, r1, d9
 8005c48:	f001 f93c 	bl	8006ec4 <__aeabi_d2iz>
 8005c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c50:	fb10 f101 	smulbb	r1, r0, r1
 8005c54:	0589      	lsls	r1, r1, #22
 8005c56:	0d89      	lsrs	r1, r1, #22
 8005c58:	ea58 0101 	orrs.w	r1, r8, r1
 8005c5c:	7031      	strb	r1, [r6, #0]
 8005c5e:	0008      	movs	r0, r1
 8005c60:	b280      	uxth	r0, r0
 8005c62:	0a00      	lsrs	r0, r0, #8
 8005c64:	7070      	strb	r0, [r6, #1]
 8005c66:	2002      	movs	r0, #2
 8005c68:	e0e0      	b.n	8005e2c <ZbZclAppendFloat+0x274>
 8005c6a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8005c6e:	2839      	cmp	r0, #57	; 0x39
 8005c70:	d14e      	bne.n	8005d10 <ZbZclAppendFloat+0x158>
 8005c72:	2400      	movs	r4, #0
 8005c74:	2580      	movs	r5, #128	; 0x80
 8005c76:	f07f 077e 	mvns.w	r7, #126	; 0x7e
 8005c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c7c:	2804      	cmp	r0, #4
 8005c7e:	d202      	bcs.n	8005c86 <ZbZclAppendFloat+0xce>
 8005c80:	f05f 30ff 	movs.w	r0, #4294967295
 8005c84:	e0d2      	b.n	8005e2c <ZbZclAppendFloat+0x274>
 8005c86:	003a      	movs	r2, r7
 8005c88:	0029      	movs	r1, r5
 8005c8a:	4668      	mov	r0, sp
 8005c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c90:	eef0 0a68 	vmov.f32	s1, s17
 8005c94:	f000 fac0 	bl	8006218 <ZbZclFloatFrexp>
 8005c98:	eeb0 9a40 	vmov.f32	s18, s0
 8005c9c:	eef0 9a60 	vmov.f32	s19, s1
 8005ca0:	f8dd 8000 	ldr.w	r8, [sp]
 8005ca4:	ebb8 0807 	subs.w	r8, r8, r7
 8005ca8:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 8005cac:	f018 48ff 	ands.w	r8, r8, #2139095040	; 0x7f800000
 8005cb0:	ec51 0b19 	vmov	r0, r1, d9
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f001 f8ca 	bl	8006e50 <__aeabi_cdcmpeq>
 8005cbc:	d210      	bcs.n	8005ce0 <ZbZclAppendFloat+0x128>
 8005cbe:	ec51 0b19 	vmov	r0, r1, d9
 8005cc2:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005cc6:	f001 f925 	bl	8006f14 <__aeabi_d2uiz>
 8005cca:	0001      	movs	r1, r0
 8005ccc:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 8005cd0:	4341      	muls	r1, r0
 8005cd2:	0249      	lsls	r1, r1, #9
 8005cd4:	0a49      	lsrs	r1, r1, #9
 8005cd6:	ea58 0101 	orrs.w	r1, r8, r1
 8005cda:	f051 4100 	orrs.w	r1, r1, #2147483648	; 0x80000000
 8005cde:	e00b      	b.n	8005cf8 <ZbZclAppendFloat+0x140>
 8005ce0:	ec51 0b19 	vmov	r0, r1, d9
 8005ce4:	f001 f916 	bl	8006f14 <__aeabi_d2uiz>
 8005ce8:	0001      	movs	r1, r0
 8005cea:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 8005cee:	4341      	muls	r1, r0
 8005cf0:	0249      	lsls	r1, r1, #9
 8005cf2:	0a49      	lsrs	r1, r1, #9
 8005cf4:	ea58 0101 	orrs.w	r1, r8, r1
 8005cf8:	7031      	strb	r1, [r6, #0]
 8005cfa:	0008      	movs	r0, r1
 8005cfc:	0a00      	lsrs	r0, r0, #8
 8005cfe:	7070      	strb	r0, [r6, #1]
 8005d00:	0008      	movs	r0, r1
 8005d02:	0c00      	lsrs	r0, r0, #16
 8005d04:	70b0      	strb	r0, [r6, #2]
 8005d06:	0008      	movs	r0, r1
 8005d08:	0e00      	lsrs	r0, r0, #24
 8005d0a:	70f0      	strb	r0, [r6, #3]
 8005d0c:	2004      	movs	r0, #4
 8005d0e:	e08d      	b.n	8005e2c <ZbZclAppendFloat+0x274>
 8005d10:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8005d14:	283a      	cmp	r0, #58	; 0x3a
 8005d16:	f040 8087 	bne.w	8005e28 <ZbZclAppendFloat+0x270>
 8005d1a:	2400      	movs	r4, #0
 8005d1c:	2500      	movs	r5, #0
 8005d1e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005d22:	f8df 8754 	ldr.w	r8, [pc, #1876]	; 8006478 <.text_6>
 8005d26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d28:	2808      	cmp	r0, #8
 8005d2a:	d202      	bcs.n	8005d32 <ZbZclAppendFloat+0x17a>
 8005d2c:	f05f 30ff 	movs.w	r0, #4294967295
 8005d30:	e07c      	b.n	8005e2c <ZbZclAppendFloat+0x274>
 8005d32:	4642      	mov	r2, r8
 8005d34:	0039      	movs	r1, r7
 8005d36:	4668      	mov	r0, sp
 8005d38:	eeb0 0a48 	vmov.f32	s0, s16
 8005d3c:	eef0 0a68 	vmov.f32	s1, s17
 8005d40:	f000 fa6a 	bl	8006218 <ZbZclFloatFrexp>
 8005d44:	eeb0 9a40 	vmov.f32	s18, s0
 8005d48:	eef0 9a60 	vmov.f32	s19, s1
 8005d4c:	9800      	ldr	r0, [sp, #0]
 8005d4e:	17c1      	asrs	r1, r0, #31
 8005d50:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8005d54:	ebb0 0008 	subs.w	r0, r0, r8
 8005d58:	eb71 0109 	sbcs.w	r1, r1, r9
 8005d5c:	0501      	lsls	r1, r0, #20
 8005d5e:	2000      	movs	r0, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8df 3718 	ldr.w	r3, [pc, #1816]	; 800647c <.text_7>
 8005d66:	4010      	ands	r0, r2
 8005d68:	4019      	ands	r1, r3
 8005d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d6e:	ec51 0b19 	vmov	r0, r1, d9
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	f001 f86b 	bl	8006e50 <__aeabi_cdcmpeq>
 8005d7a:	d21f      	bcs.n	8005dbc <ZbZclAppendFloat+0x204>
 8005d7c:	ec51 0b19 	vmov	r0, r1, d9
 8005d80:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005d84:	f001 f916 	bl	8006fb4 <__aeabi_d2ulz>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8005d8e:	fba2 ab00 	umull	sl, fp, r2, r0
 8005d92:	fb02 bb01 	mla	fp, r2, r1, fp
 8005d96:	fb03 bb00 	mla	fp, r3, r0, fp
 8005d9a:	f05f 30ff 	movs.w	r0, #4294967295
 8005d9e:	f8df 16e0 	ldr.w	r1, [pc, #1760]	; 8006480 <.text_8>
 8005da2:	ea1a 0000 	ands.w	r0, sl, r0
 8005da6:	ea1b 0101 	ands.w	r1, fp, r1
 8005daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dae:	4310      	orrs	r0, r2
 8005db0:	4319      	orrs	r1, r3
 8005db2:	f050 0200 	orrs.w	r2, r0, #0
 8005db6:	f051 4300 	orrs.w	r3, r1, #2147483648	; 0x80000000
 8005dba:	e018      	b.n	8005dee <ZbZclAppendFloat+0x236>
 8005dbc:	ec51 0b19 	vmov	r0, r1, d9
 8005dc0:	f001 f8f8 	bl	8006fb4 <__aeabi_d2ulz>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8005dca:	fba2 ab00 	umull	sl, fp, r2, r0
 8005dce:	fb02 bb01 	mla	fp, r2, r1, fp
 8005dd2:	fb03 bb00 	mla	fp, r3, r0, fp
 8005dd6:	f05f 30ff 	movs.w	r0, #4294967295
 8005dda:	f8df 16a4 	ldr.w	r1, [pc, #1700]	; 8006480 <.text_8>
 8005dde:	ea1a 0000 	ands.w	r0, sl, r0
 8005de2:	ea1b 0101 	ands.w	r1, fp, r1
 8005de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dea:	4302      	orrs	r2, r0
 8005dec:	430b      	orrs	r3, r1
 8005dee:	7032      	strb	r2, [r6, #0]
 8005df0:	0010      	movs	r0, r2
 8005df2:	b280      	uxth	r0, r0
 8005df4:	0a00      	lsrs	r0, r0, #8
 8005df6:	7070      	strb	r0, [r6, #1]
 8005df8:	0010      	movs	r0, r2
 8005dfa:	0c00      	lsrs	r0, r0, #16
 8005dfc:	70b0      	strb	r0, [r6, #2]
 8005dfe:	0010      	movs	r0, r2
 8005e00:	0e00      	lsrs	r0, r0, #24
 8005e02:	70f0      	strb	r0, [r6, #3]
 8005e04:	7133      	strb	r3, [r6, #4]
 8005e06:	0010      	movs	r0, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	0a08      	lsrs	r0, r1, #8
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	7170      	strb	r0, [r6, #5]
 8005e10:	0010      	movs	r0, r2
 8005e12:	0019      	movs	r1, r3
 8005e14:	0c08      	lsrs	r0, r1, #16
 8005e16:	2100      	movs	r1, #0
 8005e18:	71b0      	strb	r0, [r6, #6]
 8005e1a:	0010      	movs	r0, r2
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	0e08      	lsrs	r0, r1, #24
 8005e20:	2100      	movs	r1, #0
 8005e22:	71f0      	strb	r0, [r6, #7]
 8005e24:	2008      	movs	r0, #8
 8005e26:	e001      	b.n	8005e2c <ZbZclAppendFloat+0x274>
 8005e28:	f05f 30ff 	movs.w	r0, #4294967295
 8005e2c:	b004      	add	sp, #16
 8005e2e:	ecbd 8b04 	vpop	{d8-d9}
 8005e32:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e36 <ZbZclParseFloat>:
 8005e36:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	ed2d 8b02 	vpush	{d8}
 8005e3e:	000e      	movs	r6, r1
 8005e40:	4691      	mov	r9, r2
 8005e42:	2000      	movs	r0, #0
 8005e44:	f889 0000 	strb.w	r0, [r9]
 8005e48:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005e4c:	2838      	cmp	r0, #56	; 0x38
 8005e4e:	d006      	beq.n	8005e5e <ZbZclParseFloat+0x28>
 8005e50:	f0c0 8142 	bcc.w	80060d8 <ZbZclParseFloat+0x2a2>
 8005e54:	283a      	cmp	r0, #58	; 0x3a
 8005e56:	f000 80ad 	beq.w	8005fb4 <ZbZclParseFloat+0x17e>
 8005e5a:	d354      	bcc.n	8005f06 <ZbZclParseFloat+0xd0>
 8005e5c:	e13c      	b.n	80060d8 <ZbZclParseFloat+0x2a2>
 8005e5e:	0030      	movs	r0, r6
 8005e60:	f7fc f88e 	bl	8001f80 <pletoh16>
 8005e64:	0004      	movs	r4, r0
 8005e66:	0020      	movs	r0, r4
 8005e68:	b280      	uxth	r0, r0
 8005e6a:	f410 40f8 	ands.w	r0, r0, #31744	; 0x7c00
 8005e6e:	f5b0 4ff8 	cmp.w	r0, #31744	; 0x7c00
 8005e72:	d121      	bne.n	8005eb8 <ZbZclParseFloat+0x82>
 8005e74:	05a0      	lsls	r0, r4, #22
 8005e76:	d008      	beq.n	8005e8a <ZbZclParseFloat+0x54>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f000 feb0 	bl	8006be4 <__aeabi_ddiv>
 8005e84:	ec41 0b10 	vmov	d0, r0, r1
 8005e88:	e131      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8005e8a:	0420      	lsls	r0, r4, #16
 8005e8c:	d50a      	bpl.n	8005ea4 <ZbZclParseFloat+0x6e>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f8df 15f0 	ldr.w	r1, [pc, #1520]	; 8006484 <.text_9>
 8005e94:	2200      	movs	r2, #0
 8005e96:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8005e9a:	f000 fea3 	bl	8006be4 <__aeabi_ddiv>
 8005e9e:	ec41 0b10 	vmov	d0, r0, r1
 8005ea2:	e008      	b.n	8005eb6 <ZbZclParseFloat+0x80>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	f8df 15dc 	ldr.w	r1, [pc, #1500]	; 8006484 <.text_9>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f000 fe99 	bl	8006be4 <__aeabi_ddiv>
 8005eb2:	ec41 0b10 	vmov	d0, r0, r1
 8005eb6:	e11a      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8005eb8:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8005ebc:	4645      	mov	r5, r8
 8005ebe:	b2ad      	uxth	r5, r5
 8005ec0:	3d0f      	subs	r5, #15
 8005ec2:	3d0a      	subs	r5, #10
 8005ec4:	f414 4ff8 	tst.w	r4, #31744	; 0x7c00
 8005ec8:	d004      	beq.n	8005ed4 <ZbZclParseFloat+0x9e>
 8005eca:	05a7      	lsls	r7, r4, #22
 8005ecc:	0dbf      	lsrs	r7, r7, #22
 8005ece:	f517 6780 	adds.w	r7, r7, #1024	; 0x400
 8005ed2:	e002      	b.n	8005eda <ZbZclParseFloat+0xa4>
 8005ed4:	1c6d      	adds	r5, r5, #1
 8005ed6:	05a7      	lsls	r7, r4, #22
 8005ed8:	0dbf      	lsrs	r7, r7, #22
 8005eda:	0038      	movs	r0, r7
 8005edc:	b280      	uxth	r0, r0
 8005ede:	f000 fcdd 	bl	800689c <__aeabi_ui2d>
 8005ee2:	ec41 0b18 	vmov	d8, r0, r1
 8005ee6:	0420      	lsls	r0, r4, #16
 8005ee8:	d505      	bpl.n	8005ef6 <ZbZclParseFloat+0xc0>
 8005eea:	ec51 0b18 	vmov	r0, r1, d8
 8005eee:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005ef2:	ec41 0b18 	vmov	d8, r0, r1
 8005ef6:	0028      	movs	r0, r5
 8005ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8005efc:	eef0 0a68 	vmov.f32	s1, s17
 8005f00:	f000 f8f9 	bl	80060f6 <ZbZclFloatLdexp>
 8005f04:	e0f3      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8005f06:	0030      	movs	r0, r6
 8005f08:	f7fc f84b 	bl	8001fa2 <pletoh32>
 8005f0c:	0004      	movs	r4, r0
 8005f0e:	f014 40ff 	ands.w	r0, r4, #2139095040	; 0x7f800000
 8005f12:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005f16:	d121      	bne.n	8005f5c <ZbZclParseFloat+0x126>
 8005f18:	0260      	lsls	r0, r4, #9
 8005f1a:	d008      	beq.n	8005f2e <ZbZclParseFloat+0xf8>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	2100      	movs	r1, #0
 8005f20:	2200      	movs	r2, #0
 8005f22:	2300      	movs	r3, #0
 8005f24:	f000 fe5e 	bl	8006be4 <__aeabi_ddiv>
 8005f28:	ec41 0b10 	vmov	d0, r0, r1
 8005f2c:	e0df      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d50a      	bpl.n	8005f48 <ZbZclParseFloat+0x112>
 8005f32:	2000      	movs	r0, #0
 8005f34:	f8df 154c 	ldr.w	r1, [pc, #1356]	; 8006484 <.text_9>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8005f3e:	f000 fe51 	bl	8006be4 <__aeabi_ddiv>
 8005f42:	ec41 0b10 	vmov	d0, r0, r1
 8005f46:	e008      	b.n	8005f5a <ZbZclParseFloat+0x124>
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 8006484 <.text_9>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2300      	movs	r3, #0
 8005f52:	f000 fe47 	bl	8006be4 <__aeabi_ddiv>
 8005f56:	ec41 0b10 	vmov	d0, r0, r1
 8005f5a:	e0c8      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8005f5c:	0025      	movs	r5, r4
 8005f5e:	0ded      	lsrs	r5, r5, #23
 8005f60:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8005f64:	002f      	movs	r7, r5
 8005f66:	b2bf      	uxth	r7, r7
 8005f68:	3f7f      	subs	r7, #127	; 0x7f
 8005f6a:	3f17      	subs	r7, #23
 8005f6c:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8005f70:	d006      	beq.n	8005f80 <ZbZclParseFloat+0x14a>
 8005f72:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8005f76:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8005f7a:	f518 0800 	adds.w	r8, r8, #8388608	; 0x800000
 8005f7e:	e004      	b.n	8005f8a <ZbZclParseFloat+0x154>
 8005f80:	1c7f      	adds	r7, r7, #1
 8005f82:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8005f86:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	f000 fc86 	bl	800689c <__aeabi_ui2d>
 8005f90:	ec41 0b18 	vmov	d8, r0, r1
 8005f94:	2c00      	cmp	r4, #0
 8005f96:	d505      	bpl.n	8005fa4 <ZbZclParseFloat+0x16e>
 8005f98:	ec51 0b18 	vmov	r0, r1, d8
 8005f9c:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005fa0:	ec41 0b18 	vmov	d8, r0, r1
 8005fa4:	0038      	movs	r0, r7
 8005fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8005faa:	eef0 0a68 	vmov.f32	s1, s17
 8005fae:	f000 f8a2 	bl	80060f6 <ZbZclFloatLdexp>
 8005fb2:	e09c      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8005fb4:	0030      	movs	r0, r6
 8005fb6:	f7fc f821 	bl	8001ffc <pletoh64>
 8005fba:	0004      	movs	r4, r0
 8005fbc:	000d      	movs	r5, r1
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	f8df 14b8 	ldr.w	r1, [pc, #1208]	; 800647c <.text_7>
 8005fc4:	4020      	ands	r0, r4
 8005fc6:	4029      	ands	r1, r5
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8df 34b0 	ldr.w	r3, [pc, #1200]	; 800647c <.text_7>
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d135      	bne.n	800603e <ZbZclParseFloat+0x208>
 8005fd2:	4290      	cmp	r0, r2
 8005fd4:	d133      	bne.n	800603e <ZbZclParseFloat+0x208>
 8005fd6:	f05f 30ff 	movs.w	r0, #4294967295
 8005fda:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006480 <.text_8>
 8005fde:	4020      	ands	r0, r4
 8005fe0:	4029      	ands	r1, r5
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d101      	bne.n	8005fee <ZbZclParseFloat+0x1b8>
 8005fea:	4290      	cmp	r0, r2
 8005fec:	d008      	beq.n	8006000 <ZbZclParseFloat+0x1ca>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f000 fdf5 	bl	8006be4 <__aeabi_ddiv>
 8005ffa:	ec41 0b10 	vmov	d0, r0, r1
 8005ffe:	e076      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 8006000:	f014 0000 	ands.w	r0, r4, #0
 8006004:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 8006008:	2200      	movs	r2, #0
 800600a:	2300      	movs	r3, #0
 800600c:	4299      	cmp	r1, r3
 800600e:	d101      	bne.n	8006014 <ZbZclParseFloat+0x1de>
 8006010:	4290      	cmp	r0, r2
 8006012:	d00a      	beq.n	800602a <ZbZclParseFloat+0x1f4>
 8006014:	2000      	movs	r0, #0
 8006016:	f8df 146c 	ldr.w	r1, [pc, #1132]	; 8006484 <.text_9>
 800601a:	2200      	movs	r2, #0
 800601c:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8006020:	f000 fde0 	bl	8006be4 <__aeabi_ddiv>
 8006024:	ec41 0b10 	vmov	d0, r0, r1
 8006028:	e008      	b.n	800603c <ZbZclParseFloat+0x206>
 800602a:	2000      	movs	r0, #0
 800602c:	f8df 1454 	ldr.w	r1, [pc, #1108]	; 8006484 <.text_9>
 8006030:	2200      	movs	r2, #0
 8006032:	2300      	movs	r3, #0
 8006034:	f000 fdd6 	bl	8006be4 <__aeabi_ddiv>
 8006038:	ec41 0b10 	vmov	d0, r0, r1
 800603c:	e057      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 800603e:	0020      	movs	r0, r4
 8006040:	0029      	movs	r1, r5
 8006042:	0d08      	lsrs	r0, r1, #20
 8006044:	2100      	movs	r1, #0
 8006046:	4680      	mov	r8, r0
 8006048:	ea5f 5848 	movs.w	r8, r8, lsl #21
 800604c:	ea5f 5858 	movs.w	r8, r8, lsr #21
 8006050:	4647      	mov	r7, r8
 8006052:	b2bf      	uxth	r7, r7
 8006054:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8006058:	3f34      	subs	r7, #52	; 0x34
 800605a:	2000      	movs	r0, #0
 800605c:	f8df 141c 	ldr.w	r1, [pc, #1052]	; 800647c <.text_7>
 8006060:	ea14 0200 	ands.w	r2, r4, r0
 8006064:	ea15 0301 	ands.w	r3, r5, r1
 8006068:	2000      	movs	r0, #0
 800606a:	2100      	movs	r1, #0
 800606c:	428b      	cmp	r3, r1
 800606e:	d101      	bne.n	8006074 <ZbZclParseFloat+0x23e>
 8006070:	4282      	cmp	r2, r0
 8006072:	d00a      	beq.n	800608a <ZbZclParseFloat+0x254>
 8006074:	f05f 30ff 	movs.w	r0, #4294967295
 8006078:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 8006480 <.text_8>
 800607c:	4020      	ands	r0, r4
 800607e:	4029      	ands	r1, r5
 8006080:	f110 0a00 	adds.w	sl, r0, #0
 8006084:	f551 1b80 	adcs.w	fp, r1, #1048576	; 0x100000
 8006088:	e008      	b.n	800609c <ZbZclParseFloat+0x266>
 800608a:	1c7f      	adds	r7, r7, #1
 800608c:	f05f 30ff 	movs.w	r0, #4294967295
 8006090:	f8df 13ec 	ldr.w	r1, [pc, #1004]	; 8006480 <.text_8>
 8006094:	ea14 0a00 	ands.w	sl, r4, r0
 8006098:	ea15 0b01 	ands.w	fp, r5, r1
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f000 fc40 	bl	8006924 <__aeabi_ul2d>
 80060a4:	ec41 0b18 	vmov	d8, r0, r1
 80060a8:	f014 0200 	ands.w	r2, r4, #0
 80060ac:	f015 4300 	ands.w	r3, r5, #2147483648	; 0x80000000
 80060b0:	2000      	movs	r0, #0
 80060b2:	2100      	movs	r1, #0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	d101      	bne.n	80060bc <ZbZclParseFloat+0x286>
 80060b8:	4282      	cmp	r2, r0
 80060ba:	d005      	beq.n	80060c8 <ZbZclParseFloat+0x292>
 80060bc:	ec51 0b18 	vmov	r0, r1, d8
 80060c0:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80060c4:	ec41 0b18 	vmov	d8, r0, r1
 80060c8:	0038      	movs	r0, r7
 80060ca:	eeb0 0a48 	vmov.f32	s0, s16
 80060ce:	eef0 0a68 	vmov.f32	s1, s17
 80060d2:	f000 f810 	bl	80060f6 <ZbZclFloatLdexp>
 80060d6:	e00a      	b.n	80060ee <ZbZclParseFloat+0x2b8>
 80060d8:	208d      	movs	r0, #141	; 0x8d
 80060da:	f889 0000 	strb.w	r0, [r9]
 80060de:	2000      	movs	r0, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	2200      	movs	r2, #0
 80060e4:	2300      	movs	r3, #0
 80060e6:	f000 fd7d 	bl	8006be4 <__aeabi_ddiv>
 80060ea:	ec41 0b10 	vmov	d0, r0, r1
 80060ee:	ecbd 8b02 	vpop	{d8}
 80060f2:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060f6 <ZbZclFloatLdexp>:
 80060f6:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80060fa:	ed2d 8b04 	vpush	{d8-d9}
 80060fe:	b084      	sub	sp, #16
 8006100:	eeb0 8a40 	vmov.f32	s16, s0
 8006104:	eef0 8a60 	vmov.f32	s17, s1
 8006108:	0004      	movs	r4, r0
 800610a:	2530      	movs	r5, #48	; 0x30
 800610c:	ec53 2b18 	vmov	r2, r3, d8
 8006110:	ec51 0b18 	vmov	r0, r1, d8
 8006114:	f000 fe9c 	bl	8006e50 <__aeabi_cdcmpeq>
 8006118:	d10c      	bne.n	8006134 <ZbZclFloatLdexp+0x3e>
 800611a:	ec53 2b18 	vmov	r2, r3, d8
 800611e:	ec51 0b18 	vmov	r0, r1, d8
 8006122:	f000 fa7f 	bl	8006624 <__adddf3>
 8006126:	0002      	movs	r2, r0
 8006128:	000b      	movs	r3, r1
 800612a:	ec51 0b18 	vmov	r0, r1, d8
 800612e:	f000 fe8f 	bl	8006e50 <__aeabi_cdcmpeq>
 8006132:	d104      	bne.n	800613e <ZbZclFloatLdexp+0x48>
 8006134:	eeb0 0a48 	vmov.f32	s0, s16
 8006138:	eef0 0a68 	vmov.f32	s1, s17
 800613c:	e067      	b.n	800620e <ZbZclFloatLdexp+0x118>
 800613e:	2c01      	cmp	r4, #1
 8006140:	db2a      	blt.n	8006198 <ZbZclFloatLdexp+0xa2>
 8006142:	2001      	movs	r0, #1
 8006144:	2100      	movs	r1, #0
 8006146:	002a      	movs	r2, r5
 8006148:	f000 fa5a 	bl	8006600 <__aeabi_llsl>
 800614c:	0006      	movs	r6, r0
 800614e:	000f      	movs	r7, r1
 8006150:	0030      	movs	r0, r6
 8006152:	0039      	movs	r1, r7
 8006154:	f000 fbe6 	bl	8006924 <__aeabi_ul2d>
 8006158:	ec41 0b19 	vmov	d9, r0, r1
 800615c:	42ac      	cmp	r4, r5
 800615e:	db09      	blt.n	8006174 <ZbZclFloatLdexp+0x7e>
 8006160:	ec51 0b18 	vmov	r0, r1, d8
 8006164:	ec53 2b19 	vmov	r2, r3, d9
 8006168:	f000 fc12 	bl	8006990 <__aeabi_dmul>
 800616c:	ec41 0b18 	vmov	d8, r0, r1
 8006170:	1b64      	subs	r4, r4, r5
 8006172:	e7f3      	b.n	800615c <ZbZclFloatLdexp+0x66>
 8006174:	2001      	movs	r0, #1
 8006176:	2100      	movs	r1, #0
 8006178:	0022      	movs	r2, r4
 800617a:	f000 fa41 	bl	8006600 <__aeabi_llsl>
 800617e:	e9cd 0100 	strd	r0, r1, [sp]
 8006182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006186:	f000 fbcd 	bl	8006924 <__aeabi_ul2d>
 800618a:	ec53 2b18 	vmov	r2, r3, d8
 800618e:	f000 fbff 	bl	8006990 <__aeabi_dmul>
 8006192:	ec41 0b18 	vmov	d8, r0, r1
 8006196:	e036      	b.n	8006206 <ZbZclFloatLdexp+0x110>
 8006198:	2c00      	cmp	r4, #0
 800619a:	d534      	bpl.n	8006206 <ZbZclFloatLdexp+0x110>
 800619c:	2001      	movs	r0, #1
 800619e:	2100      	movs	r1, #0
 80061a0:	002a      	movs	r2, r5
 80061a2:	f000 fa2d 	bl	8006600 <__aeabi_llsl>
 80061a6:	0006      	movs	r6, r0
 80061a8:	000f      	movs	r7, r1
 80061aa:	0030      	movs	r0, r6
 80061ac:	0039      	movs	r1, r7
 80061ae:	f000 fbb9 	bl	8006924 <__aeabi_ul2d>
 80061b2:	0002      	movs	r2, r0
 80061b4:	000b      	movs	r3, r1
 80061b6:	2000      	movs	r0, #0
 80061b8:	49b2      	ldr	r1, [pc, #712]	; (8006484 <.text_9>)
 80061ba:	f000 fd13 	bl	8006be4 <__aeabi_ddiv>
 80061be:	ec41 0b19 	vmov	d9, r0, r1
 80061c2:	f1d4 0800 	rsbs	r8, r4, #0
 80061c6:	45a8      	cmp	r8, r5
 80061c8:	db0a      	blt.n	80061e0 <ZbZclFloatLdexp+0xea>
 80061ca:	ec51 0b18 	vmov	r0, r1, d8
 80061ce:	ec53 2b19 	vmov	r2, r3, d9
 80061d2:	f000 fbdd 	bl	8006990 <__aeabi_dmul>
 80061d6:	ec41 0b18 	vmov	d8, r0, r1
 80061da:	ebb8 0805 	subs.w	r8, r8, r5
 80061de:	e7f2      	b.n	80061c6 <ZbZclFloatLdexp+0xd0>
 80061e0:	2001      	movs	r0, #1
 80061e2:	2100      	movs	r1, #0
 80061e4:	4642      	mov	r2, r8
 80061e6:	f000 fa0b 	bl	8006600 <__aeabi_llsl>
 80061ea:	4682      	mov	sl, r0
 80061ec:	468b      	mov	fp, r1
 80061ee:	4650      	mov	r0, sl
 80061f0:	4659      	mov	r1, fp
 80061f2:	f000 fb97 	bl	8006924 <__aeabi_ul2d>
 80061f6:	0002      	movs	r2, r0
 80061f8:	000b      	movs	r3, r1
 80061fa:	ec51 0b18 	vmov	r0, r1, d8
 80061fe:	f000 fcf1 	bl	8006be4 <__aeabi_ddiv>
 8006202:	ec41 0b18 	vmov	d8, r0, r1
 8006206:	eeb0 0a48 	vmov.f32	s0, s16
 800620a:	eef0 0a68 	vmov.f32	s1, s17
 800620e:	b004      	add	sp, #16
 8006210:	ecbd 8b04 	vpop	{d8-d9}
 8006214:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

08006218 <ZbZclFloatFrexp>:
 8006218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	ed2d 8b06 	vpush	{d8-d10}
 8006220:	b084      	sub	sp, #16
 8006222:	eeb0 8a40 	vmov.f32	s16, s0
 8006226:	eef0 8a60 	vmov.f32	s17, s1
 800622a:	4680      	mov	r8, r0
 800622c:	000c      	movs	r4, r1
 800622e:	4691      	mov	r9, r2
 8006230:	2530      	movs	r5, #48	; 0x30
 8006232:	2600      	movs	r6, #0
 8006234:	2701      	movs	r7, #1
 8006236:	eeb0 9a48 	vmov.f32	s18, s16
 800623a:	eef0 9a68 	vmov.f32	s19, s17
 800623e:	ec51 0b18 	vmov	r0, r1, d8
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	f000 fe03 	bl	8006e50 <__aeabi_cdcmpeq>
 800624a:	d208      	bcs.n	800625e <ZbZclFloatFrexp+0x46>
 800624c:	f05f 30ff 	movs.w	r0, #4294967295
 8006250:	0007      	movs	r7, r0
 8006252:	ec51 0b19 	vmov	r0, r1, d9
 8006256:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 800625a:	ec41 0b19 	vmov	d9, r0, r1
 800625e:	ec53 2b19 	vmov	r2, r3, d9
 8006262:	ec51 0b19 	vmov	r0, r1, d9
 8006266:	f000 fdf3 	bl	8006e50 <__aeabi_cdcmpeq>
 800626a:	d00b      	beq.n	8006284 <ZbZclFloatFrexp+0x6c>
 800626c:	f8c8 4000 	str.w	r4, [r8]
 8006270:	0038      	movs	r0, r7
 8006272:	f000 fb23 	bl	80068bc <__aeabi_i2d>
 8006276:	2200      	movs	r2, #0
 8006278:	4b83      	ldr	r3, [pc, #524]	; (8006488 <.text_10>)
 800627a:	f000 fb89 	bl	8006990 <__aeabi_dmul>
 800627e:	ec41 0b10 	vmov	d0, r0, r1
 8006282:	e0f4      	b.n	800646e <ZbZclFloatFrexp+0x256>
 8006284:	2000      	movs	r0, #0
 8006286:	497f      	ldr	r1, [pc, #508]	; (8006484 <.text_9>)
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	f000 fcaa 	bl	8006be4 <__aeabi_ddiv>
 8006290:	ec53 2b19 	vmov	r2, r3, d9
 8006294:	f000 fddc 	bl	8006e50 <__aeabi_cdcmpeq>
 8006298:	d00b      	beq.n	80062b2 <ZbZclFloatFrexp+0x9a>
 800629a:	2000      	movs	r0, #0
 800629c:	4979      	ldr	r1, [pc, #484]	; (8006484 <.text_9>)
 800629e:	2200      	movs	r2, #0
 80062a0:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 80062a4:	f000 fc9e 	bl	8006be4 <__aeabi_ddiv>
 80062a8:	ec53 2b19 	vmov	r2, r3, d9
 80062ac:	f000 fdd0 	bl	8006e50 <__aeabi_cdcmpeq>
 80062b0:	d10b      	bne.n	80062ca <ZbZclFloatFrexp+0xb2>
 80062b2:	f8c8 4000 	str.w	r4, [r8]
 80062b6:	0038      	movs	r0, r7
 80062b8:	f000 fb00 	bl	80068bc <__aeabi_i2d>
 80062bc:	2200      	movs	r2, #0
 80062be:	4b71      	ldr	r3, [pc, #452]	; (8006484 <.text_9>)
 80062c0:	f000 fb66 	bl	8006990 <__aeabi_dmul>
 80062c4:	ec41 0b10 	vmov	d0, r0, r1
 80062c8:	e0d1      	b.n	800646e <ZbZclFloatFrexp+0x256>
 80062ca:	ec53 2b19 	vmov	r2, r3, d9
 80062ce:	ec51 0b19 	vmov	r0, r1, d9
 80062d2:	f000 f9a7 	bl	8006624 <__adddf3>
 80062d6:	ec53 2b19 	vmov	r2, r3, d9
 80062da:	f000 fdb9 	bl	8006e50 <__aeabi_cdcmpeq>
 80062de:	d10b      	bne.n	80062f8 <ZbZclFloatFrexp+0xe0>
 80062e0:	f8c8 9000 	str.w	r9, [r8]
 80062e4:	0038      	movs	r0, r7
 80062e6:	f000 fae9 	bl	80068bc <__aeabi_i2d>
 80062ea:	2200      	movs	r2, #0
 80062ec:	2300      	movs	r3, #0
 80062ee:	f000 fb4f 	bl	8006990 <__aeabi_dmul>
 80062f2:	ec41 0b10 	vmov	d0, r0, r1
 80062f6:	e0ba      	b.n	800646e <ZbZclFloatFrexp+0x256>
 80062f8:	ec51 0b19 	vmov	r0, r1, d9
 80062fc:	2200      	movs	r2, #0
 80062fe:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8006302:	f000 fd9d 	bl	8006e40 <__aeabi_cdrcmple>
 8006306:	d85a      	bhi.n	80063be <ZbZclFloatFrexp+0x1a6>
 8006308:	2001      	movs	r0, #1
 800630a:	2100      	movs	r1, #0
 800630c:	002a      	movs	r2, r5
 800630e:	f000 f977 	bl	8006600 <__aeabi_llsl>
 8006312:	e9cd 0100 	strd	r0, r1, [sp]
 8006316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800631a:	f000 fb03 	bl	8006924 <__aeabi_ul2d>
 800631e:	0002      	movs	r2, r0
 8006320:	000b      	movs	r3, r1
 8006322:	2000      	movs	r0, #0
 8006324:	4957      	ldr	r1, [pc, #348]	; (8006484 <.text_9>)
 8006326:	f000 fc5d 	bl	8006be4 <__aeabi_ddiv>
 800632a:	ec41 0b1a 	vmov	d10, r0, r1
 800632e:	2002      	movs	r0, #2
 8006330:	2100      	movs	r1, #0
 8006332:	002a      	movs	r2, r5
 8006334:	f000 f964 	bl	8006600 <__aeabi_llsl>
 8006338:	4682      	mov	sl, r0
 800633a:	468b      	mov	fp, r1
 800633c:	4650      	mov	r0, sl
 800633e:	4659      	mov	r1, fp
 8006340:	f000 faf0 	bl	8006924 <__aeabi_ul2d>
 8006344:	0002      	movs	r2, r0
 8006346:	000b      	movs	r3, r1
 8006348:	ec51 0b19 	vmov	r0, r1, d9
 800634c:	f000 fd78 	bl	8006e40 <__aeabi_cdrcmple>
 8006350:	d816      	bhi.n	8006380 <ZbZclFloatFrexp+0x168>
 8006352:	ec53 2b19 	vmov	r2, r3, d9
 8006356:	ec51 0b1a 	vmov	r0, r1, d10
 800635a:	f000 fb19 	bl	8006990 <__aeabi_dmul>
 800635e:	ec41 0b19 	vmov	d9, r0, r1
 8006362:	19ae      	adds	r6, r5, r6
 8006364:	42a6      	cmp	r6, r4
 8006366:	dbe9      	blt.n	800633c <ZbZclFloatFrexp+0x124>
 8006368:	f8c8 4000 	str.w	r4, [r8]
 800636c:	0038      	movs	r0, r7
 800636e:	f000 faa5 	bl	80068bc <__aeabi_i2d>
 8006372:	2200      	movs	r2, #0
 8006374:	4b43      	ldr	r3, [pc, #268]	; (8006484 <.text_9>)
 8006376:	f000 fb0b 	bl	8006990 <__aeabi_dmul>
 800637a:	ec41 0b10 	vmov	d0, r0, r1
 800637e:	e076      	b.n	800646e <ZbZclFloatFrexp+0x256>
 8006380:	ec51 0b19 	vmov	r0, r1, d9
 8006384:	2200      	movs	r2, #0
 8006386:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 800638a:	f000 fd59 	bl	8006e40 <__aeabi_cdrcmple>
 800638e:	d863      	bhi.n	8006458 <ZbZclFloatFrexp+0x240>
 8006390:	ec53 2b19 	vmov	r2, r3, d9
 8006394:	2000      	movs	r0, #0
 8006396:	493d      	ldr	r1, [pc, #244]	; (800648c <.text_11>)
 8006398:	f000 fafa 	bl	8006990 <__aeabi_dmul>
 800639c:	ec41 0b19 	vmov	d9, r0, r1
 80063a0:	1c76      	adds	r6, r6, #1
 80063a2:	42a6      	cmp	r6, r4
 80063a4:	dbec      	blt.n	8006380 <ZbZclFloatFrexp+0x168>
 80063a6:	f8c8 4000 	str.w	r4, [r8]
 80063aa:	0038      	movs	r0, r7
 80063ac:	f000 fa86 	bl	80068bc <__aeabi_i2d>
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b34      	ldr	r3, [pc, #208]	; (8006484 <.text_9>)
 80063b4:	f000 faec 	bl	8006990 <__aeabi_dmul>
 80063b8:	ec41 0b10 	vmov	d0, r0, r1
 80063bc:	e057      	b.n	800646e <ZbZclFloatFrexp+0x256>
 80063be:	ec51 0b19 	vmov	r0, r1, d9
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <.text_9>)
 80063c6:	f000 fd43 	bl	8006e50 <__aeabi_cdcmpeq>
 80063ca:	d245      	bcs.n	8006458 <ZbZclFloatFrexp+0x240>
 80063cc:	2001      	movs	r0, #1
 80063ce:	2100      	movs	r1, #0
 80063d0:	002a      	movs	r2, r5
 80063d2:	f000 f915 	bl	8006600 <__aeabi_llsl>
 80063d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063de:	f000 faa1 	bl	8006924 <__aeabi_ul2d>
 80063e2:	ec41 0b1a 	vmov	d10, r0, r1
 80063e6:	2001      	movs	r0, #1
 80063e8:	2100      	movs	r1, #0
 80063ea:	002a      	movs	r2, r5
 80063ec:	f000 f908 	bl	8006600 <__aeabi_llsl>
 80063f0:	4682      	mov	sl, r0
 80063f2:	468b      	mov	fp, r1
 80063f4:	4650      	mov	r0, sl
 80063f6:	4659      	mov	r1, fp
 80063f8:	f000 fa94 	bl	8006924 <__aeabi_ul2d>
 80063fc:	0002      	movs	r2, r0
 80063fe:	000b      	movs	r3, r1
 8006400:	2000      	movs	r0, #0
 8006402:	4920      	ldr	r1, [pc, #128]	; (8006484 <.text_9>)
 8006404:	f000 fbee 	bl	8006be4 <__aeabi_ddiv>
 8006408:	0002      	movs	r2, r0
 800640a:	000b      	movs	r3, r1
 800640c:	ec51 0b18 	vmov	r0, r1, d8
 8006410:	f000 fd1e 	bl	8006e50 <__aeabi_cdcmpeq>
 8006414:	d20c      	bcs.n	8006430 <ZbZclFloatFrexp+0x218>
 8006416:	1b70      	subs	r0, r6, r5
 8006418:	4581      	cmp	r9, r0
 800641a:	da09      	bge.n	8006430 <ZbZclFloatFrexp+0x218>
 800641c:	ec53 2b19 	vmov	r2, r3, d9
 8006420:	ec51 0b1a 	vmov	r0, r1, d10
 8006424:	f000 fab4 	bl	8006990 <__aeabi_dmul>
 8006428:	ec41 0b19 	vmov	d9, r0, r1
 800642c:	1b76      	subs	r6, r6, r5
 800642e:	e7e1      	b.n	80063f4 <ZbZclFloatFrexp+0x1dc>
 8006430:	ec51 0b19 	vmov	r0, r1, d9
 8006434:	2200      	movs	r2, #0
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <.text_9>)
 8006438:	f000 fd0a 	bl	8006e50 <__aeabi_cdcmpeq>
 800643c:	d20c      	bcs.n	8006458 <ZbZclFloatFrexp+0x240>
 800643e:	1e76      	subs	r6, r6, #1
 8006440:	454e      	cmp	r6, r9
 8006442:	d009      	beq.n	8006458 <ZbZclFloatFrexp+0x240>
 8006444:	ec53 2b19 	vmov	r2, r3, d9
 8006448:	2000      	movs	r0, #0
 800644a:	f05f 4180 	movs.w	r1, #1073741824	; 0x40000000
 800644e:	f000 fa9f 	bl	8006990 <__aeabi_dmul>
 8006452:	ec41 0b19 	vmov	d9, r0, r1
 8006456:	e7eb      	b.n	8006430 <ZbZclFloatFrexp+0x218>
 8006458:	f8c8 6000 	str.w	r6, [r8]
 800645c:	0038      	movs	r0, r7
 800645e:	f000 fa2d 	bl	80068bc <__aeabi_i2d>
 8006462:	ec53 2b19 	vmov	r2, r3, d9
 8006466:	f000 fa93 	bl	8006990 <__aeabi_dmul>
 800646a:	ec41 0b10 	vmov	d0, r0, r1
 800646e:	b004      	add	sp, #16
 8006470:	ecbd 8b06 	vpop	{d8-d10}
 8006474:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006478 <.text_6>:
 8006478:	fffffc01 	.word	0xfffffc01

0800647c <.text_7>:
 800647c:	7ff00000 	.word	0x7ff00000

08006480 <.text_8>:
 8006480:	000fffff 	.word	0x000fffff

08006484 <.text_9>:
 8006484:	3ff00000 	.word	0x3ff00000

08006488 <.text_10>:
 8006488:	3ff80000 	.word	0x3ff80000

0800648c <.text_11>:
 800648c:	3fe00000 	.word	0x3fe00000

08006490 <ZbZclAttrIsFloat>:
 8006490:	0001      	movs	r1, r0
 8006492:	0008      	movs	r0, r1
 8006494:	b2c0      	uxtb	r0, r0
 8006496:	2838      	cmp	r0, #56	; 0x38
 8006498:	db05      	blt.n	80064a6 <ZbZclAttrIsFloat+0x16>
 800649a:	0008      	movs	r0, r1
 800649c:	b2c0      	uxtb	r0, r0
 800649e:	283b      	cmp	r0, #59	; 0x3b
 80064a0:	da01      	bge.n	80064a6 <ZbZclAttrIsFloat+0x16>
 80064a2:	2001      	movs	r0, #1
 80064a4:	e000      	b.n	80064a8 <ZbZclAttrIsFloat+0x18>
 80064a6:	2000      	movs	r0, #0
 80064a8:	4770      	bx	lr

080064aa <__aeabi_memset>:
 80064aa:	b470      	push	{r4, r5, r6}
 80064ac:	0784      	lsls	r4, r0, #30
 80064ae:	d046      	beq.n	800653e <__aeabi_memset+0x94>
 80064b0:	1e4c      	subs	r4, r1, #1
 80064b2:	2900      	cmp	r1, #0
 80064b4:	d041      	beq.n	800653a <__aeabi_memset+0x90>
 80064b6:	b2d5      	uxtb	r5, r2
 80064b8:	4603      	mov	r3, r0
 80064ba:	e002      	b.n	80064c2 <__aeabi_memset+0x18>
 80064bc:	1e61      	subs	r1, r4, #1
 80064be:	b3e4      	cbz	r4, 800653a <__aeabi_memset+0x90>
 80064c0:	460c      	mov	r4, r1
 80064c2:	f803 5b01 	strb.w	r5, [r3], #1
 80064c6:	0799      	lsls	r1, r3, #30
 80064c8:	d1f8      	bne.n	80064bc <__aeabi_memset+0x12>
 80064ca:	2c03      	cmp	r4, #3
 80064cc:	d92e      	bls.n	800652c <__aeabi_memset+0x82>
 80064ce:	b2d5      	uxtb	r5, r2
 80064d0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80064d4:	2c0f      	cmp	r4, #15
 80064d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80064da:	d919      	bls.n	8006510 <__aeabi_memset+0x66>
 80064dc:	4626      	mov	r6, r4
 80064de:	f103 0110 	add.w	r1, r3, #16
 80064e2:	3e10      	subs	r6, #16
 80064e4:	2e0f      	cmp	r6, #15
 80064e6:	f841 5c10 	str.w	r5, [r1, #-16]
 80064ea:	f841 5c0c 	str.w	r5, [r1, #-12]
 80064ee:	f841 5c08 	str.w	r5, [r1, #-8]
 80064f2:	f841 5c04 	str.w	r5, [r1, #-4]
 80064f6:	f101 0110 	add.w	r1, r1, #16
 80064fa:	d8f2      	bhi.n	80064e2 <__aeabi_memset+0x38>
 80064fc:	f1a4 0110 	sub.w	r1, r4, #16
 8006500:	f021 010f 	bic.w	r1, r1, #15
 8006504:	f004 040f 	and.w	r4, r4, #15
 8006508:	3110      	adds	r1, #16
 800650a:	2c03      	cmp	r4, #3
 800650c:	440b      	add	r3, r1
 800650e:	d90d      	bls.n	800652c <__aeabi_memset+0x82>
 8006510:	461e      	mov	r6, r3
 8006512:	4621      	mov	r1, r4
 8006514:	3904      	subs	r1, #4
 8006516:	2903      	cmp	r1, #3
 8006518:	f846 5b04 	str.w	r5, [r6], #4
 800651c:	d8fa      	bhi.n	8006514 <__aeabi_memset+0x6a>
 800651e:	1f21      	subs	r1, r4, #4
 8006520:	f021 0103 	bic.w	r1, r1, #3
 8006524:	3104      	adds	r1, #4
 8006526:	440b      	add	r3, r1
 8006528:	f004 0403 	and.w	r4, r4, #3
 800652c:	b12c      	cbz	r4, 800653a <__aeabi_memset+0x90>
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	441c      	add	r4, r3
 8006532:	f803 2b01 	strb.w	r2, [r3], #1
 8006536:	42a3      	cmp	r3, r4
 8006538:	d1fb      	bne.n	8006532 <__aeabi_memset+0x88>
 800653a:	bc70      	pop	{r4, r5, r6}
 800653c:	4770      	bx	lr
 800653e:	460c      	mov	r4, r1
 8006540:	4603      	mov	r3, r0
 8006542:	e7c2      	b.n	80064ca <__aeabi_memset+0x20>

08006544 <strlen>:
 8006544:	4603      	mov	r3, r0
 8006546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800654a:	2a00      	cmp	r2, #0
 800654c:	d1fb      	bne.n	8006546 <strlen+0x2>
 800654e:	1a18      	subs	r0, r3, r0
 8006550:	3801      	subs	r0, #1
 8006552:	4770      	bx	lr
	...

08006560 <memchr>:
 8006560:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006564:	2a10      	cmp	r2, #16
 8006566:	db2b      	blt.n	80065c0 <memchr+0x60>
 8006568:	f010 0f07 	tst.w	r0, #7
 800656c:	d008      	beq.n	8006580 <memchr+0x20>
 800656e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006572:	3a01      	subs	r2, #1
 8006574:	428b      	cmp	r3, r1
 8006576:	d02d      	beq.n	80065d4 <memchr+0x74>
 8006578:	f010 0f07 	tst.w	r0, #7
 800657c:	b342      	cbz	r2, 80065d0 <memchr+0x70>
 800657e:	d1f6      	bne.n	800656e <memchr+0xe>
 8006580:	b4f0      	push	{r4, r5, r6, r7}
 8006582:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006586:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800658a:	f022 0407 	bic.w	r4, r2, #7
 800658e:	f07f 0700 	mvns.w	r7, #0
 8006592:	2300      	movs	r3, #0
 8006594:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006598:	3c08      	subs	r4, #8
 800659a:	ea85 0501 	eor.w	r5, r5, r1
 800659e:	ea86 0601 	eor.w	r6, r6, r1
 80065a2:	fa85 f547 	uadd8	r5, r5, r7
 80065a6:	faa3 f587 	sel	r5, r3, r7
 80065aa:	fa86 f647 	uadd8	r6, r6, r7
 80065ae:	faa5 f687 	sel	r6, r5, r7
 80065b2:	b98e      	cbnz	r6, 80065d8 <memchr+0x78>
 80065b4:	d1ee      	bne.n	8006594 <memchr+0x34>
 80065b6:	bcf0      	pop	{r4, r5, r6, r7}
 80065b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80065bc:	f002 0207 	and.w	r2, r2, #7
 80065c0:	b132      	cbz	r2, 80065d0 <memchr+0x70>
 80065c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80065c6:	3a01      	subs	r2, #1
 80065c8:	ea83 0301 	eor.w	r3, r3, r1
 80065cc:	b113      	cbz	r3, 80065d4 <memchr+0x74>
 80065ce:	d1f8      	bne.n	80065c2 <memchr+0x62>
 80065d0:	2000      	movs	r0, #0
 80065d2:	4770      	bx	lr
 80065d4:	3801      	subs	r0, #1
 80065d6:	4770      	bx	lr
 80065d8:	2d00      	cmp	r5, #0
 80065da:	bf06      	itte	eq
 80065dc:	4635      	moveq	r5, r6
 80065de:	3803      	subeq	r0, #3
 80065e0:	3807      	subne	r0, #7
 80065e2:	f015 0f01 	tst.w	r5, #1
 80065e6:	d107      	bne.n	80065f8 <memchr+0x98>
 80065e8:	3001      	adds	r0, #1
 80065ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80065ee:	bf02      	ittt	eq
 80065f0:	3001      	addeq	r0, #1
 80065f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80065f6:	3001      	addeq	r0, #1
 80065f8:	bcf0      	pop	{r4, r5, r6, r7}
 80065fa:	3801      	subs	r0, #1
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <__aeabi_llsl>:
 8006600:	4091      	lsls	r1, r2
 8006602:	0003      	movs	r3, r0
 8006604:	4090      	lsls	r0, r2
 8006606:	469c      	mov	ip, r3
 8006608:	3a20      	subs	r2, #32
 800660a:	4093      	lsls	r3, r2
 800660c:	4319      	orrs	r1, r3
 800660e:	4252      	negs	r2, r2
 8006610:	4663      	mov	r3, ip
 8006612:	40d3      	lsrs	r3, r2
 8006614:	4319      	orrs	r1, r3
 8006616:	4770      	bx	lr

08006618 <__aeabi_drsub>:
 8006618:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800661c:	e002      	b.n	8006624 <__adddf3>
 800661e:	bf00      	nop

08006620 <__aeabi_dsub>:
 8006620:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006624 <__adddf3>:
 8006624:	b530      	push	{r4, r5, lr}
 8006626:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800662a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800662e:	ea94 0f05 	teq	r4, r5
 8006632:	bf08      	it	eq
 8006634:	ea90 0f02 	teqeq	r0, r2
 8006638:	bf1f      	itttt	ne
 800663a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800663e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006642:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006646:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800664a:	f000 80e2 	beq.w	8006812 <__adddf3+0x1ee>
 800664e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006652:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006656:	bfb8      	it	lt
 8006658:	426d      	neglt	r5, r5
 800665a:	dd0c      	ble.n	8006676 <__adddf3+0x52>
 800665c:	442c      	add	r4, r5
 800665e:	ea80 0202 	eor.w	r2, r0, r2
 8006662:	ea81 0303 	eor.w	r3, r1, r3
 8006666:	ea82 0000 	eor.w	r0, r2, r0
 800666a:	ea83 0101 	eor.w	r1, r3, r1
 800666e:	ea80 0202 	eor.w	r2, r0, r2
 8006672:	ea81 0303 	eor.w	r3, r1, r3
 8006676:	2d36      	cmp	r5, #54	; 0x36
 8006678:	bf88      	it	hi
 800667a:	bd30      	pophi	{r4, r5, pc}
 800667c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006680:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006684:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006688:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800668c:	d002      	beq.n	8006694 <__adddf3+0x70>
 800668e:	4240      	negs	r0, r0
 8006690:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006694:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006698:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800669c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80066a0:	d002      	beq.n	80066a8 <__adddf3+0x84>
 80066a2:	4252      	negs	r2, r2
 80066a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80066a8:	ea94 0f05 	teq	r4, r5
 80066ac:	f000 80a7 	beq.w	80067fe <__adddf3+0x1da>
 80066b0:	f1a4 0401 	sub.w	r4, r4, #1
 80066b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80066b8:	db0d      	blt.n	80066d6 <__adddf3+0xb2>
 80066ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80066be:	fa22 f205 	lsr.w	r2, r2, r5
 80066c2:	1880      	adds	r0, r0, r2
 80066c4:	f141 0100 	adc.w	r1, r1, #0
 80066c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80066cc:	1880      	adds	r0, r0, r2
 80066ce:	fa43 f305 	asr.w	r3, r3, r5
 80066d2:	4159      	adcs	r1, r3
 80066d4:	e00e      	b.n	80066f4 <__adddf3+0xd0>
 80066d6:	f1a5 0520 	sub.w	r5, r5, #32
 80066da:	f10e 0e20 	add.w	lr, lr, #32
 80066de:	2a01      	cmp	r2, #1
 80066e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80066e4:	bf28      	it	cs
 80066e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80066ea:	fa43 f305 	asr.w	r3, r3, r5
 80066ee:	18c0      	adds	r0, r0, r3
 80066f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80066f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80066f8:	d507      	bpl.n	800670a <__adddf3+0xe6>
 80066fa:	f04f 0e00 	mov.w	lr, #0
 80066fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8006702:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006706:	eb6e 0101 	sbc.w	r1, lr, r1
 800670a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800670e:	d31b      	bcc.n	8006748 <__adddf3+0x124>
 8006710:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006714:	d30c      	bcc.n	8006730 <__adddf3+0x10c>
 8006716:	0849      	lsrs	r1, r1, #1
 8006718:	ea5f 0030 	movs.w	r0, r0, rrx
 800671c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006720:	f104 0401 	add.w	r4, r4, #1
 8006724:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006728:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800672c:	f080 809a 	bcs.w	8006864 <__adddf3+0x240>
 8006730:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006734:	bf08      	it	eq
 8006736:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800673a:	f150 0000 	adcs.w	r0, r0, #0
 800673e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006742:	ea41 0105 	orr.w	r1, r1, r5
 8006746:	bd30      	pop	{r4, r5, pc}
 8006748:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800674c:	4140      	adcs	r0, r0
 800674e:	eb41 0101 	adc.w	r1, r1, r1
 8006752:	3c01      	subs	r4, #1
 8006754:	bf28      	it	cs
 8006756:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800675a:	d2e9      	bcs.n	8006730 <__adddf3+0x10c>
 800675c:	f091 0f00 	teq	r1, #0
 8006760:	bf04      	itt	eq
 8006762:	4601      	moveq	r1, r0
 8006764:	2000      	moveq	r0, #0
 8006766:	fab1 f381 	clz	r3, r1
 800676a:	bf08      	it	eq
 800676c:	3320      	addeq	r3, #32
 800676e:	f1a3 030b 	sub.w	r3, r3, #11
 8006772:	f1b3 0220 	subs.w	r2, r3, #32
 8006776:	da0c      	bge.n	8006792 <__adddf3+0x16e>
 8006778:	320c      	adds	r2, #12
 800677a:	dd08      	ble.n	800678e <__adddf3+0x16a>
 800677c:	f102 0c14 	add.w	ip, r2, #20
 8006780:	f1c2 020c 	rsb	r2, r2, #12
 8006784:	fa01 f00c 	lsl.w	r0, r1, ip
 8006788:	fa21 f102 	lsr.w	r1, r1, r2
 800678c:	e00c      	b.n	80067a8 <__adddf3+0x184>
 800678e:	f102 0214 	add.w	r2, r2, #20
 8006792:	bfd8      	it	le
 8006794:	f1c2 0c20 	rsble	ip, r2, #32
 8006798:	fa01 f102 	lsl.w	r1, r1, r2
 800679c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80067a0:	bfdc      	itt	le
 80067a2:	ea41 010c 	orrle.w	r1, r1, ip
 80067a6:	4090      	lslle	r0, r2
 80067a8:	1ae4      	subs	r4, r4, r3
 80067aa:	bfa2      	ittt	ge
 80067ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80067b0:	4329      	orrge	r1, r5
 80067b2:	bd30      	popge	{r4, r5, pc}
 80067b4:	ea6f 0404 	mvn.w	r4, r4
 80067b8:	3c1f      	subs	r4, #31
 80067ba:	da1c      	bge.n	80067f6 <__adddf3+0x1d2>
 80067bc:	340c      	adds	r4, #12
 80067be:	dc0e      	bgt.n	80067de <__adddf3+0x1ba>
 80067c0:	f104 0414 	add.w	r4, r4, #20
 80067c4:	f1c4 0220 	rsb	r2, r4, #32
 80067c8:	fa20 f004 	lsr.w	r0, r0, r4
 80067cc:	fa01 f302 	lsl.w	r3, r1, r2
 80067d0:	ea40 0003 	orr.w	r0, r0, r3
 80067d4:	fa21 f304 	lsr.w	r3, r1, r4
 80067d8:	ea45 0103 	orr.w	r1, r5, r3
 80067dc:	bd30      	pop	{r4, r5, pc}
 80067de:	f1c4 040c 	rsb	r4, r4, #12
 80067e2:	f1c4 0220 	rsb	r2, r4, #32
 80067e6:	fa20 f002 	lsr.w	r0, r0, r2
 80067ea:	fa01 f304 	lsl.w	r3, r1, r4
 80067ee:	ea40 0003 	orr.w	r0, r0, r3
 80067f2:	4629      	mov	r1, r5
 80067f4:	bd30      	pop	{r4, r5, pc}
 80067f6:	fa21 f004 	lsr.w	r0, r1, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	bd30      	pop	{r4, r5, pc}
 80067fe:	f094 0f00 	teq	r4, #0
 8006802:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006806:	bf06      	itte	eq
 8006808:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800680c:	3401      	addeq	r4, #1
 800680e:	3d01      	subne	r5, #1
 8006810:	e74e      	b.n	80066b0 <__adddf3+0x8c>
 8006812:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006816:	bf18      	it	ne
 8006818:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800681c:	d029      	beq.n	8006872 <__adddf3+0x24e>
 800681e:	ea94 0f05 	teq	r4, r5
 8006822:	bf08      	it	eq
 8006824:	ea90 0f02 	teqeq	r0, r2
 8006828:	d005      	beq.n	8006836 <__adddf3+0x212>
 800682a:	ea54 0c00 	orrs.w	ip, r4, r0
 800682e:	bf04      	itt	eq
 8006830:	4619      	moveq	r1, r3
 8006832:	4610      	moveq	r0, r2
 8006834:	bd30      	pop	{r4, r5, pc}
 8006836:	ea91 0f03 	teq	r1, r3
 800683a:	bf1e      	ittt	ne
 800683c:	2100      	movne	r1, #0
 800683e:	2000      	movne	r0, #0
 8006840:	bd30      	popne	{r4, r5, pc}
 8006842:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006846:	d105      	bne.n	8006854 <__adddf3+0x230>
 8006848:	0040      	lsls	r0, r0, #1
 800684a:	4149      	adcs	r1, r1
 800684c:	bf28      	it	cs
 800684e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006852:	bd30      	pop	{r4, r5, pc}
 8006854:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006858:	bf3c      	itt	cc
 800685a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800685e:	bd30      	popcc	{r4, r5, pc}
 8006860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006864:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800686c:	f04f 0000 	mov.w	r0, #0
 8006870:	bd30      	pop	{r4, r5, pc}
 8006872:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006876:	bf1a      	itte	ne
 8006878:	4619      	movne	r1, r3
 800687a:	4610      	movne	r0, r2
 800687c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006880:	bf1c      	itt	ne
 8006882:	460b      	movne	r3, r1
 8006884:	4602      	movne	r2, r0
 8006886:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800688a:	bf06      	itte	eq
 800688c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006890:	ea91 0f03 	teqeq	r1, r3
 8006894:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006898:	bd30      	pop	{r4, r5, pc}
 800689a:	bf00      	nop

0800689c <__aeabi_ui2d>:
 800689c:	f090 0f00 	teq	r0, #0
 80068a0:	bf04      	itt	eq
 80068a2:	2100      	moveq	r1, #0
 80068a4:	4770      	bxeq	lr
 80068a6:	b530      	push	{r4, r5, lr}
 80068a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80068ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80068b0:	f04f 0500 	mov.w	r5, #0
 80068b4:	f04f 0100 	mov.w	r1, #0
 80068b8:	e750      	b.n	800675c <__adddf3+0x138>
 80068ba:	bf00      	nop

080068bc <__aeabi_i2d>:
 80068bc:	f090 0f00 	teq	r0, #0
 80068c0:	bf04      	itt	eq
 80068c2:	2100      	moveq	r1, #0
 80068c4:	4770      	bxeq	lr
 80068c6:	b530      	push	{r4, r5, lr}
 80068c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80068cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80068d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80068d4:	bf48      	it	mi
 80068d6:	4240      	negmi	r0, r0
 80068d8:	f04f 0100 	mov.w	r1, #0
 80068dc:	e73e      	b.n	800675c <__adddf3+0x138>
 80068de:	bf00      	nop

080068e0 <__aeabi_f2d>:
 80068e0:	0042      	lsls	r2, r0, #1
 80068e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80068e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80068ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80068ee:	bf1f      	itttt	ne
 80068f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80068f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80068f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80068fc:	4770      	bxne	lr
 80068fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006902:	bf08      	it	eq
 8006904:	4770      	bxeq	lr
 8006906:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800690a:	bf04      	itt	eq
 800690c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006910:	4770      	bxeq	lr
 8006912:	b530      	push	{r4, r5, lr}
 8006914:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006918:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800691c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006920:	e71c      	b.n	800675c <__adddf3+0x138>
 8006922:	bf00      	nop

08006924 <__aeabi_ul2d>:
 8006924:	ea50 0201 	orrs.w	r2, r0, r1
 8006928:	bf08      	it	eq
 800692a:	4770      	bxeq	lr
 800692c:	b530      	push	{r4, r5, lr}
 800692e:	f04f 0500 	mov.w	r5, #0
 8006932:	e00a      	b.n	800694a <__aeabi_l2d+0x16>

08006934 <__aeabi_l2d>:
 8006934:	ea50 0201 	orrs.w	r2, r0, r1
 8006938:	bf08      	it	eq
 800693a:	4770      	bxeq	lr
 800693c:	b530      	push	{r4, r5, lr}
 800693e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006942:	d502      	bpl.n	800694a <__aeabi_l2d+0x16>
 8006944:	4240      	negs	r0, r0
 8006946:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800694a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800694e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006952:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006956:	f43f aed8 	beq.w	800670a <__adddf3+0xe6>
 800695a:	f04f 0203 	mov.w	r2, #3
 800695e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006962:	bf18      	it	ne
 8006964:	3203      	addne	r2, #3
 8006966:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800696a:	bf18      	it	ne
 800696c:	3203      	addne	r2, #3
 800696e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006972:	f1c2 0320 	rsb	r3, r2, #32
 8006976:	fa00 fc03 	lsl.w	ip, r0, r3
 800697a:	fa20 f002 	lsr.w	r0, r0, r2
 800697e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006982:	ea40 000e 	orr.w	r0, r0, lr
 8006986:	fa21 f102 	lsr.w	r1, r1, r2
 800698a:	4414      	add	r4, r2
 800698c:	e6bd      	b.n	800670a <__adddf3+0xe6>
 800698e:	bf00      	nop

08006990 <__aeabi_dmul>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006996:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800699a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800699e:	bf1d      	ittte	ne
 80069a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80069a4:	ea94 0f0c 	teqne	r4, ip
 80069a8:	ea95 0f0c 	teqne	r5, ip
 80069ac:	f000 f8de 	bleq	8006b6c <__aeabi_dmul+0x1dc>
 80069b0:	442c      	add	r4, r5
 80069b2:	ea81 0603 	eor.w	r6, r1, r3
 80069b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80069ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80069be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80069c2:	bf18      	it	ne
 80069c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80069c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80069cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d0:	d038      	beq.n	8006a44 <__aeabi_dmul+0xb4>
 80069d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80069d6:	f04f 0500 	mov.w	r5, #0
 80069da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80069de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80069e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80069e6:	f04f 0600 	mov.w	r6, #0
 80069ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80069ee:	f09c 0f00 	teq	ip, #0
 80069f2:	bf18      	it	ne
 80069f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80069f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80069fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006a00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006a04:	d204      	bcs.n	8006a10 <__aeabi_dmul+0x80>
 8006a06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006a0a:	416d      	adcs	r5, r5
 8006a0c:	eb46 0606 	adc.w	r6, r6, r6
 8006a10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006a14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006a18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006a1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006a20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006a24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a28:	bf88      	it	hi
 8006a2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a2e:	d81e      	bhi.n	8006a6e <__aeabi_dmul+0xde>
 8006a30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006a34:	bf08      	it	eq
 8006a36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006a3a:	f150 0000 	adcs.w	r0, r0, #0
 8006a3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006a48:	ea46 0101 	orr.w	r1, r6, r1
 8006a4c:	ea40 0002 	orr.w	r0, r0, r2
 8006a50:	ea81 0103 	eor.w	r1, r1, r3
 8006a54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006a58:	bfc2      	ittt	gt
 8006a5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a62:	bd70      	popgt	{r4, r5, r6, pc}
 8006a64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a68:	f04f 0e00 	mov.w	lr, #0
 8006a6c:	3c01      	subs	r4, #1
 8006a6e:	f300 80ab 	bgt.w	8006bc8 <__aeabi_dmul+0x238>
 8006a72:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006a76:	bfde      	ittt	le
 8006a78:	2000      	movle	r0, #0
 8006a7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006a7e:	bd70      	pople	{r4, r5, r6, pc}
 8006a80:	f1c4 0400 	rsb	r4, r4, #0
 8006a84:	3c20      	subs	r4, #32
 8006a86:	da35      	bge.n	8006af4 <__aeabi_dmul+0x164>
 8006a88:	340c      	adds	r4, #12
 8006a8a:	dc1b      	bgt.n	8006ac4 <__aeabi_dmul+0x134>
 8006a8c:	f104 0414 	add.w	r4, r4, #20
 8006a90:	f1c4 0520 	rsb	r5, r4, #32
 8006a94:	fa00 f305 	lsl.w	r3, r0, r5
 8006a98:	fa20 f004 	lsr.w	r0, r0, r4
 8006a9c:	fa01 f205 	lsl.w	r2, r1, r5
 8006aa0:	ea40 0002 	orr.w	r0, r0, r2
 8006aa4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006aa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006aac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006ab0:	fa21 f604 	lsr.w	r6, r1, r4
 8006ab4:	eb42 0106 	adc.w	r1, r2, r6
 8006ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006abc:	bf08      	it	eq
 8006abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	f1c4 040c 	rsb	r4, r4, #12
 8006ac8:	f1c4 0520 	rsb	r5, r4, #32
 8006acc:	fa00 f304 	lsl.w	r3, r0, r4
 8006ad0:	fa20 f005 	lsr.w	r0, r0, r5
 8006ad4:	fa01 f204 	lsl.w	r2, r1, r4
 8006ad8:	ea40 0002 	orr.w	r0, r0, r2
 8006adc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ae0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006ae4:	f141 0100 	adc.w	r1, r1, #0
 8006ae8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006aec:	bf08      	it	eq
 8006aee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f1c4 0520 	rsb	r5, r4, #32
 8006af8:	fa00 f205 	lsl.w	r2, r0, r5
 8006afc:	ea4e 0e02 	orr.w	lr, lr, r2
 8006b00:	fa20 f304 	lsr.w	r3, r0, r4
 8006b04:	fa01 f205 	lsl.w	r2, r1, r5
 8006b08:	ea43 0302 	orr.w	r3, r3, r2
 8006b0c:	fa21 f004 	lsr.w	r0, r1, r4
 8006b10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b14:	fa21 f204 	lsr.w	r2, r1, r4
 8006b18:	ea20 0002 	bic.w	r0, r0, r2
 8006b1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006b24:	bf08      	it	eq
 8006b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f094 0f00 	teq	r4, #0
 8006b30:	d10f      	bne.n	8006b52 <__aeabi_dmul+0x1c2>
 8006b32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006b36:	0040      	lsls	r0, r0, #1
 8006b38:	eb41 0101 	adc.w	r1, r1, r1
 8006b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006b40:	bf08      	it	eq
 8006b42:	3c01      	subeq	r4, #1
 8006b44:	d0f7      	beq.n	8006b36 <__aeabi_dmul+0x1a6>
 8006b46:	ea41 0106 	orr.w	r1, r1, r6
 8006b4a:	f095 0f00 	teq	r5, #0
 8006b4e:	bf18      	it	ne
 8006b50:	4770      	bxne	lr
 8006b52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006b56:	0052      	lsls	r2, r2, #1
 8006b58:	eb43 0303 	adc.w	r3, r3, r3
 8006b5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006b60:	bf08      	it	eq
 8006b62:	3d01      	subeq	r5, #1
 8006b64:	d0f7      	beq.n	8006b56 <__aeabi_dmul+0x1c6>
 8006b66:	ea43 0306 	orr.w	r3, r3, r6
 8006b6a:	4770      	bx	lr
 8006b6c:	ea94 0f0c 	teq	r4, ip
 8006b70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006b74:	bf18      	it	ne
 8006b76:	ea95 0f0c 	teqne	r5, ip
 8006b7a:	d00c      	beq.n	8006b96 <__aeabi_dmul+0x206>
 8006b7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b80:	bf18      	it	ne
 8006b82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006b86:	d1d1      	bne.n	8006b2c <__aeabi_dmul+0x19c>
 8006b88:	ea81 0103 	eor.w	r1, r1, r3
 8006b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b90:	f04f 0000 	mov.w	r0, #0
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b9a:	bf06      	itte	eq
 8006b9c:	4610      	moveq	r0, r2
 8006b9e:	4619      	moveq	r1, r3
 8006ba0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ba4:	d019      	beq.n	8006bda <__aeabi_dmul+0x24a>
 8006ba6:	ea94 0f0c 	teq	r4, ip
 8006baa:	d102      	bne.n	8006bb2 <__aeabi_dmul+0x222>
 8006bac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006bb0:	d113      	bne.n	8006bda <__aeabi_dmul+0x24a>
 8006bb2:	ea95 0f0c 	teq	r5, ip
 8006bb6:	d105      	bne.n	8006bc4 <__aeabi_dmul+0x234>
 8006bb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006bbc:	bf1c      	itt	ne
 8006bbe:	4610      	movne	r0, r2
 8006bc0:	4619      	movne	r1, r3
 8006bc2:	d10a      	bne.n	8006bda <__aeabi_dmul+0x24a>
 8006bc4:	ea81 0103 	eor.w	r1, r1, r3
 8006bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006bcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006bd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
 8006bda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006bde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006be2:	bd70      	pop	{r4, r5, r6, pc}

08006be4 <__aeabi_ddiv>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006bea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006bee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006bf2:	bf1d      	ittte	ne
 8006bf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006bf8:	ea94 0f0c 	teqne	r4, ip
 8006bfc:	ea95 0f0c 	teqne	r5, ip
 8006c00:	f000 f8a7 	bleq	8006d52 <__aeabi_ddiv+0x16e>
 8006c04:	eba4 0405 	sub.w	r4, r4, r5
 8006c08:	ea81 0e03 	eor.w	lr, r1, r3
 8006c0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006c10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006c14:	f000 8088 	beq.w	8006d28 <__aeabi_ddiv+0x144>
 8006c18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006c1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006c20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006c24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006c28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006c2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006c30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006c34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006c38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006c3c:	429d      	cmp	r5, r3
 8006c3e:	bf08      	it	eq
 8006c40:	4296      	cmpeq	r6, r2
 8006c42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006c46:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006c4a:	d202      	bcs.n	8006c52 <__aeabi_ddiv+0x6e>
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c52:	1ab6      	subs	r6, r6, r2
 8006c54:	eb65 0503 	sbc.w	r5, r5, r3
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006c66:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006c6e:	bf22      	ittt	cs
 8006c70:	1ab6      	subcs	r6, r6, r2
 8006c72:	4675      	movcs	r5, lr
 8006c74:	ea40 000c 	orrcs.w	r0, r0, ip
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006c86:	bf22      	ittt	cs
 8006c88:	1ab6      	subcs	r6, r6, r2
 8006c8a:	4675      	movcs	r5, lr
 8006c8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	ea4f 0232 	mov.w	r2, r2, rrx
 8006c96:	ebb6 0e02 	subs.w	lr, r6, r2
 8006c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006c9e:	bf22      	ittt	cs
 8006ca0:	1ab6      	subcs	r6, r6, r2
 8006ca2:	4675      	movcs	r5, lr
 8006ca4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8006cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8006cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006cb6:	bf22      	ittt	cs
 8006cb8:	1ab6      	subcs	r6, r6, r2
 8006cba:	4675      	movcs	r5, lr
 8006cbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006cc0:	ea55 0e06 	orrs.w	lr, r5, r6
 8006cc4:	d018      	beq.n	8006cf8 <__aeabi_ddiv+0x114>
 8006cc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006cca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006cce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006cd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006cd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006cda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006cde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006ce2:	d1c0      	bne.n	8006c66 <__aeabi_ddiv+0x82>
 8006ce4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ce8:	d10b      	bne.n	8006d02 <__aeabi_ddiv+0x11e>
 8006cea:	ea41 0100 	orr.w	r1, r1, r0
 8006cee:	f04f 0000 	mov.w	r0, #0
 8006cf2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006cf6:	e7b6      	b.n	8006c66 <__aeabi_ddiv+0x82>
 8006cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006cfc:	bf04      	itt	eq
 8006cfe:	4301      	orreq	r1, r0
 8006d00:	2000      	moveq	r0, #0
 8006d02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006d06:	bf88      	it	hi
 8006d08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006d0c:	f63f aeaf 	bhi.w	8006a6e <__aeabi_dmul+0xde>
 8006d10:	ebb5 0c03 	subs.w	ip, r5, r3
 8006d14:	bf04      	itt	eq
 8006d16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006d1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006d1e:	f150 0000 	adcs.w	r0, r0, #0
 8006d22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006d2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006d30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006d34:	bfc2      	ittt	gt
 8006d36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d3e:	bd70      	popgt	{r4, r5, r6, pc}
 8006d40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d44:	f04f 0e00 	mov.w	lr, #0
 8006d48:	3c01      	subs	r4, #1
 8006d4a:	e690      	b.n	8006a6e <__aeabi_dmul+0xde>
 8006d4c:	ea45 0e06 	orr.w	lr, r5, r6
 8006d50:	e68d      	b.n	8006a6e <__aeabi_dmul+0xde>
 8006d52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006d56:	ea94 0f0c 	teq	r4, ip
 8006d5a:	bf08      	it	eq
 8006d5c:	ea95 0f0c 	teqeq	r5, ip
 8006d60:	f43f af3b 	beq.w	8006bda <__aeabi_dmul+0x24a>
 8006d64:	ea94 0f0c 	teq	r4, ip
 8006d68:	d10a      	bne.n	8006d80 <__aeabi_ddiv+0x19c>
 8006d6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006d6e:	f47f af34 	bne.w	8006bda <__aeabi_dmul+0x24a>
 8006d72:	ea95 0f0c 	teq	r5, ip
 8006d76:	f47f af25 	bne.w	8006bc4 <__aeabi_dmul+0x234>
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	e72c      	b.n	8006bda <__aeabi_dmul+0x24a>
 8006d80:	ea95 0f0c 	teq	r5, ip
 8006d84:	d106      	bne.n	8006d94 <__aeabi_ddiv+0x1b0>
 8006d86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006d8a:	f43f aefd 	beq.w	8006b88 <__aeabi_dmul+0x1f8>
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	e722      	b.n	8006bda <__aeabi_dmul+0x24a>
 8006d94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006d98:	bf18      	it	ne
 8006d9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006d9e:	f47f aec5 	bne.w	8006b2c <__aeabi_dmul+0x19c>
 8006da2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006da6:	f47f af0d 	bne.w	8006bc4 <__aeabi_dmul+0x234>
 8006daa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006dae:	f47f aeeb 	bne.w	8006b88 <__aeabi_dmul+0x1f8>
 8006db2:	e712      	b.n	8006bda <__aeabi_dmul+0x24a>

08006db4 <__gedf2>:
 8006db4:	f04f 3cff 	mov.w	ip, #4294967295
 8006db8:	e006      	b.n	8006dc8 <__cmpdf2+0x4>
 8006dba:	bf00      	nop

08006dbc <__ledf2>:
 8006dbc:	f04f 0c01 	mov.w	ip, #1
 8006dc0:	e002      	b.n	8006dc8 <__cmpdf2+0x4>
 8006dc2:	bf00      	nop

08006dc4 <__cmpdf2>:
 8006dc4:	f04f 0c01 	mov.w	ip, #1
 8006dc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006dcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006dd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006dd8:	bf18      	it	ne
 8006dda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006dde:	d01b      	beq.n	8006e18 <__cmpdf2+0x54>
 8006de0:	b001      	add	sp, #4
 8006de2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006de6:	bf0c      	ite	eq
 8006de8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006dec:	ea91 0f03 	teqne	r1, r3
 8006df0:	bf02      	ittt	eq
 8006df2:	ea90 0f02 	teqeq	r0, r2
 8006df6:	2000      	moveq	r0, #0
 8006df8:	4770      	bxeq	lr
 8006dfa:	f110 0f00 	cmn.w	r0, #0
 8006dfe:	ea91 0f03 	teq	r1, r3
 8006e02:	bf58      	it	pl
 8006e04:	4299      	cmppl	r1, r3
 8006e06:	bf08      	it	eq
 8006e08:	4290      	cmpeq	r0, r2
 8006e0a:	bf2c      	ite	cs
 8006e0c:	17d8      	asrcs	r0, r3, #31
 8006e0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006e12:	f040 0001 	orr.w	r0, r0, #1
 8006e16:	4770      	bx	lr
 8006e18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006e1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006e20:	d102      	bne.n	8006e28 <__cmpdf2+0x64>
 8006e22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006e26:	d107      	bne.n	8006e38 <__cmpdf2+0x74>
 8006e28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006e2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006e30:	d1d6      	bne.n	8006de0 <__cmpdf2+0x1c>
 8006e32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006e36:	d0d3      	beq.n	8006de0 <__cmpdf2+0x1c>
 8006e38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop

08006e40 <__aeabi_cdrcmple>:
 8006e40:	4684      	mov	ip, r0
 8006e42:	4610      	mov	r0, r2
 8006e44:	4662      	mov	r2, ip
 8006e46:	468c      	mov	ip, r1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4663      	mov	r3, ip
 8006e4c:	e000      	b.n	8006e50 <__aeabi_cdcmpeq>
 8006e4e:	bf00      	nop

08006e50 <__aeabi_cdcmpeq>:
 8006e50:	b501      	push	{r0, lr}
 8006e52:	f7ff ffb7 	bl	8006dc4 <__cmpdf2>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	bf48      	it	mi
 8006e5a:	f110 0f00 	cmnmi.w	r0, #0
 8006e5e:	bd01      	pop	{r0, pc}

08006e60 <__aeabi_dcmpeq>:
 8006e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e64:	f7ff fff4 	bl	8006e50 <__aeabi_cdcmpeq>
 8006e68:	bf0c      	ite	eq
 8006e6a:	2001      	moveq	r0, #1
 8006e6c:	2000      	movne	r0, #0
 8006e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e72:	bf00      	nop

08006e74 <__aeabi_dcmplt>:
 8006e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e78:	f7ff ffea 	bl	8006e50 <__aeabi_cdcmpeq>
 8006e7c:	bf34      	ite	cc
 8006e7e:	2001      	movcc	r0, #1
 8006e80:	2000      	movcs	r0, #0
 8006e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e86:	bf00      	nop

08006e88 <__aeabi_dcmple>:
 8006e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006e8c:	f7ff ffe0 	bl	8006e50 <__aeabi_cdcmpeq>
 8006e90:	bf94      	ite	ls
 8006e92:	2001      	movls	r0, #1
 8006e94:	2000      	movhi	r0, #0
 8006e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e9a:	bf00      	nop

08006e9c <__aeabi_dcmpge>:
 8006e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ea0:	f7ff ffce 	bl	8006e40 <__aeabi_cdrcmple>
 8006ea4:	bf94      	ite	ls
 8006ea6:	2001      	movls	r0, #1
 8006ea8:	2000      	movhi	r0, #0
 8006eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8006eae:	bf00      	nop

08006eb0 <__aeabi_dcmpgt>:
 8006eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006eb4:	f7ff ffc4 	bl	8006e40 <__aeabi_cdrcmple>
 8006eb8:	bf34      	ite	cc
 8006eba:	2001      	movcc	r0, #1
 8006ebc:	2000      	movcs	r0, #0
 8006ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ec2:	bf00      	nop

08006ec4 <__aeabi_d2iz>:
 8006ec4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006ec8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006ecc:	d215      	bcs.n	8006efa <__aeabi_d2iz+0x36>
 8006ece:	d511      	bpl.n	8006ef4 <__aeabi_d2iz+0x30>
 8006ed0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ed4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006ed8:	d912      	bls.n	8006f00 <__aeabi_d2iz+0x3c>
 8006eda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006ee6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006eea:	fa23 f002 	lsr.w	r0, r3, r2
 8006eee:	bf18      	it	ne
 8006ef0:	4240      	negne	r0, r0
 8006ef2:	4770      	bx	lr
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	4770      	bx	lr
 8006efa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006efe:	d105      	bne.n	8006f0c <__aeabi_d2iz+0x48>
 8006f00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006f04:	bf08      	it	eq
 8006f06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006f0a:	4770      	bx	lr
 8006f0c:	f04f 0000 	mov.w	r0, #0
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop

08006f14 <__aeabi_d2uiz>:
 8006f14:	004a      	lsls	r2, r1, #1
 8006f16:	d211      	bcs.n	8006f3c <__aeabi_d2uiz+0x28>
 8006f18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006f1c:	d211      	bcs.n	8006f42 <__aeabi_d2uiz+0x2e>
 8006f1e:	d50d      	bpl.n	8006f3c <__aeabi_d2uiz+0x28>
 8006f20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006f24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006f28:	d40e      	bmi.n	8006f48 <__aeabi_d2uiz+0x34>
 8006f2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006f36:	fa23 f002 	lsr.w	r0, r3, r2
 8006f3a:	4770      	bx	lr
 8006f3c:	f04f 0000 	mov.w	r0, #0
 8006f40:	4770      	bx	lr
 8006f42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006f46:	d102      	bne.n	8006f4e <__aeabi_d2uiz+0x3a>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	4770      	bx	lr
 8006f4e:	f04f 0000 	mov.w	r0, #0
 8006f52:	4770      	bx	lr

08006f54 <__aeabi_uldivmod>:
 8006f54:	b953      	cbnz	r3, 8006f6c <__aeabi_uldivmod+0x18>
 8006f56:	b94a      	cbnz	r2, 8006f6c <__aeabi_uldivmod+0x18>
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	bf08      	it	eq
 8006f5c:	2800      	cmpeq	r0, #0
 8006f5e:	bf1c      	itt	ne
 8006f60:	f04f 31ff 	movne.w	r1, #4294967295
 8006f64:	f04f 30ff 	movne.w	r0, #4294967295
 8006f68:	f000 b9aa 	b.w	80072c0 <__aeabi_idiv0>
 8006f6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006f70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006f74:	f000 f83c 	bl	8006ff0 <__udivmoddi4>
 8006f78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f80:	b004      	add	sp, #16
 8006f82:	4770      	bx	lr

08006f84 <__aeabi_d2lz>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	f7ff ff71 	bl	8006e74 <__aeabi_dcmplt>
 8006f92:	b928      	cbnz	r0, 8006fa0 <__aeabi_d2lz+0x1c>
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9c:	f000 b80a 	b.w	8006fb4 <__aeabi_d2ulz>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8006fa6:	f000 f805 	bl	8006fb4 <__aeabi_d2ulz>
 8006faa:	4240      	negs	r0, r0
 8006fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006fb0:	bd38      	pop	{r3, r4, r5, pc}
 8006fb2:	bf00      	nop

08006fb4 <__aeabi_d2ulz>:
 8006fb4:	b5d0      	push	{r4, r6, r7, lr}
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <__aeabi_d2ulz+0x34>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f7ff fce7 	bl	8006990 <__aeabi_dmul>
 8006fc2:	f7ff ffa7 	bl	8006f14 <__aeabi_d2uiz>
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	f7ff fc68 	bl	800689c <__aeabi_ui2d>
 8006fcc:	4b07      	ldr	r3, [pc, #28]	; (8006fec <__aeabi_d2ulz+0x38>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f7ff fcde 	bl	8006990 <__aeabi_dmul>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7ff fb20 	bl	8006620 <__aeabi_dsub>
 8006fe0:	f7ff ff98 	bl	8006f14 <__aeabi_d2uiz>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	bdd0      	pop	{r4, r6, r7, pc}
 8006fe8:	3df00000 	.word	0x3df00000
 8006fec:	41f00000 	.word	0x41f00000

08006ff0 <__udivmoddi4>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	9d08      	ldr	r5, [sp, #32]
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	468e      	mov	lr, r1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d14d      	bne.n	800709a <__udivmoddi4+0xaa>
 8006ffe:	428a      	cmp	r2, r1
 8007000:	4694      	mov	ip, r2
 8007002:	d969      	bls.n	80070d8 <__udivmoddi4+0xe8>
 8007004:	fab2 f282 	clz	r2, r2
 8007008:	b152      	cbz	r2, 8007020 <__udivmoddi4+0x30>
 800700a:	fa01 f302 	lsl.w	r3, r1, r2
 800700e:	f1c2 0120 	rsb	r1, r2, #32
 8007012:	fa20 f101 	lsr.w	r1, r0, r1
 8007016:	fa0c fc02 	lsl.w	ip, ip, r2
 800701a:	ea41 0e03 	orr.w	lr, r1, r3
 800701e:	4094      	lsls	r4, r2
 8007020:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8007024:	0c21      	lsrs	r1, r4, #16
 8007026:	fbbe f6f8 	udiv	r6, lr, r8
 800702a:	fa1f f78c 	uxth.w	r7, ip
 800702e:	fb08 e316 	mls	r3, r8, r6, lr
 8007032:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007036:	fb06 f107 	mul.w	r1, r6, r7
 800703a:	4299      	cmp	r1, r3
 800703c:	d90a      	bls.n	8007054 <__udivmoddi4+0x64>
 800703e:	eb1c 0303 	adds.w	r3, ip, r3
 8007042:	f106 30ff 	add.w	r0, r6, #4294967295
 8007046:	f080 811f 	bcs.w	8007288 <__udivmoddi4+0x298>
 800704a:	4299      	cmp	r1, r3
 800704c:	f240 811c 	bls.w	8007288 <__udivmoddi4+0x298>
 8007050:	3e02      	subs	r6, #2
 8007052:	4463      	add	r3, ip
 8007054:	1a5b      	subs	r3, r3, r1
 8007056:	b2a4      	uxth	r4, r4
 8007058:	fbb3 f0f8 	udiv	r0, r3, r8
 800705c:	fb08 3310 	mls	r3, r8, r0, r3
 8007060:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007064:	fb00 f707 	mul.w	r7, r0, r7
 8007068:	42a7      	cmp	r7, r4
 800706a:	d90a      	bls.n	8007082 <__udivmoddi4+0x92>
 800706c:	eb1c 0404 	adds.w	r4, ip, r4
 8007070:	f100 33ff 	add.w	r3, r0, #4294967295
 8007074:	f080 810a 	bcs.w	800728c <__udivmoddi4+0x29c>
 8007078:	42a7      	cmp	r7, r4
 800707a:	f240 8107 	bls.w	800728c <__udivmoddi4+0x29c>
 800707e:	4464      	add	r4, ip
 8007080:	3802      	subs	r0, #2
 8007082:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007086:	1be4      	subs	r4, r4, r7
 8007088:	2600      	movs	r6, #0
 800708a:	b11d      	cbz	r5, 8007094 <__udivmoddi4+0xa4>
 800708c:	40d4      	lsrs	r4, r2
 800708e:	2300      	movs	r3, #0
 8007090:	e9c5 4300 	strd	r4, r3, [r5]
 8007094:	4631      	mov	r1, r6
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	428b      	cmp	r3, r1
 800709c:	d909      	bls.n	80070b2 <__udivmoddi4+0xc2>
 800709e:	2d00      	cmp	r5, #0
 80070a0:	f000 80ef 	beq.w	8007282 <__udivmoddi4+0x292>
 80070a4:	2600      	movs	r6, #0
 80070a6:	e9c5 0100 	strd	r0, r1, [r5]
 80070aa:	4630      	mov	r0, r6
 80070ac:	4631      	mov	r1, r6
 80070ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b2:	fab3 f683 	clz	r6, r3
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	d14a      	bne.n	8007150 <__udivmoddi4+0x160>
 80070ba:	428b      	cmp	r3, r1
 80070bc:	d302      	bcc.n	80070c4 <__udivmoddi4+0xd4>
 80070be:	4282      	cmp	r2, r0
 80070c0:	f200 80f9 	bhi.w	80072b6 <__udivmoddi4+0x2c6>
 80070c4:	1a84      	subs	r4, r0, r2
 80070c6:	eb61 0303 	sbc.w	r3, r1, r3
 80070ca:	2001      	movs	r0, #1
 80070cc:	469e      	mov	lr, r3
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	d0e0      	beq.n	8007094 <__udivmoddi4+0xa4>
 80070d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80070d6:	e7dd      	b.n	8007094 <__udivmoddi4+0xa4>
 80070d8:	b902      	cbnz	r2, 80070dc <__udivmoddi4+0xec>
 80070da:	deff      	udf	#255	; 0xff
 80070dc:	fab2 f282 	clz	r2, r2
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	f040 8092 	bne.w	800720a <__udivmoddi4+0x21a>
 80070e6:	eba1 010c 	sub.w	r1, r1, ip
 80070ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80070ee:	fa1f fe8c 	uxth.w	lr, ip
 80070f2:	2601      	movs	r6, #1
 80070f4:	0c20      	lsrs	r0, r4, #16
 80070f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80070fa:	fb07 1113 	mls	r1, r7, r3, r1
 80070fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007102:	fb0e f003 	mul.w	r0, lr, r3
 8007106:	4288      	cmp	r0, r1
 8007108:	d908      	bls.n	800711c <__udivmoddi4+0x12c>
 800710a:	eb1c 0101 	adds.w	r1, ip, r1
 800710e:	f103 38ff 	add.w	r8, r3, #4294967295
 8007112:	d202      	bcs.n	800711a <__udivmoddi4+0x12a>
 8007114:	4288      	cmp	r0, r1
 8007116:	f200 80cb 	bhi.w	80072b0 <__udivmoddi4+0x2c0>
 800711a:	4643      	mov	r3, r8
 800711c:	1a09      	subs	r1, r1, r0
 800711e:	b2a4      	uxth	r4, r4
 8007120:	fbb1 f0f7 	udiv	r0, r1, r7
 8007124:	fb07 1110 	mls	r1, r7, r0, r1
 8007128:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800712c:	fb0e fe00 	mul.w	lr, lr, r0
 8007130:	45a6      	cmp	lr, r4
 8007132:	d908      	bls.n	8007146 <__udivmoddi4+0x156>
 8007134:	eb1c 0404 	adds.w	r4, ip, r4
 8007138:	f100 31ff 	add.w	r1, r0, #4294967295
 800713c:	d202      	bcs.n	8007144 <__udivmoddi4+0x154>
 800713e:	45a6      	cmp	lr, r4
 8007140:	f200 80bb 	bhi.w	80072ba <__udivmoddi4+0x2ca>
 8007144:	4608      	mov	r0, r1
 8007146:	eba4 040e 	sub.w	r4, r4, lr
 800714a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800714e:	e79c      	b.n	800708a <__udivmoddi4+0x9a>
 8007150:	f1c6 0720 	rsb	r7, r6, #32
 8007154:	40b3      	lsls	r3, r6
 8007156:	fa22 fc07 	lsr.w	ip, r2, r7
 800715a:	ea4c 0c03 	orr.w	ip, ip, r3
 800715e:	fa20 f407 	lsr.w	r4, r0, r7
 8007162:	fa01 f306 	lsl.w	r3, r1, r6
 8007166:	431c      	orrs	r4, r3
 8007168:	40f9      	lsrs	r1, r7
 800716a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800716e:	fa00 f306 	lsl.w	r3, r0, r6
 8007172:	fbb1 f8f9 	udiv	r8, r1, r9
 8007176:	0c20      	lsrs	r0, r4, #16
 8007178:	fa1f fe8c 	uxth.w	lr, ip
 800717c:	fb09 1118 	mls	r1, r9, r8, r1
 8007180:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007184:	fb08 f00e 	mul.w	r0, r8, lr
 8007188:	4288      	cmp	r0, r1
 800718a:	fa02 f206 	lsl.w	r2, r2, r6
 800718e:	d90b      	bls.n	80071a8 <__udivmoddi4+0x1b8>
 8007190:	eb1c 0101 	adds.w	r1, ip, r1
 8007194:	f108 3aff 	add.w	sl, r8, #4294967295
 8007198:	f080 8088 	bcs.w	80072ac <__udivmoddi4+0x2bc>
 800719c:	4288      	cmp	r0, r1
 800719e:	f240 8085 	bls.w	80072ac <__udivmoddi4+0x2bc>
 80071a2:	f1a8 0802 	sub.w	r8, r8, #2
 80071a6:	4461      	add	r1, ip
 80071a8:	1a09      	subs	r1, r1, r0
 80071aa:	b2a4      	uxth	r4, r4
 80071ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80071b0:	fb09 1110 	mls	r1, r9, r0, r1
 80071b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80071b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80071bc:	458e      	cmp	lr, r1
 80071be:	d908      	bls.n	80071d2 <__udivmoddi4+0x1e2>
 80071c0:	eb1c 0101 	adds.w	r1, ip, r1
 80071c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80071c8:	d26c      	bcs.n	80072a4 <__udivmoddi4+0x2b4>
 80071ca:	458e      	cmp	lr, r1
 80071cc:	d96a      	bls.n	80072a4 <__udivmoddi4+0x2b4>
 80071ce:	3802      	subs	r0, #2
 80071d0:	4461      	add	r1, ip
 80071d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80071d6:	fba0 9402 	umull	r9, r4, r0, r2
 80071da:	eba1 010e 	sub.w	r1, r1, lr
 80071de:	42a1      	cmp	r1, r4
 80071e0:	46c8      	mov	r8, r9
 80071e2:	46a6      	mov	lr, r4
 80071e4:	d356      	bcc.n	8007294 <__udivmoddi4+0x2a4>
 80071e6:	d053      	beq.n	8007290 <__udivmoddi4+0x2a0>
 80071e8:	b15d      	cbz	r5, 8007202 <__udivmoddi4+0x212>
 80071ea:	ebb3 0208 	subs.w	r2, r3, r8
 80071ee:	eb61 010e 	sbc.w	r1, r1, lr
 80071f2:	fa01 f707 	lsl.w	r7, r1, r7
 80071f6:	fa22 f306 	lsr.w	r3, r2, r6
 80071fa:	40f1      	lsrs	r1, r6
 80071fc:	431f      	orrs	r7, r3
 80071fe:	e9c5 7100 	strd	r7, r1, [r5]
 8007202:	2600      	movs	r6, #0
 8007204:	4631      	mov	r1, r6
 8007206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720a:	f1c2 0320 	rsb	r3, r2, #32
 800720e:	40d8      	lsrs	r0, r3
 8007210:	fa0c fc02 	lsl.w	ip, ip, r2
 8007214:	fa21 f303 	lsr.w	r3, r1, r3
 8007218:	4091      	lsls	r1, r2
 800721a:	4301      	orrs	r1, r0
 800721c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007220:	fa1f fe8c 	uxth.w	lr, ip
 8007224:	fbb3 f0f7 	udiv	r0, r3, r7
 8007228:	fb07 3610 	mls	r6, r7, r0, r3
 800722c:	0c0b      	lsrs	r3, r1, #16
 800722e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007232:	fb00 f60e 	mul.w	r6, r0, lr
 8007236:	429e      	cmp	r6, r3
 8007238:	fa04 f402 	lsl.w	r4, r4, r2
 800723c:	d908      	bls.n	8007250 <__udivmoddi4+0x260>
 800723e:	eb1c 0303 	adds.w	r3, ip, r3
 8007242:	f100 38ff 	add.w	r8, r0, #4294967295
 8007246:	d22f      	bcs.n	80072a8 <__udivmoddi4+0x2b8>
 8007248:	429e      	cmp	r6, r3
 800724a:	d92d      	bls.n	80072a8 <__udivmoddi4+0x2b8>
 800724c:	3802      	subs	r0, #2
 800724e:	4463      	add	r3, ip
 8007250:	1b9b      	subs	r3, r3, r6
 8007252:	b289      	uxth	r1, r1
 8007254:	fbb3 f6f7 	udiv	r6, r3, r7
 8007258:	fb07 3316 	mls	r3, r7, r6, r3
 800725c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007260:	fb06 f30e 	mul.w	r3, r6, lr
 8007264:	428b      	cmp	r3, r1
 8007266:	d908      	bls.n	800727a <__udivmoddi4+0x28a>
 8007268:	eb1c 0101 	adds.w	r1, ip, r1
 800726c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007270:	d216      	bcs.n	80072a0 <__udivmoddi4+0x2b0>
 8007272:	428b      	cmp	r3, r1
 8007274:	d914      	bls.n	80072a0 <__udivmoddi4+0x2b0>
 8007276:	3e02      	subs	r6, #2
 8007278:	4461      	add	r1, ip
 800727a:	1ac9      	subs	r1, r1, r3
 800727c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8007280:	e738      	b.n	80070f4 <__udivmoddi4+0x104>
 8007282:	462e      	mov	r6, r5
 8007284:	4628      	mov	r0, r5
 8007286:	e705      	b.n	8007094 <__udivmoddi4+0xa4>
 8007288:	4606      	mov	r6, r0
 800728a:	e6e3      	b.n	8007054 <__udivmoddi4+0x64>
 800728c:	4618      	mov	r0, r3
 800728e:	e6f8      	b.n	8007082 <__udivmoddi4+0x92>
 8007290:	454b      	cmp	r3, r9
 8007292:	d2a9      	bcs.n	80071e8 <__udivmoddi4+0x1f8>
 8007294:	ebb9 0802 	subs.w	r8, r9, r2
 8007298:	eb64 0e0c 	sbc.w	lr, r4, ip
 800729c:	3801      	subs	r0, #1
 800729e:	e7a3      	b.n	80071e8 <__udivmoddi4+0x1f8>
 80072a0:	4646      	mov	r6, r8
 80072a2:	e7ea      	b.n	800727a <__udivmoddi4+0x28a>
 80072a4:	4620      	mov	r0, r4
 80072a6:	e794      	b.n	80071d2 <__udivmoddi4+0x1e2>
 80072a8:	4640      	mov	r0, r8
 80072aa:	e7d1      	b.n	8007250 <__udivmoddi4+0x260>
 80072ac:	46d0      	mov	r8, sl
 80072ae:	e77b      	b.n	80071a8 <__udivmoddi4+0x1b8>
 80072b0:	3b02      	subs	r3, #2
 80072b2:	4461      	add	r1, ip
 80072b4:	e732      	b.n	800711c <__udivmoddi4+0x12c>
 80072b6:	4630      	mov	r0, r6
 80072b8:	e709      	b.n	80070ce <__udivmoddi4+0xde>
 80072ba:	4464      	add	r4, ip
 80072bc:	3802      	subs	r0, #2
 80072be:	e742      	b.n	8007146 <__udivmoddi4+0x156>

080072c0 <__aeabi_idiv0>:
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop

080072c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <LL_C2_PWR_SetPowerMode+0x28>)
 80072ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d2:	f023 0207 	bic.w	r2, r3, #7
 80072d6:	4905      	ldr	r1, [pc, #20]	; (80072ec <LL_C2_PWR_SetPowerMode+0x28>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	58000400 	.word	0x58000400

080072f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <LL_EXTI_EnableIT_32_63+0x24>)
 80072fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80072fe:	4905      	ldr	r1, [pc, #20]	; (8007314 <LL_EXTI_EnableIT_32_63+0x24>)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	58000800 	.word	0x58000800

08007318 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8007320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007324:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8007326:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800732a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007332:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	cafecafe 	.word	0xcafecafe

08007354 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4313      	orrs	r3, r2
 800736e:	608b      	str	r3, [r1, #8]
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800738c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800739e:	b480      	push	{r7}
 80073a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80073c0:	b480      	push	{r7}
 80073c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80073c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073d4:	d101      	bne.n	80073da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80073e6:	b480      	push	{r7}
 80073e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80073ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073fa:	d101      	bne.n	8007400 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800741a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4313      	orrs	r3, r2
 8007422:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4013      	ands	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	605a      	str	r2, [r3, #4]
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695a      	ldr	r2, [r3, #20]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	615a      	str	r2, [r3, #20]
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695a      	ldr	r2, [r3, #20]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	615a      	str	r2, [r3, #20]
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	609a      	str	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	619a      	str	r2, [r3, #24]
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <LL_LPM_EnableSleep+0x1c>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a04      	ldr	r2, [pc, #16]	; (8007520 <LL_LPM_EnableSleep+0x1c>)
 800750e:	f023 0304 	bic.w	r3, r3, #4
 8007512:	6113      	str	r3, [r2, #16]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	e000ed00 	.word	0xe000ed00

08007524 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	22ff      	movs	r2, #255	; 0xff
 8007530:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	22ca      	movs	r2, #202	; 0xca
 800754a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2253      	movs	r2, #83	; 0x53
 8007550:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f023 0207 	bic.w	r2, r3, #7
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	609a      	str	r2, [r3, #8]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <MX_APPE_Config+0x18>)
 800758a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800758e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8007590:	f000 f824 	bl	80075dc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8007594:	f000 f864 	bl	8007660 <Config_HSE>

  return;
 8007598:	bf00      	nop
}
 800759a:	bd80      	pop	{r7, pc}
 800759c:	58004000 	.word	0x58004000

080075a0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80075a4:	f000 f870 	bl	8007688 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80075a8:	f000 f888 	bl	80076bc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80075ac:	4903      	ldr	r1, [pc, #12]	; (80075bc <MX_APPE_Init+0x1c>)
 80075ae:	2000      	movs	r0, #0
 80075b0:	f000 f9b0 	bl	8007914 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80075b4:	f000 f890 	bl	80076d8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80075b8:	bf00      	nop
}
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000c24 	.word	0x20000c24

080075c0 <Init_Smps>:

void Init_Smps(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80075c4:	bf00      	nop
}
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <Init_Exti>:

void Init_Exti(void)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80075d2:	2050      	movs	r0, #80	; 0x50
 80075d4:	f7ff fe8c 	bl	80072f0 <LL_EXTI_EnableIT_32_63>

  return;
 80075d8:	bf00      	nop
}
 80075da:	bd80      	pop	{r7, pc}

080075dc <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80075e0:	f000 f804 	bl	80075ec <Reset_BackupDomain>

  Reset_IPCC();
 80075e4:	f000 f81a 	bl	800761c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80075e8:	bf00      	nop
}
 80075ea:	bd80      	pop	{r7, pc}

080075ec <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80075f0:	f7ff fee6 	bl	80073c0 <LL_RCC_IsActiveFlag_PINRST>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <Reset_BackupDomain+0x2a>
 80075fa:	f7ff fef4 	bl	80073e6 <LL_RCC_IsActiveFlag_SFTRST>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8007604:	f001 fd54 	bl	80090b0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8007608:	f001 fd52 	bl	80090b0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800760c:	f7ff feb6 	bl	800737c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8007610:	f7ff fec5 	bl	800739e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8007614:	bf00      	nop
 8007616:	bf00      	nop
}
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8007620:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007624:	f7ff fef2 	bl	800740c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8007628:	213f      	movs	r1, #63	; 0x3f
 800762a:	480c      	ldr	r0, [pc, #48]	; (800765c <Reset_IPCC+0x40>)
 800762c:	f7ff ff4d 	bl	80074ca <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8007630:	213f      	movs	r1, #63	; 0x3f
 8007632:	480a      	ldr	r0, [pc, #40]	; (800765c <Reset_IPCC+0x40>)
 8007634:	f7ff ff57 	bl	80074e6 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8007638:	213f      	movs	r1, #63	; 0x3f
 800763a:	4808      	ldr	r0, [pc, #32]	; (800765c <Reset_IPCC+0x40>)
 800763c:	f7ff feff 	bl	800743e <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8007640:	213f      	movs	r1, #63	; 0x3f
 8007642:	4806      	ldr	r0, [pc, #24]	; (800765c <Reset_IPCC+0x40>)
 8007644:	f7ff ff1e 	bl	8007484 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8007648:	213f      	movs	r1, #63	; 0x3f
 800764a:	4804      	ldr	r0, [pc, #16]	; (800765c <Reset_IPCC+0x40>)
 800764c:	f7ff ff09 	bl	8007462 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8007650:	213f      	movs	r1, #63	; 0x3f
 8007652:	4802      	ldr	r0, [pc, #8]	; (800765c <Reset_IPCC+0x40>)
 8007654:	f7ff ff28 	bl	80074a8 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8007658:	bf00      	nop
}
 800765a:	bd80      	pop	{r7, pc}
 800765c:	58000c00 	.word	0x58000c00

08007660 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8007666:	2000      	movs	r0, #0
 8007668:	f004 fd32 	bl	800c0d0 <OTP_Read>
 800766c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	799b      	ldrb	r3, [r3, #6]
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff fe4d 	bl	8007318 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800767e:	bf00      	nop
 8007680:	bf00      	nop
}
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <System_Init>:

static void System_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  Init_Smps();
 800768c:	f7ff ff98 	bl	80075c0 <Init_Smps>

  Init_Exti();
 8007690:	f7ff ff9d 	bl	80075ce <Init_Exti>

  Init_Rtc();
 8007694:	f000 f802 	bl	800769c <Init_Rtc>

  return;
 8007698:	bf00      	nop
}
 800769a:	bd80      	pop	{r7, pc}

0800769c <Init_Rtc>:

static void Init_Rtc(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80076a0:	4805      	ldr	r0, [pc, #20]	; (80076b8 <Init_Rtc+0x1c>)
 80076a2:	f7ff ff4c 	bl	800753e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80076a6:	2100      	movs	r1, #0
 80076a8:	4803      	ldr	r0, [pc, #12]	; (80076b8 <Init_Rtc+0x1c>)
 80076aa:	f7ff ff58 	bl	800755e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80076ae:	4802      	ldr	r0, [pc, #8]	; (80076b8 <Init_Rtc+0x1c>)
 80076b0:	f7ff ff38 	bl	8007524 <LL_RTC_EnableWriteProtection>

  return;
 80076b4:	bf00      	nop
}
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40002800 	.word	0x40002800

080076bc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80076c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80076c4:	f7ff fe46 	bl	8007354 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80076c8:	f008 f856 	bl	800f778 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80076cc:	2004      	movs	r0, #4
 80076ce:	f7ff fdf9 	bl	80072c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80076d2:	bf00      	nop
}
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80076de:	f004 fb55 	bl	800bd8c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 80076e2:	4a11      	ldr	r2, [pc, #68]	; (8007728 <appe_Tl_Init+0x50>)
 80076e4:	2100      	movs	r1, #0
 80076e6:	2010      	movs	r0, #16
 80076e8:	f008 f984 	bl	800f9f4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <appe_Tl_Init+0x54>)
 80076ee:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80076f0:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <appe_Tl_Init+0x58>)
 80076f2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80076f4:	463b      	mov	r3, r7
 80076f6:	4619      	mov	r1, r3
 80076f8:	480e      	ldr	r0, [pc, #56]	; (8007734 <appe_Tl_Init+0x5c>)
 80076fa:	f004 fa0d 	bl	800bb18 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <appe_Tl_Init+0x60>)
 8007704:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <appe_Tl_Init+0x64>)
 8007708:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800770a:	f240 533c 	movw	r3, #1340	; 0x53c
 800770e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8007710:	f107 0308 	add.w	r3, r7, #8
 8007714:	4618      	mov	r0, r3
 8007716:	f004 fbff 	bl	800bf18 <TL_MM_Init>

  TL_Enable();
 800771a:	f004 fb31 	bl	800bd80 <TL_Enable>

  return;
 800771e:	bf00      	nop
}
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	0800bb51 	.word	0x0800bb51
 800772c:	200005dc 	.word	0x200005dc
 8007730:	08007741 	.word	0x08007741
 8007734:	08007757 	.word	0x08007757
 8007738:	200006e8 	.word	0x200006e8
 800773c:	200000a0 	.word	0x200000a0

08007740 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800774a:	bf00      	nop
}
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	330b      	adds	r3, #11
 8007764:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8007770:	d004      	beq.n	800777c <APPE_SysUserEvtRx+0x26>
 8007772:	f249 2201 	movw	r2, #37377	; 0x9201
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 800777a:	e008      	b.n	800778e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 800777c:	f000 f82a 	bl	80077d4 <APPE_SysEvtReadyProcessing>
         break;
 8007780:	e005      	b.n	800778e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	789b      	ldrb	r3, [r3, #2]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f806 	bl	8007798 <APPE_SysEvtError>
         break;
 800778c:	bf00      	nop
  }
  return;
 800778e:	bf00      	nop
}
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	2bc8      	cmp	r3, #200	; 0xc8
 80077a6:	d105      	bne.n	80077b4 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 80077a8:	4a08      	ldr	r2, [pc, #32]	; (80077cc <APPE_SysEvtError+0x34>)
 80077aa:	2101      	movs	r1, #1
 80077ac:	2000      	movs	r0, #0
 80077ae:	f000 fded 	bl	800838c <logApplication>
       break;
 80077b2:	e006      	b.n	80077c2 <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a06      	ldr	r2, [pc, #24]	; (80077d0 <APPE_SysEvtError+0x38>)
 80077b8:	2101      	movs	r1, #1
 80077ba:	2000      	movs	r0, #0
 80077bc:	f000 fde6 	bl	800838c <logApplication>
       break;
 80077c0:	bf00      	nop
  }
  return;
 80077c2:	bf00      	nop
}
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	08011050 	.word	0x08011050
 80077d0:	08011070 	.word	0x08011070

080077d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 80077d8:	f004 fc12 	bl	800c000 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 80077dc:	f007 fa1a 	bl	800ec14 <APP_ZIGBEE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80077e0:	2100      	movs	r1, #0
 80077e2:	2001      	movs	r0, #1
 80077e4:	f007 ffda 	bl	800f79c <UTIL_LPM_SetOffMode>
  return;
 80077e8:	bf00      	nop
}
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077f4:	f000 ff9a 	bl	800872c <HAL_GetTick>
 80077f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d00a      	beq.n	800781c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8007806:	f000 ffa9 	bl	800875c <HAL_GetTickFreq>
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007814:	e002      	b.n	800781c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8007816:	f7ff fe75 	bl	8007504 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800781a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800781c:	f000 ff86 	bl	800872c <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	429a      	cmp	r2, r3
 800782a:	d8f4      	bhi.n	8007816 <HAL_Delay+0x2a>
  }
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 8007836:	b480      	push	{r7}
 8007838:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800783a:	bf00      	nop
}
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d003      	beq.n	800785c <UTIL_SEQ_EvtIdle+0x18>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b04      	cmp	r3, #4
 8007858:	d004      	beq.n	8007864 <UTIL_SEQ_EvtIdle+0x20>
 800785a:	e00a      	b.n	8007872 <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 800785c:	2002      	movs	r0, #2
 800785e:	f007 ffcd 	bl	800f7fc <UTIL_SEQ_Run>
    break;
 8007862:	e00b      	b.n	800787c <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8007864:	2004      	movs	r0, #4
 8007866:	f008 f913 	bl	800fa90 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 800786a:	2003      	movs	r0, #3
 800786c:	f007 ffc6 	bl	800f7fc <UTIL_SEQ_Run>
    break;
 8007870:	e004      	b.n	800787c <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007872:	f04f 30ff 	mov.w	r0, #4294967295
 8007876:	f007 ffc1 	bl	800f7fc <UTIL_SEQ_Run>
    break;
 800787a:	bf00      	nop
  }
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800788c:	2100      	movs	r1, #0
 800788e:	2010      	movs	r0, #16
 8007890:	f008 f8d2 	bl	800fa38 <UTIL_SEQ_SetTask>
  return;
 8007894:	bf00      	nop
}
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80078a4:	2001      	movs	r0, #1
 80078a6:	f008 f8f3 	bl	800fa90 <UTIL_SEQ_SetEvt>
  return;
 80078aa:	bf00      	nop
}
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80078ba:	2001      	movs	r0, #1
 80078bc:	f008 f908 	bl	800fad0 <UTIL_SEQ_WaitEvt>
  return;
 80078c0:	bf00      	nop
}
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <LL_EXTI_EnableIT_0_31>:
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <LL_EXTI_EnableIT_0_31+0x24>)
 80078d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80078d6:	4905      	ldr	r1, [pc, #20]	; (80078ec <LL_EXTI_EnableIT_0_31+0x24>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	58000800 	.word	0x58000800

080078f0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4313      	orrs	r3, r2
 8007902:	600b      	str	r3, [r1, #0]

}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	58000800 	.word	0x58000800

08007914 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007920:	4b5e      	ldr	r3, [pc, #376]	; (8007a9c <HW_TS_Init+0x188>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	22ca      	movs	r2, #202	; 0xca
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
 8007928:	4b5c      	ldr	r3, [pc, #368]	; (8007a9c <HW_TS_Init+0x188>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2253      	movs	r2, #83	; 0x53
 800792e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007930:	4b5b      	ldr	r3, [pc, #364]	; (8007aa0 <HW_TS_Init+0x18c>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a5a      	ldr	r2, [pc, #360]	; (8007aa0 <HW_TS_Init+0x18c>)
 8007936:	f043 0320 	orr.w	r3, r3, #32
 800793a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800793c:	4b58      	ldr	r3, [pc, #352]	; (8007aa0 <HW_TS_Init+0x18c>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f1c3 0304 	rsb	r3, r3, #4
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b55      	ldr	r3, [pc, #340]	; (8007aa4 <HW_TS_Init+0x190>)
 8007950:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8007952:	4b53      	ldr	r3, [pc, #332]	; (8007aa0 <HW_TS_Init+0x18c>)
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800795a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800795e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	fa92 f2a2 	rbit	r2, r2
 8007966:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	2a00      	cmp	r2, #0
 8007970:	d101      	bne.n	8007976 <HW_TS_Init+0x62>
  {
    return 32U;
 8007972:	2220      	movs	r2, #32
 8007974:	e003      	b.n	800797e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	fab2 f282 	clz	r2, r2
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	40d3      	lsrs	r3, r2
 8007980:	b2db      	uxtb	r3, r3
 8007982:	3301      	adds	r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	4b48      	ldr	r3, [pc, #288]	; (8007aa8 <HW_TS_Init+0x194>)
 8007988:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800798a:	4b45      	ldr	r3, [pc, #276]	; (8007aa0 <HW_TS_Init+0x18c>)
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007994:	b29b      	uxth	r3, r3
 8007996:	3301      	adds	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	4b44      	ldr	r3, [pc, #272]	; (8007aac <HW_TS_Init+0x198>)
 800799c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800799e:	4b43      	ldr	r3, [pc, #268]	; (8007aac <HW_TS_Init+0x198>)
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	4a40      	ldr	r2, [pc, #256]	; (8007aa8 <HW_TS_Init+0x194>)
 80079a6:	7812      	ldrb	r2, [r2, #0]
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80079b0:	4a3c      	ldr	r2, [pc, #240]	; (8007aa4 <HW_TS_Init+0x190>)
 80079b2:	7812      	ldrb	r2, [r2, #0]
 80079b4:	40d3      	lsrs	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079be:	4293      	cmp	r3, r2
 80079c0:	d904      	bls.n	80079cc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80079c2:	4b3b      	ldr	r3, [pc, #236]	; (8007ab0 <HW_TS_Init+0x19c>)
 80079c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e003      	b.n	80079d4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	4b37      	ldr	r3, [pc, #220]	; (8007ab0 <HW_TS_Init+0x19c>)
 80079d2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80079d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80079d8:	f7ff ff8a 	bl	80078f0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80079dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80079e0:	f7ff ff72 	bl	80078c8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d13d      	bne.n	8007a66 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80079ea:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <HW_TS_Init+0x1a0>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80079f0:	4b31      	ldr	r3, [pc, #196]	; (8007ab8 <HW_TS_Init+0x1a4>)
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80079f8:	2300      	movs	r3, #0
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e00c      	b.n	8007a18 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80079fe:	7ffa      	ldrb	r2, [r7, #31]
 8007a00:	492e      	ldr	r1, [pc, #184]	; (8007abc <HW_TS_Init+0x1a8>)
 8007a02:	4613      	mov	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	440b      	add	r3, r1
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007a12:	7ffb      	ldrb	r3, [r7, #31]
 8007a14:	3301      	adds	r3, #1
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	7ffb      	ldrb	r3, [r7, #31]
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	d9ef      	bls.n	80079fe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8007a1e:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <HW_TS_Init+0x1ac>)
 8007a20:	2206      	movs	r2, #6
 8007a22:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8007a24:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <HW_TS_Init+0x188>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <HW_TS_Init+0x188>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a32:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <HW_TS_Init+0x188>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <HW_TS_Init+0x188>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007a44:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8007a46:	4b1f      	ldr	r3, [pc, #124]	; (8007ac4 <HW_TS_Init+0x1b0>)
 8007a48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007a4c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8007a4e:	2003      	movs	r0, #3
 8007a50:	f000 ffe9 	bl	8008a26 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8007a54:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HW_TS_Init+0x188>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <HW_TS_Init+0x188>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	e009      	b.n	8007a7a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <HW_TS_Init+0x188>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007a74:	2003      	movs	r0, #3
 8007a76:	f000 ffc8 	bl	8008a0a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007a7a:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <HW_TS_Init+0x188>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	22ff      	movs	r2, #255	; 0xff
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8007a82:	2200      	movs	r2, #0
 8007a84:	2103      	movs	r1, #3
 8007a86:	2003      	movs	r0, #3
 8007a88:	f000 ff8b 	bl	80089a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007a8c:	2003      	movs	r0, #3
 8007a8e:	f000 ffa2 	bl	80089d6 <HAL_NVIC_EnableIRQ>

  return;
 8007a92:	bf00      	nop
}
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000c24 	.word	0x20000c24
 8007aa0:	40002800 	.word	0x40002800
 8007aa4:	20000be1 	.word	0x20000be1
 8007aa8:	20000be2 	.word	0x20000be2
 8007aac:	20000be4 	.word	0x20000be4
 8007ab0:	20000be6 	.word	0x20000be6
 8007ab4:	20000be0 	.word	0x20000be0
 8007ab8:	20000bdc 	.word	0x20000bdc
 8007abc:	20000b48 	.word	0x20000b48
 8007ac0:	20000bd8 	.word	0x20000bd8
 8007ac4:	58000800 	.word	0x58000800

08007ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db0b      	blt.n	8007af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	f003 021f 	and.w	r2, r3, #31
 8007ae0:	4907      	ldr	r1, [pc, #28]	; (8007b00 <__NVIC_EnableIRQ+0x38>)
 8007ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2001      	movs	r0, #1
 8007aea:	fa00 f202 	lsl.w	r2, r0, r2
 8007aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	e000e100 	.word	0xe000e100

08007b04 <LL_RCC_LSE_SetDriveCapability>:
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8007b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b14:	f023 0218 	bic.w	r2, r3, #24
 8007b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <LL_AHB2_GRP1_EnableClock>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4013      	ands	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b54:	68fb      	ldr	r3, [r7, #12]
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8007b6a:	b662      	cpsie	i
}
 8007b6c:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b6e:	f000 fd6f 	bl	8008650 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8007b72:	f7ff fd07 	bl	8007584 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b76:	f000 f89f 	bl	8007cb8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007b7a:	f000 f915 	bl	8007da8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8007b7e:	f000 f933 	bl	8007de8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b82:	f000 f9ed 	bl	8007f60 <MX_GPIO_Init>
  MX_RF_Init();
 8007b86:	f000 f943 	bl	8007e10 <MX_RF_Init>
  MX_RTC_Init();
 8007b8a:	f000 f949 	bl	8007e20 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8007b8e:	f000 f971 	bl	8007e74 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8007b92:	f000 f9bd 	bl	8007f10 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  //MOTOR STUFF.
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8007b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOA->MODER &= ~0xff;
 8007ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007bb0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bb4:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x55;
 8007bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007bc0:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8007bc4:	6013      	str	r3, [r2, #0]
  //Run motor in reverse.
  GPIOA->BSRR |= 0x2;
 8007bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	6193      	str	r3, [r2, #24]
  for(int i = 0; i < 200; i++)  {
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
 8007bda:	e018      	b.n	8007c0e <main+0xaa>
	  HAL_Delay(1);
 8007bdc:	2001      	movs	r0, #1
 8007bde:	f7ff fe05 	bl	80077ec <HAL_Delay>
	  GPIOA->BSRR |= 0xd0000;
 8007be2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007bec:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
 8007bf0:	6193      	str	r3, [r2, #24]
	  HAL_Delay(1);
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	f7ff fdfa 	bl	80077ec <HAL_Delay>
	  GPIOA->BSRR |= 0x1;
 8007bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	6193      	str	r3, [r2, #24]
  for(int i = 0; i < 200; i++)  {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2bc7      	cmp	r3, #199	; 0xc7
 8007c12:	dde3      	ble.n	8007bdc <main+0x78>
  }
  //Run motor forwards.
  GPIOA->BSRR |= 0x20000;
 8007c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c22:	6193      	str	r3, [r2, #24]
  for(int i = 0; i < 200; i++) {
 8007c24:	2300      	movs	r3, #0
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	e018      	b.n	8007c5c <main+0xf8>
	  HAL_Delay(1);
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	f7ff fdde 	bl	80077ec <HAL_Delay>
	  GPIOA->BSRR |= 0xd0000;
 8007c30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007c3a:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
 8007c3e:	6193      	str	r3, [r2, #24]
	  HAL_Delay(1);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7ff fdd3 	bl	80077ec <HAL_Delay>
	  GPIOA->BSRR |= 0x1;
 8007c46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6193      	str	r3, [r2, #24]
  for(int i = 0; i < 200; i++) {
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2bc7      	cmp	r3, #199	; 0xc7
 8007c60:	dde3      	ble.n	8007c2a <main+0xc6>
  }

  //Stuff for TIM16.
  RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c70:	6613      	str	r3, [r2, #96]	; 0x60
  TIM16->PSC = 48000-1;
 8007c72:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <main+0x14c>)
 8007c74:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8007c78:	629a      	str	r2, [r3, #40]	; 0x28
  TIM16->ARR = 1000-1;
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <main+0x14c>)
 8007c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007c80:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM16->DIER = TIM_DIER_UIE;
 8007c82:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <main+0x14c>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	60da      	str	r2, [r3, #12]
  TIM16->CR1 |= TIM_CR1_CEN;
 8007c88:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <main+0x14c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <main+0x14c>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	6013      	str	r3, [r2, #0]
  SYSCFG->IMR1 &= ~SYSCFG_IMR1_TIM16IM;
 8007c94:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <main+0x150>)
 8007c96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007c9a:	4a06      	ldr	r2, [pc, #24]	; (8007cb4 <main+0x150>)
 8007c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007ca4:	2019      	movs	r0, #25
 8007ca6:	f7ff ff0f 	bl	8007ac8 <__NVIC_EnableIRQ>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8007caa:	f7ff fc79 	bl	80075a0 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007cae:	e7fe      	b.n	8007cae <main+0x14a>
 8007cb0:	40014400 	.word	0x40014400
 8007cb4:	40010000 	.word	0x40010000

08007cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b09a      	sub	sp, #104	; 0x68
 8007cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007cbe:	f107 0320 	add.w	r3, r7, #32
 8007cc2:	2248      	movs	r2, #72	; 0x48
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f008 f810 	bl	800fcec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ccc:	1d3b      	adds	r3, r7, #4
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	605a      	str	r2, [r3, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
 8007cd6:	60da      	str	r2, [r3, #12]
 8007cd8:	611a      	str	r2, [r3, #16]
 8007cda:	615a      	str	r2, [r3, #20]
 8007cdc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8007cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cec:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8007cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f023 0303 	bic.w	r3, r3, #3
 8007cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007d02:	f001 f9d5 	bl	80090b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007d06:	2000      	movs	r0, #0
 8007d08:	f7ff fefc 	bl	8007b04 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d0c:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <SystemClock_Config+0xec>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d14:	4a23      	ldr	r2, [pc, #140]	; (8007da4 <SystemClock_Config+0xec>)
 8007d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <SystemClock_Config+0xec>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8007d28:	232f      	movs	r3, #47	; 0x2f
 8007d2a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007d32:	2301      	movs	r3, #1
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007d44:	2300      	movs	r3, #0
 8007d46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007d48:	2360      	movs	r3, #96	; 0x60
 8007d4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007d4c:	2305      	movs	r3, #5
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d54:	f107 0320 	add.w	r3, r7, #32
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fd3d 	bl	80097d8 <HAL_RCC_OscConfig>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8007d64:	f000 f944 	bl	8007ff0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8007d68:	236f      	movs	r3, #111	; 0x6f
 8007d6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007d84:	1d3b      	adds	r3, r7, #4
 8007d86:	2101      	movs	r1, #1
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f002 f899 	bl	8009ec0 <HAL_RCC_ClockConfig>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8007d94:	f000 f92c 	bl	8007ff0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8007d98:	f002 fe54 	bl	800aa44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8007d9c:	bf00      	nop
 8007d9e:	3768      	adds	r7, #104	; 0x68
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	58000400 	.word	0x58000400

08007da8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b094      	sub	sp, #80	; 0x50
 8007dac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007dae:	463b      	mov	r3, r7
 8007db0:	2250      	movs	r2, #80	; 0x50
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f007 ff99 	bl	800fcec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8007dba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007dbe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8007dc0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007dc4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dce:	463b      	mov	r3, r7
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f002 fcc1 	bl	800a758 <HAL_RCCEx_PeriphCLKConfig>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8007ddc:	f000 f908 	bl	8007ff0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8007de0:	bf00      	nop
 8007de2:	3750      	adds	r7, #80	; 0x50
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <MX_IPCC_Init+0x20>)
 8007dee:	4a07      	ldr	r2, [pc, #28]	; (8007e0c <MX_IPCC_Init+0x24>)
 8007df0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8007df2:	4805      	ldr	r0, [pc, #20]	; (8007e08 <MX_IPCC_Init+0x20>)
 8007df4:	f000 ffd2 	bl	8008d9c <HAL_IPCC_Init>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8007dfe:	f000 f8f7 	bl	8007ff0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000be8 	.word	0x20000be8
 8007e0c:	58000c00 	.word	0x58000c00

08007e10 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007e24:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e26:	4a12      	ldr	r2, [pc, #72]	; (8007e70 <MX_RTC_Init+0x50>)
 8007e28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e32:	220f      	movs	r2, #15
 8007e34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8007e36:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007e4a:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007e56:	4805      	ldr	r0, [pc, #20]	; (8007e6c <MX_RTC_Init+0x4c>)
 8007e58:	f002 ff0c 	bl	800ac74 <HAL_RTC_Init>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8007e62:	f000 f8c5 	bl	8007ff0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007e66:	bf00      	nop
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000c24 	.word	0x20000c24
 8007e70:	40002800 	.word	0x40002800

08007e74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007e78:	4b23      	ldr	r3, [pc, #140]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007e7a:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <MX_USART1_UART_Init+0x98>)
 8007e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e7e:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8007e86:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e94:	4b1c      	ldr	r3, [pc, #112]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007e9c:	220c      	movs	r2, #12
 8007e9e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ea0:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ea6:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007eac:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007eb8:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007ebe:	4812      	ldr	r0, [pc, #72]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007ec0:	f002 fff8 	bl	800aeb4 <HAL_UART_Init>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8007eca:	f000 f891 	bl	8007ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ece:	2100      	movs	r1, #0
 8007ed0:	480d      	ldr	r0, [pc, #52]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007ed2:	f003 fc58 	bl	800b786 <HAL_UARTEx_SetTxFifoThreshold>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8007edc:	f000 f888 	bl	8007ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4809      	ldr	r0, [pc, #36]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007ee4:	f003 fc8d 	bl	800b802 <HAL_UARTEx_SetRxFifoThreshold>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8007eee:	f000 f87f 	bl	8007ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007ef2:	4805      	ldr	r0, [pc, #20]	; (8007f08 <MX_USART1_UART_Init+0x94>)
 8007ef4:	f003 fc0e 	bl	800b714 <HAL_UARTEx_DisableFifoMode>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8007efe:	f000 f877 	bl	8007ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f02:	bf00      	nop
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000c48 	.word	0x20000c48
 8007f0c:	40013800 	.word	0x40013800

08007f10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007f14:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f16:	4a11      	ldr	r2, [pc, #68]	; (8007f5c <MX_USB_PCD_Init+0x4c>)
 8007f18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f1a:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f22:	2202      	movs	r2, #2
 8007f24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f28:	2202      	movs	r2, #2
 8007f2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f38:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f44:	4804      	ldr	r0, [pc, #16]	; (8007f58 <MX_USB_PCD_Init+0x48>)
 8007f46:	f000 ffaf 	bl	8008ea8 <HAL_PCD_Init>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8007f50:	f000 f84e 	bl	8007ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007f54:	bf00      	nop
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000cdc 	.word	0x20000cdc
 8007f5c:	40006800 	.word	0x40006800

08007f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f66:	1d3b      	adds	r3, r7, #4
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f74:	2004      	movs	r0, #4
 8007f76:	f7ff fddb 	bl	8007b30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f7a:	2002      	movs	r0, #2
 8007f7c:	f7ff fdd8 	bl	8007b30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7ff fdd5 	bl	8007b30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f86:	2008      	movs	r0, #8
 8007f88:	f7ff fdd2 	bl	8007b30 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2123      	movs	r1, #35	; 0x23
 8007f90:	4814      	ldr	r0, [pc, #80]	; (8007fe4 <MX_GPIO_Init+0x84>)
 8007f92:	f000 fec7 	bl	8008d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007f96:	2310      	movs	r3, #16
 8007f98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007fa2:	1d3b      	adds	r3, r7, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4810      	ldr	r0, [pc, #64]	; (8007fe8 <MX_GPIO_Init+0x88>)
 8007fa8:	f000 fd4c 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8007fac:	2323      	movs	r3, #35	; 0x23
 8007fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4808      	ldr	r0, [pc, #32]	; (8007fe4 <MX_GPIO_Init+0x84>)
 8007fc2:	f000 fd3f 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fd2:	1d3b      	adds	r3, r7, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4805      	ldr	r0, [pc, #20]	; (8007fec <MX_GPIO_Init+0x8c>)
 8007fd8:	f000 fd34 	bl	8008a44 <HAL_GPIO_Init>

}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	48000400 	.word	0x48000400
 8007fe8:	48000800 	.word	0x48000800
 8007fec:	48000c00 	.word	0x48000c00

08007ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007ff4:	b672      	cpsid	i
}
 8007ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ff8:	e7fe      	b.n	8007ff8 <Error_Handler+0x8>

08007ffa <LL_RCC_EnableRTC>:
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8007ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800800a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008012:	bf00      	nop
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_AHB2_GRP1_EnableClock>:
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800802a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4313      	orrs	r3, r2
 8008032:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008040:	68fb      	ldr	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <LL_AHB3_GRP1_EnableClock>:
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800805c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4313      	orrs	r3, r2
 8008064:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800806a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4013      	ands	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008072:	68fb      	ldr	r3, [r7, #12]
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800808e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4313      	orrs	r3, r2
 8008096:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800809c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4013      	ands	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80080a4:	68fb      	ldr	r3, [r7, #12]
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80080ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80080ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4013      	ands	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	bf00      	nop
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80080e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80080ec:	f7ff ffaf 	bl	800804e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	202e      	movs	r0, #46	; 0x2e
 80080f6:	f000 fc54 	bl	80089a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80080fa:	202e      	movs	r0, #46	; 0x2e
 80080fc:	f000 fc6b 	bl	80089d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008100:	bf00      	nop
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a05      	ldr	r2, [pc, #20]	; (8008128 <HAL_IPCC_MspInit+0x24>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d103      	bne.n	800811e <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8008116:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800811a:	f7ff ff98 	bl	800804e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	58000c00 	.word	0x58000c00

0800812c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b096      	sub	sp, #88	; 0x58
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008134:	f107 0308 	add.w	r3, r7, #8
 8008138:	2250      	movs	r2, #80	; 0x50
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f007 fdd5 	bl	800fcec <memset>
  if(hrtc->Instance==RTC)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <HAL_RTC_MspInit+0x54>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d115      	bne.n	8008178 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800814c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008150:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008156:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	4618      	mov	r0, r3
 800815e:	f002 fafb 	bl	800a758 <HAL_RCCEx_PeriphCLKConfig>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8008168:	f7ff ff42 	bl	8007ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800816c:	f7ff ff45 	bl	8007ffa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008170:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008174:	f7ff ff84 	bl	8008080 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008178:	bf00      	nop
 800817a:	3758      	adds	r7, #88	; 0x58
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40002800 	.word	0x40002800

08008184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b09c      	sub	sp, #112	; 0x70
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800819c:	f107 030c 	add.w	r3, r7, #12
 80081a0:	2250      	movs	r2, #80	; 0x50
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f007 fda1 	bl	800fcec <memset>
  if(huart->Instance==USART1)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a16      	ldr	r2, [pc, #88]	; (8008208 <HAL_UART_MspInit+0x84>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d124      	bne.n	80081fe <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80081b4:	2301      	movs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80081b8:	2300      	movs	r3, #0
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 fac9 	bl	800a758 <HAL_RCCEx_PeriphCLKConfig>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80081cc:	f7ff ff10 	bl	8007ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80081d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80081d4:	f7ff ff6d 	bl	80080b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d8:	2002      	movs	r0, #2
 80081da:	f7ff ff1f 	bl	800801c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80081de:	23c0      	movs	r3, #192	; 0xc0
 80081e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e2:	2302      	movs	r3, #2
 80081e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081e6:	2301      	movs	r3, #1
 80081e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ea:	2300      	movs	r3, #0
 80081ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80081ee:	2307      	movs	r3, #7
 80081f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80081f6:	4619      	mov	r1, r3
 80081f8:	4804      	ldr	r0, [pc, #16]	; (800820c <HAL_UART_MspInit+0x88>)
 80081fa:	f000 fc23 	bl	8008a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80081fe:	bf00      	nop
 8008200:	3770      	adds	r7, #112	; 0x70
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40013800 	.word	0x40013800
 800820c:	48000400 	.word	0x48000400

08008210 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b09c      	sub	sp, #112	; 0x70
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	605a      	str	r2, [r3, #4]
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008228:	f107 030c 	add.w	r3, r7, #12
 800822c:	2250      	movs	r2, #80	; 0x50
 800822e:	2100      	movs	r1, #0
 8008230:	4618      	mov	r0, r3
 8008232:	f007 fd5b 	bl	800fcec <memset>
  if(hpcd->Instance==USB)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_PCD_MspInit+0xa8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d136      	bne.n	80082ae <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008244:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008246:	2318      	movs	r3, #24
 8008248:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800824a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800824e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008254:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008256:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800825a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800825c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008260:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008262:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008268:	f107 030c 	add.w	r3, r7, #12
 800826c:	4618      	mov	r0, r3
 800826e:	f002 fa73 	bl	800a758 <HAL_RCCEx_PeriphCLKConfig>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008278:	f7ff feba 	bl	8007ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800827c:	2001      	movs	r0, #1
 800827e:	f7ff fecd 	bl	800801c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008282:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008286:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008288:	2302      	movs	r3, #2
 800828a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008290:	2300      	movs	r3, #0
 8008292:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008294:	230a      	movs	r3, #10
 8008296:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008298:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800829c:	4619      	mov	r1, r3
 800829e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082a2:	f000 fbcf 	bl	8008a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80082aa:	f7ff fee9 	bl	8008080 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80082ae:	bf00      	nop
 80082b0:	3770      	adds	r7, #112	; 0x70
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40006800 	.word	0x40006800

080082bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082c0:	e7fe      	b.n	80082c0 <NMI_Handler+0x4>

080082c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082c2:	b480      	push	{r7}
 80082c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082c6:	e7fe      	b.n	80082c6 <HardFault_Handler+0x4>

080082c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082cc:	e7fe      	b.n	80082cc <MemManage_Handler+0x4>

080082ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082ce:	b480      	push	{r7}
 80082d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082d2:	e7fe      	b.n	80082d2 <BusFault_Handler+0x4>

080082d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082d8:	e7fe      	b.n	80082d8 <UsageFault_Handler+0x4>

080082da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082da:	b480      	push	{r7}
 80082dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082de:	bf00      	nop
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082ec:	bf00      	nop
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082f6:	b480      	push	{r7}
 80082f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082fa:	bf00      	nop
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008308:	f000 f9fc 	bl	8008704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800830c:	bf00      	nop
 800830e:	bd80      	pop	{r7, pc}

08008310 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8008314:	f000 fd1e 	bl	8008d54 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8008318:	bf00      	nop
 800831a:	bd80      	pop	{r7, pc}

0800831c <TIM1_UP_TIM16_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
	TIM16->SR &= ~TIM_SR_UIF;
 8008322:	4b19      	ldr	r3, [pc, #100]	; (8008388 <TIM1_UP_TIM16_IRQHandler+0x6c>)
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	4a18      	ldr	r2, [pc, #96]	; (8008388 <TIM1_UP_TIM16_IRQHandler+0x6c>)
 8008328:	f023 0301 	bic.w	r3, r3, #1
 800832c:	6113      	str	r3, [r2, #16]
	GPIOA->BSRR |= 0x20000;
 800832e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800833c:	6193      	str	r3, [r2, #24]
	for(int i = 0; i < 200; i++) {
 800833e:	2300      	movs	r3, #0
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	e018      	b.n	8008376 <TIM1_UP_TIM16_IRQHandler+0x5a>
		HAL_Delay(1);
 8008344:	2001      	movs	r0, #1
 8008346:	f7ff fa51 	bl	80077ec <HAL_Delay>
		GPIOA->BSRR |= 0xd0000;
 800834a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008354:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
 8008358:	6193      	str	r3, [r2, #24]
		HAL_Delay(1);
 800835a:	2001      	movs	r0, #1
 800835c:	f7ff fa46 	bl	80077ec <HAL_Delay>
		GPIOA->BSRR |= 0x1;
 8008360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	6193      	str	r3, [r2, #24]
	for(int i = 0; i < 200; i++) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3301      	adds	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2bc7      	cmp	r3, #199	; 0xc7
 800837a:	dde3      	ble.n	8008344 <TIM1_UP_TIM16_IRQHandler+0x28>
	}
	//TIM16->SR &= ~TIM_SR_UIF;
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40014400 	.word	0x40014400

0800838c <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 800838c:	b40c      	push	{r2, r3}
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	4603      	mov	r3, r0
 8008396:	460a      	mov	r2, r1
 8008398:	71fb      	strb	r3, [r7, #7]
 800839a:	4613      	mov	r3, r2
 800839c:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	b002      	add	sp, #8
 80083aa:	4770      	bx	lr

080083ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  return 1;
 80083b0:	2301      	movs	r3, #1
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <_kill>:

int _kill(int pid, int sig)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80083c6:	f007 fc37 	bl	800fc38 <__errno>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2216      	movs	r2, #22
 80083ce:	601a      	str	r2, [r3, #0]
  return -1;
 80083d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <_exit>:

void _exit (int status)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80083e4:	f04f 31ff 	mov.w	r1, #4294967295
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ffe7 	bl	80083bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80083ee:	e7fe      	b.n	80083ee <_exit+0x12>

080083f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e00a      	b.n	8008418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008402:	f3af 8000 	nop.w
 8008406:	4601      	mov	r1, r0
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	60ba      	str	r2, [r7, #8]
 800840e:	b2ca      	uxtb	r2, r1
 8008410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	3301      	adds	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	dbf0      	blt.n	8008402 <_read+0x12>
  }

  return len;
 8008420:	687b      	ldr	r3, [r7, #4]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	e009      	b.n	8008450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	60ba      	str	r2, [r7, #8]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	3301      	adds	r3, #1
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	dbf1      	blt.n	800843c <_write+0x12>
  }
  return len;
 8008458:	687b      	ldr	r3, [r7, #4]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <_close>:

int _close(int file)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800846a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800848a:	605a      	str	r2, [r3, #4]
  return 0;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <_isatty>:

int _isatty(int file)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80084a2:	2301      	movs	r3, #1
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
	...

080084cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80084d4:	4a14      	ldr	r2, [pc, #80]	; (8008528 <_sbrk+0x5c>)
 80084d6:	4b15      	ldr	r3, [pc, #84]	; (800852c <_sbrk+0x60>)
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80084e0:	4b13      	ldr	r3, [pc, #76]	; (8008530 <_sbrk+0x64>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80084e8:	4b11      	ldr	r3, [pc, #68]	; (8008530 <_sbrk+0x64>)
 80084ea:	4a12      	ldr	r2, [pc, #72]	; (8008534 <_sbrk+0x68>)
 80084ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80084ee:	4b10      	ldr	r3, [pc, #64]	; (8008530 <_sbrk+0x64>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4413      	add	r3, r2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d207      	bcs.n	800850c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80084fc:	f007 fb9c 	bl	800fc38 <__errno>
 8008500:	4603      	mov	r3, r0
 8008502:	220c      	movs	r2, #12
 8008504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008506:	f04f 33ff 	mov.w	r3, #4294967295
 800850a:	e009      	b.n	8008520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <_sbrk+0x64>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <_sbrk+0x64>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4413      	add	r3, r2
 800851a:	4a05      	ldr	r2, [pc, #20]	; (8008530 <_sbrk+0x64>)
 800851c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800851e:	68fb      	ldr	r3, [r7, #12]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20030000 	.word	0x20030000
 800852c:	00000400 	.word	0x00000400
 8008530:	20000fd0 	.word	0x20000fd0
 8008534:	20001398 	.word	0x20001398

08008538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800853c:	4b24      	ldr	r3, [pc, #144]	; (80085d0 <SystemInit+0x98>)
 800853e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008542:	4a23      	ldr	r2, [pc, #140]	; (80085d0 <SystemInit+0x98>)
 8008544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800854c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800855c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008560:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8008564:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8008566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008570:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <SystemInit+0x9c>)
 8008572:	4013      	ands	r3, r2
 8008574:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8008576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800857e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008582:	f023 0305 	bic.w	r3, r3, #5
 8008586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800858a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800859e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a2:	4a0d      	ldr	r2, [pc, #52]	; (80085d8 <SystemInit+0xa0>)
 80085a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80085a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085aa:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <SystemInit+0xa0>)
 80085ac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80085be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c2:	2200      	movs	r2, #0
 80085c4:	619a      	str	r2, [r3, #24]
}
 80085c6:	bf00      	nop
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	e000ed00 	.word	0xe000ed00
 80085d4:	faf6fefb 	.word	0xfaf6fefb
 80085d8:	22041000 	.word	0x22041000

080085dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80085dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085e0:	3304      	adds	r3, #4

080085e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80085e6:	d3f9      	bcc.n	80085dc <CopyDataInit>
  bx lr
 80085e8:	4770      	bx	lr

080085ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80085ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80085ec:	3004      	adds	r0, #4

080085ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80085ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80085f0:	d3fb      	bcc.n	80085ea <FillZerobss>
  bx lr
 80085f2:	4770      	bx	lr

080085f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80085f4:	480c      	ldr	r0, [pc, #48]	; (8008628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80085f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80085f8:	f7ff ff9e 	bl	8008538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80085fc:	480b      	ldr	r0, [pc, #44]	; (800862c <LoopForever+0x6>)
 80085fe:	490c      	ldr	r1, [pc, #48]	; (8008630 <LoopForever+0xa>)
 8008600:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <LoopForever+0xe>)
 8008602:	2300      	movs	r3, #0
 8008604:	f7ff ffed 	bl	80085e2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008608:	480b      	ldr	r0, [pc, #44]	; (8008638 <LoopForever+0x12>)
 800860a:	490c      	ldr	r1, [pc, #48]	; (800863c <LoopForever+0x16>)
 800860c:	4a0c      	ldr	r2, [pc, #48]	; (8008640 <LoopForever+0x1a>)
 800860e:	2300      	movs	r3, #0
 8008610:	f7ff ffe7 	bl	80085e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8008614:	480b      	ldr	r0, [pc, #44]	; (8008644 <LoopForever+0x1e>)
 8008616:	490c      	ldr	r1, [pc, #48]	; (8008648 <LoopForever+0x22>)
 8008618:	2300      	movs	r3, #0
 800861a:	f7ff ffe8 	bl	80085ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800861e:	f007 fb23 	bl	800fc68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008622:	f7ff fa9f 	bl	8007b64 <main>

08008626 <LoopForever>:

LoopForever:
  b LoopForever
 8008626:	e7fe      	b.n	8008626 <LoopForever>
  ldr   r0, =_estack
 8008628:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800862c:	20000008 	.word	0x20000008
 8008630:	200000a0 	.word	0x200000a0
 8008634:	080119fc 	.word	0x080119fc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008638:	200300e4 	.word	0x200300e4
 800863c:	200300e4 	.word	0x200300e4
 8008640:	0801251b 	.word	0x0801251b
  INIT_BSS _sbss, _ebss
 8008644:	20000b2c 	.word	0x20000b2c
 8008648:	20001398 	.word	0x20001398

0800864c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800864c:	e7fe      	b.n	800864c <ADC1_IRQHandler>
	...

08008650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800865a:	4b0c      	ldr	r3, [pc, #48]	; (800868c <HAL_Init+0x3c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a0b      	ldr	r2, [pc, #44]	; (800868c <HAL_Init+0x3c>)
 8008660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008664:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008666:	2003      	movs	r0, #3
 8008668:	f000 f990 	bl	800898c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800866c:	2000      	movs	r0, #0
 800866e:	f000 f80f 	bl	8008690 <HAL_InitTick>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	71fb      	strb	r3, [r7, #7]
 800867c:	e001      	b.n	8008682 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800867e:	f7ff fd31 	bl	80080e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008682:	79fb      	ldrb	r3, [r7, #7]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	58004000 	.word	0x58004000

08008690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <HAL_InitTick+0x6c>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d024      	beq.n	80086ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80086a4:	f001 fdb8 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 80086a8:	4602      	mov	r2, r0
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <HAL_InitTick+0x6c>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f998 	bl	80089f2 <HAL_SYSTICK_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10f      	bne.n	80086e8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d809      	bhi.n	80086e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086ce:	2200      	movs	r2, #0
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	f000 f964 	bl	80089a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80086da:	4a09      	ldr	r2, [pc, #36]	; (8008700 <HAL_InitTick+0x70>)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e007      	b.n	80086f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	73fb      	strb	r3, [r7, #15]
 80086e6:	e004      	b.n	80086f2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]
 80086ec:	e001      	b.n	80086f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000010 	.word	0x20000010
 8008700:	2000000c 	.word	0x2000000c

08008704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <HAL_IncTick+0x20>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <HAL_IncTick+0x24>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4413      	add	r3, r2
 8008714:	4a04      	ldr	r2, [pc, #16]	; (8008728 <HAL_IncTick+0x24>)
 8008716:	6013      	str	r3, [r2, #0]
}
 8008718:	bf00      	nop
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000010 	.word	0x20000010
 8008728:	20000fd4 	.word	0x20000fd4

0800872c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
  return uwTick;
 8008730:	4b03      	ldr	r3, [pc, #12]	; (8008740 <HAL_GetTick+0x14>)
 8008732:	681b      	ldr	r3, [r3, #0]
}
 8008734:	4618      	mov	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000fd4 	.word	0x20000fd4

08008744 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008748:	4b03      	ldr	r3, [pc, #12]	; (8008758 <HAL_GetTickPrio+0x14>)
 800874a:	681b      	ldr	r3, [r3, #0]
}
 800874c:	4618      	mov	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	2000000c 	.word	0x2000000c

0800875c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8008760:	4b03      	ldr	r3, [pc, #12]	; (8008770 <HAL_GetTickFreq+0x14>)
 8008762:	781b      	ldrb	r3, [r3, #0]
}
 8008764:	4618      	mov	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20000010 	.word	0x20000010

08008774 <__NVIC_SetPriorityGrouping>:
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <__NVIC_SetPriorityGrouping+0x44>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008790:	4013      	ands	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800879c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087a6:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <__NVIC_SetPriorityGrouping+0x44>)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	60d3      	str	r3, [r2, #12]
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	e000ed00 	.word	0xe000ed00

080087bc <__NVIC_GetPriorityGrouping>:
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087c0:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <__NVIC_GetPriorityGrouping+0x18>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	0a1b      	lsrs	r3, r3, #8
 80087c6:	f003 0307 	and.w	r3, r3, #7
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	e000ed00 	.word	0xe000ed00

080087d8 <__NVIC_EnableIRQ>:
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	db0b      	blt.n	8008802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	f003 021f 	and.w	r2, r3, #31
 80087f0:	4907      	ldr	r1, [pc, #28]	; (8008810 <__NVIC_EnableIRQ+0x38>)
 80087f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f6:	095b      	lsrs	r3, r3, #5
 80087f8:	2001      	movs	r0, #1
 80087fa:	fa00 f202 	lsl.w	r2, r0, r2
 80087fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	e000e100 	.word	0xe000e100

08008814 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800881e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	db0c      	blt.n	8008840 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	f003 021f 	and.w	r2, r3, #31
 800882c:	4907      	ldr	r1, [pc, #28]	; (800884c <__NVIC_SetPendingIRQ+0x38>)
 800882e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	2001      	movs	r0, #1
 8008836:	fa00 f202 	lsl.w	r2, r0, r2
 800883a:	3340      	adds	r3, #64	; 0x40
 800883c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	e000e100 	.word	0xe000e100

08008850 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800885a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800885e:	2b00      	cmp	r3, #0
 8008860:	db0c      	blt.n	800887c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	f003 021f 	and.w	r2, r3, #31
 8008868:	4907      	ldr	r1, [pc, #28]	; (8008888 <__NVIC_ClearPendingIRQ+0x38>)
 800886a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	2001      	movs	r0, #1
 8008872:	fa00 f202 	lsl.w	r2, r0, r2
 8008876:	3360      	adds	r3, #96	; 0x60
 8008878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	e000e100 	.word	0xe000e100

0800888c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800889c:	2b00      	cmp	r3, #0
 800889e:	db0a      	blt.n	80088b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	490c      	ldr	r1, [pc, #48]	; (80088d8 <__NVIC_SetPriority+0x4c>)
 80088a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088aa:	0112      	lsls	r2, r2, #4
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	440b      	add	r3, r1
 80088b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088b4:	e00a      	b.n	80088cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	4908      	ldr	r1, [pc, #32]	; (80088dc <__NVIC_SetPriority+0x50>)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	3b04      	subs	r3, #4
 80088c4:	0112      	lsls	r2, r2, #4
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	440b      	add	r3, r1
 80088ca:	761a      	strb	r2, [r3, #24]
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	e000e100 	.word	0xe000e100
 80088dc:	e000ed00 	.word	0xe000ed00

080088e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b089      	sub	sp, #36	; 0x24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f1c3 0307 	rsb	r3, r3, #7
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	bf28      	it	cs
 80088fe:	2304      	movcs	r3, #4
 8008900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	3304      	adds	r3, #4
 8008906:	2b06      	cmp	r3, #6
 8008908:	d902      	bls.n	8008910 <NVIC_EncodePriority+0x30>
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	3b03      	subs	r3, #3
 800890e:	e000      	b.n	8008912 <NVIC_EncodePriority+0x32>
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	fa02 f303 	lsl.w	r3, r2, r3
 800891e:	43da      	mvns	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	401a      	ands	r2, r3
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008928:	f04f 31ff 	mov.w	r1, #4294967295
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	fa01 f303 	lsl.w	r3, r1, r3
 8008932:	43d9      	mvns	r1, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008938:	4313      	orrs	r3, r2
         );
}
 800893a:	4618      	mov	r0, r3
 800893c:	3724      	adds	r7, #36	; 0x24
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3b01      	subs	r3, #1
 8008954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008958:	d301      	bcc.n	800895e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800895a:	2301      	movs	r3, #1
 800895c:	e00f      	b.n	800897e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800895e:	4a0a      	ldr	r2, [pc, #40]	; (8008988 <SysTick_Config+0x40>)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3b01      	subs	r3, #1
 8008964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008966:	210f      	movs	r1, #15
 8008968:	f04f 30ff 	mov.w	r0, #4294967295
 800896c:	f7ff ff8e 	bl	800888c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <SysTick_Config+0x40>)
 8008972:	2200      	movs	r2, #0
 8008974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008976:	4b04      	ldr	r3, [pc, #16]	; (8008988 <SysTick_Config+0x40>)
 8008978:	2207      	movs	r2, #7
 800897a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	e000e010 	.word	0xe000e010

0800898c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff feed 	bl	8008774 <__NVIC_SetPriorityGrouping>
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	4603      	mov	r3, r0
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80089b0:	f7ff ff04 	bl	80087bc <__NVIC_GetPriorityGrouping>
 80089b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	6978      	ldr	r0, [r7, #20]
 80089bc:	f7ff ff90 	bl	80088e0 <NVIC_EncodePriority>
 80089c0:	4602      	mov	r2, r0
 80089c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c6:	4611      	mov	r1, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff ff5f 	bl	800888c <__NVIC_SetPriority>
}
 80089ce:	bf00      	nop
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	4603      	mov	r3, r0
 80089de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff fef7 	bl	80087d8 <__NVIC_EnableIRQ>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff ffa4 	bl	8008948 <SysTick_Config>
 8008a00:	4603      	mov	r3, r0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	4603      	mov	r3, r0
 8008a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff fefb 	bl	8008814 <__NVIC_SetPendingIRQ>
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff ff0b 	bl	8008850 <__NVIC_ClearPendingIRQ>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a52:	e14c      	b.n	8008cee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	2101      	movs	r1, #1
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a60:	4013      	ands	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 813e 	beq.w	8008ce8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d005      	beq.n	8008a84 <HAL_GPIO_Init+0x40>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f003 0303 	and.w	r3, r3, #3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d130      	bne.n	8008ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	2203      	movs	r2, #3
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	43db      	mvns	r3, r3
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008aba:	2201      	movs	r2, #1
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	43db      	mvns	r3, r3
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	091b      	lsrs	r3, r3, #4
 8008ad0:	f003 0201 	and.w	r2, r3, #1
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d017      	beq.n	8008b22 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	2203      	movs	r2, #3
 8008afe:	fa02 f303 	lsl.w	r3, r2, r3
 8008b02:	43db      	mvns	r3, r3
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4013      	ands	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	fa02 f303 	lsl.w	r3, r2, r3
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d123      	bne.n	8008b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	08da      	lsrs	r2, r3, #3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3208      	adds	r2, #8
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	220f      	movs	r2, #15
 8008b46:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4a:	43db      	mvns	r3, r3
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	691a      	ldr	r2, [r3, #16]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	08da      	lsrs	r2, r3, #3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3208      	adds	r2, #8
 8008b70:	6939      	ldr	r1, [r7, #16]
 8008b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	2203      	movs	r2, #3
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	43db      	mvns	r3, r3
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f003 0203 	and.w	r2, r3, #3
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 8098 	beq.w	8008ce8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008bb8:	4a54      	ldr	r2, [pc, #336]	; (8008d0c <HAL_GPIO_Init+0x2c8>)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	089b      	lsrs	r3, r3, #2
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	220f      	movs	r2, #15
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008be2:	d019      	beq.n	8008c18 <HAL_GPIO_Init+0x1d4>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a4a      	ldr	r2, [pc, #296]	; (8008d10 <HAL_GPIO_Init+0x2cc>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d013      	beq.n	8008c14 <HAL_GPIO_Init+0x1d0>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a49      	ldr	r2, [pc, #292]	; (8008d14 <HAL_GPIO_Init+0x2d0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00d      	beq.n	8008c10 <HAL_GPIO_Init+0x1cc>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a48      	ldr	r2, [pc, #288]	; (8008d18 <HAL_GPIO_Init+0x2d4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <HAL_GPIO_Init+0x1c8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a47      	ldr	r2, [pc, #284]	; (8008d1c <HAL_GPIO_Init+0x2d8>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d101      	bne.n	8008c08 <HAL_GPIO_Init+0x1c4>
 8008c04:	2304      	movs	r3, #4
 8008c06:	e008      	b.n	8008c1a <HAL_GPIO_Init+0x1d6>
 8008c08:	2307      	movs	r3, #7
 8008c0a:	e006      	b.n	8008c1a <HAL_GPIO_Init+0x1d6>
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e004      	b.n	8008c1a <HAL_GPIO_Init+0x1d6>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e002      	b.n	8008c1a <HAL_GPIO_Init+0x1d6>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <HAL_GPIO_Init+0x1d6>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	f002 0203 	and.w	r2, r2, #3
 8008c20:	0092      	lsls	r2, r2, #2
 8008c22:	4093      	lsls	r3, r2
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008c2a:	4938      	ldr	r1, [pc, #224]	; (8008d0c <HAL_GPIO_Init+0x2c8>)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	089b      	lsrs	r3, r3, #2
 8008c30:	3302      	adds	r3, #2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c38:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4013      	ands	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008c5c:	4a30      	ldr	r2, [pc, #192]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008c86:	4a26      	ldr	r2, [pc, #152]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008c8c:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	43db      	mvns	r3, r3
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008cb2:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008cba:	4b19      	ldr	r3, [pc, #100]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ce0:	4a0f      	ldr	r2, [pc, #60]	; (8008d20 <HAL_GPIO_Init+0x2dc>)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	3301      	adds	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f47f aeab 	bne.w	8008a54 <HAL_GPIO_Init+0x10>
  }
}
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	40010000 	.word	0x40010000
 8008d10:	48000400 	.word	0x48000400
 8008d14:	48000800 	.word	0x48000800
 8008d18:	48000c00 	.word	0x48000c00
 8008d1c:	48001000 	.word	0x48001000
 8008d20:	58000800 	.word	0x58000800

08008d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	807b      	strh	r3, [r7, #2]
 8008d30:	4613      	mov	r3, r2
 8008d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d34:	787b      	ldrb	r3, [r7, #1]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d3a:	887a      	ldrh	r2, [r7, #2]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d40:	e002      	b.n	8008d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008d42:	887a      	ldrh	r2, [r7, #2]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008d5a:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <HAL_HSEM_IRQHandler+0x30>)
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008d60:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <HAL_HSEM_IRQHandler+0x30>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	43db      	mvns	r3, r3
 8008d68:	4906      	ldr	r1, [pc, #24]	; (8008d84 <HAL_HSEM_IRQHandler+0x30>)
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008d6e:	4a05      	ldr	r2, [pc, #20]	; (8008d84 <HAL_HSEM_IRQHandler+0x30>)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f807 	bl	8008d88 <HAL_HSEM_FreeCallback>
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	58001500 	.word	0x58001500

08008d88 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01e      	beq.n	8008dec <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <HAL_IPCC_Init+0x60>)
 8008db0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff f9a0 	bl	8008104 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f000 f85b 	bl	8008e80 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f82c 	bl	8008e34 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008dea:	e001      	b.n	8008df0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	58000c00 	.word	0x58000c00

08008e00 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008e0e:	bf00      	nop
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	4613      	mov	r3, r2
 8008e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e00f      	b.n	8008e62 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	4a0b      	ldr	r2, [pc, #44]	; (8008e78 <IPCC_SetDefaultCallbacks+0x44>)
 8008e4c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3306      	adds	r3, #6
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	4a08      	ldr	r2, [pc, #32]	; (8008e7c <IPCC_SetDefaultCallbacks+0x48>)
 8008e5a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b05      	cmp	r3, #5
 8008e66:	d9ec      	bls.n	8008e42 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	08008e01 	.word	0x08008e01
 8008e7c:	08008e1b 	.word	0x08008e1b

08008e80 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8008e94:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	223f      	movs	r2, #63	; 0x3f
 8008e9a:	609a      	str	r2, [r3, #8]
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eaa:	b08b      	sub	sp, #44	; 0x2c
 8008eac:	af06      	add	r7, sp, #24
 8008eae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e0cb      	b.n	8009052 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff f99e 	bl	8008210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 fd1b 	bl	800b91c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
 8008eea:	e040      	b.n	8008f6e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	440b      	add	r3, r1
 8008efc:	3301      	adds	r3, #1
 8008efe:	2201      	movs	r2, #1
 8008f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	440b      	add	r3, r1
 8008f12:	7bfa      	ldrb	r2, [r7, #15]
 8008f14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	440b      	add	r3, r1
 8008f26:	3303      	adds	r3, #3
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008f2c:	7bfa      	ldrb	r2, [r7, #15]
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	440b      	add	r3, r1
 8008f3a:	3338      	adds	r3, #56	; 0x38
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008f40:	7bfa      	ldrb	r2, [r7, #15]
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	440b      	add	r3, r1
 8008f4e:	333c      	adds	r3, #60	; 0x3c
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f54:	7bfa      	ldrb	r2, [r7, #15]
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	440b      	add	r3, r1
 8008f62:	3340      	adds	r3, #64	; 0x40
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	73fb      	strb	r3, [r7, #15]
 8008f6e:	7bfa      	ldrb	r2, [r7, #15]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d3b9      	bcc.n	8008eec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
 8008f7c:	e044      	b.n	8009008 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f7e:	7bfa      	ldrb	r2, [r7, #15]
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	440b      	add	r3, r1
 8008f8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f94:	7bfa      	ldrb	r2, [r7, #15]
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	440b      	add	r3, r1
 8008fa2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008fa6:	7bfa      	ldrb	r2, [r7, #15]
 8008fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008faa:	7bfa      	ldrb	r2, [r7, #15]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	440b      	add	r3, r1
 8008fb8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008fc0:	7bfa      	ldrb	r2, [r7, #15]
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	440b      	add	r3, r1
 8008fce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008fd6:	7bfa      	ldrb	r2, [r7, #15]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008fec:	7bfa      	ldrb	r2, [r7, #15]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	3301      	adds	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]
 8009008:	7bfa      	ldrb	r2, [r7, #15]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	d3b5      	bcc.n	8008f7e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	687e      	ldr	r6, [r7, #4]
 800901a:	466d      	mov	r5, sp
 800901c:	f106 0410 	add.w	r4, r6, #16
 8009020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	1d33      	adds	r3, r6, #4
 800902a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800902c:	6838      	ldr	r0, [r7, #0]
 800902e:	f002 fc90 	bl	800b952 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d102      	bne.n	8009050 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f805 	bl	800905a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800905a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800907e:	b29b      	uxth	r3, r3
 8009080:	f043 0301 	orr.w	r3, r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009092:	b29b      	uxth	r3, r3
 8009094:	f043 0302 	orr.w	r3, r3, #2
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a04      	ldr	r2, [pc, #16]	; (80090cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090be:	6013      	str	r3, [r2, #0]
}
 80090c0:	bf00      	nop
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	58000400 	.word	0x58000400

080090d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80090d4:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80090dc:	4618      	mov	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	58000400 	.word	0x58000400

080090ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80090f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090fe:	d101      	bne.n	8009104 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009100:	2301      	movs	r3, #1
 8009102:	e000      	b.n	8009106 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <LL_RCC_HSE_Enable>:
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800911e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009122:	6013      	str	r3, [r2, #0]
}
 8009124:	bf00      	nop
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <LL_RCC_HSE_Disable>:
{
 800912e:	b480      	push	{r7}
 8009130:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800913c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009140:	6013      	str	r3, [r2, #0]
}
 8009142:	bf00      	nop
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <LL_RCC_HSE_IsReady>:
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800915e:	d101      	bne.n	8009164 <LL_RCC_HSE_IsReady+0x18>
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <LL_RCC_HSE_IsReady+0x1a>
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <LL_RCC_HSI_Enable>:
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800917e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009182:	6013      	str	r3, [r2, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <LL_RCC_HSI_Disable>:
{
 800918e:	b480      	push	{r7}
 8009190:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8009192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800919c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091a0:	6013      	str	r3, [r2, #0]
}
 80091a2:	bf00      	nop
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_RCC_HSI_IsReady>:
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80091b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091be:	d101      	bne.n	80091c4 <LL_RCC_HSI_IsReady+0x18>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <LL_RCC_HSI_IsReady+0x1a>
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80091d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	061b      	lsls	r3, r3, #24
 80091e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091ea:	4313      	orrs	r3, r2
 80091ec:	604b      	str	r3, [r1, #4]
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <LL_RCC_HSI48_Enable>:
{
 80091fa:	b480      	push	{r7}
 80091fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80091fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800920a:	f043 0301 	orr.w	r3, r3, #1
 800920e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009212:	bf00      	nop
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <LL_RCC_HSI48_Disable>:
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800922c:	f023 0301 	bic.w	r3, r3, #1
 8009230:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <LL_RCC_HSI48_IsReady>:
{
 800923e:	b480      	push	{r7}
 8009240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8009242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b02      	cmp	r3, #2
 8009250:	d101      	bne.n	8009256 <LL_RCC_HSI48_IsReady+0x18>
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <LL_RCC_HSI48_IsReady+0x1a>
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <LL_RCC_LSE_Enable>:
{
 8009262:	b480      	push	{r7}
 8009264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800927a:	bf00      	nop
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <LL_RCC_LSE_Disable>:
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800929c:	bf00      	nop
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <LL_RCC_LSE_EnableBypass>:
{
 80092a6:	b480      	push	{r7}
 80092a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80092aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092b6:	f043 0304 	orr.w	r3, r3, #4
 80092ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80092be:	bf00      	nop
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <LL_RCC_LSE_DisableBypass>:
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80092cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092d8:	f023 0304 	bic.w	r3, r3, #4
 80092dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <LL_RCC_LSE_IsReady>:
{
 80092ea:	b480      	push	{r7}
 80092ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80092ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d101      	bne.n	8009302 <LL_RCC_LSE_IsReady+0x18>
 80092fe:	2301      	movs	r3, #1
 8009300:	e000      	b.n	8009304 <LL_RCC_LSE_IsReady+0x1a>
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <LL_RCC_LSI1_Enable>:
{
 800930e:	b480      	push	{r7}
 8009310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800931a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009326:	bf00      	nop
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <LL_RCC_LSI1_Disable>:
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800933c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <LL_RCC_LSI1_IsReady>:
{
 8009352:	b480      	push	{r7}
 8009354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8009356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800935a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b02      	cmp	r3, #2
 8009364:	d101      	bne.n	800936a <LL_RCC_LSI1_IsReady+0x18>
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <LL_RCC_LSI1_IsReady+0x1a>
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <LL_RCC_LSI2_Enable>:
{
 8009376:	b480      	push	{r7}
 8009378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800937a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800937e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009386:	f043 0304 	orr.w	r3, r3, #4
 800938a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800938e:	bf00      	nop
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <LL_RCC_LSI2_Disable>:
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800939c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093a8:	f023 0304 	bic.w	r3, r3, #4
 80093ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80093b0:	bf00      	nop
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <LL_RCC_LSI2_IsReady>:
{
 80093ba:	b480      	push	{r7}
 80093bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80093be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b08      	cmp	r3, #8
 80093cc:	d101      	bne.n	80093d2 <LL_RCC_LSI2_IsReady+0x18>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <LL_RCC_LSI2_IsReady+0x1a>
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <LL_RCC_LSI2_SetTrimming>:
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80093e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <LL_RCC_MSI_Enable>:
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6013      	str	r3, [r2, #0]
}
 8009420:	bf00      	nop
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <LL_RCC_MSI_Disable>:
{
 800942a:	b480      	push	{r7}
 800942c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800942e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	6013      	str	r3, [r2, #0]
}
 800943e:	bf00      	nop
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <LL_RCC_MSI_IsReady>:
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800944c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b02      	cmp	r3, #2
 8009458:	d101      	bne.n	800945e <LL_RCC_MSI_IsReady+0x16>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <LL_RCC_MSI_IsReady+0x18>
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <LL_RCC_MSI_SetRange>:
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800947c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4313      	orrs	r3, r2
 8009484:	600b      	str	r3, [r1, #0]
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <LL_RCC_MSI_GetRange>:
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2bb0      	cmp	r3, #176	; 0xb0
 80094a8:	d901      	bls.n	80094ae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80094aa:	23b0      	movs	r3, #176	; 0xb0
 80094ac:	607b      	str	r3, [r7, #4]
  return msiRange;
 80094ae:	687b      	ldr	r3, [r7, #4]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <LL_RCC_MSI_SetCalibTrimming>:
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80094c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d6:	4313      	orrs	r3, r2
 80094d8:	604b      	str	r3, [r1, #4]
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <LL_RCC_SetSysClkSource>:
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80094ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f023 0203 	bic.w	r2, r3, #3
 80094f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4313      	orrs	r3, r2
 8009500:	608b      	str	r3, [r1, #8]
}
 8009502:	bf00      	nop
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <LL_RCC_GetSysClkSource>:
{
 800950e:	b480      	push	{r7}
 8009510:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 030c 	and.w	r3, r3, #12
}
 800951c:	4618      	mov	r0, r3
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <LL_RCC_SetAHBPrescaler>:
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800952e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4313      	orrs	r3, r2
 8009540:	608b      	str	r3, [r1, #8]
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <LL_C2_RCC_SetAHBPrescaler>:
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8009556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800955a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800955e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4313      	orrs	r3, r2
 800956a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <LL_RCC_SetAHB4Prescaler>:
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8009582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009586:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800958a:	f023 020f 	bic.w	r2, r3, #15
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	091b      	lsrs	r3, r3, #4
 8009592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009596:	4313      	orrs	r3, r2
 8009598:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_RCC_SetAPB1Prescaler>:
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80095b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	608b      	str	r3, [r1, #8]
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <LL_RCC_SetAPB2Prescaler>:
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80095d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80095e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	608b      	str	r3, [r1, #8]
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <LL_RCC_GetAHBPrescaler>:
{
 80095f8:	b480      	push	{r7}
 80095fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80095fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009606:	4618      	mov	r0, r3
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <LL_RCC_GetAHB4Prescaler>:
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009618:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009622:	4618      	mov	r0, r3
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <LL_RCC_GetAPB1Prescaler>:
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800963a:	4618      	mov	r0, r3
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <LL_RCC_GetAPB2Prescaler>:
{
 8009644:	b480      	push	{r7}
 8009646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009652:	4618      	mov	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <LL_RCC_PLL_Enable>:
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800966a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800966e:	6013      	str	r3, [r2, #0]
}
 8009670:	bf00      	nop
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <LL_RCC_PLL_Disable>:
{
 800967a:	b480      	push	{r7}
 800967c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800967e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800968c:	6013      	str	r3, [r2, #0]
}
 800968e:	bf00      	nop
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <LL_RCC_PLL_IsReady>:
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800969c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096aa:	d101      	bne.n	80096b0 <LL_RCC_PLL_IsReady+0x18>
 80096ac:	2301      	movs	r3, #1
 80096ae:	e000      	b.n	80096b2 <LL_RCC_PLL_IsReady+0x1a>
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <LL_RCC_PLL_GetN>:
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80096c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <LL_RCC_PLL_GetR>:
{
 80096d6:	b480      	push	{r7}
 80096d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80096da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <LL_RCC_PLL_GetDivider>:
{
 80096ee:	b480      	push	{r7}
 80096f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80096f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <LL_RCC_PLL_GetMainSource>:
{
 8009706:	b480      	push	{r7}
 8009708:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800970a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f003 0303 	and.w	r3, r3, #3
}
 8009714:	4618      	mov	r0, r3
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <LL_RCC_IsActiveFlag_HPRE>:
{
 800971e:	b480      	push	{r7}
 8009720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800972c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009730:	d101      	bne.n	8009736 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8009742:	b480      	push	{r7}
 8009744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8009746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800974a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800974e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009756:	d101      	bne.n	800975c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800976c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009770:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977c:	d101      	bne.n	8009782 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800978e:	b480      	push	{r7}
 8009790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8009792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097a0:	d101      	bne.n	80097a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80097b2:	b480      	push	{r7}
 80097b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80097b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097c4:	d101      	bne.n	80097ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097d8:	b590      	push	{r4, r7, lr}
 80097da:	b08d      	sub	sp, #52	; 0x34
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e363      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 808d 	beq.w	8009912 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097f8:	f7ff fe89 	bl	800950e <LL_RCC_GetSysClkSource>
 80097fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097fe:	f7ff ff82 	bl	8009706 <LL_RCC_PLL_GetMainSource>
 8009802:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <HAL_RCC_OscConfig+0x3e>
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	2b0c      	cmp	r3, #12
 800980e:	d147      	bne.n	80098a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	2b01      	cmp	r3, #1
 8009814:	d144      	bne.n	80098a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e347      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009826:	f7ff fe34 	bl	8009492 <LL_RCC_MSI_GetRange>
 800982a:	4603      	mov	r3, r0
 800982c:	429c      	cmp	r4, r3
 800982e:	d914      	bls.n	800985a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fd2f 	bl	800a298 <RCC_SetFlashLatencyFromMSIRange>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e336      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff fe0e 	bl	800946a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fe32 	bl	80094bc <LL_RCC_MSI_SetCalibTrimming>
 8009858:	e013      	b.n	8009882 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fe03 	bl	800946a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff fe27 	bl	80094bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	4618      	mov	r0, r3
 8009874:	f000 fd10 	bl	800a298 <RCC_SetFlashLatencyFromMSIRange>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e317      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009882:	f000 fcc9 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 8009886:	4603      	mov	r3, r0
 8009888:	4aa4      	ldr	r2, [pc, #656]	; (8009b1c <HAL_RCC_OscConfig+0x344>)
 800988a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800988c:	4ba4      	ldr	r3, [pc, #656]	; (8009b20 <HAL_RCC_OscConfig+0x348>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe fefd 	bl	8008690 <HAL_InitTick>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d039      	beq.n	8009910 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e308      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01e      	beq.n	80098e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80098a8:	f7ff fdb0 	bl	800940c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80098ac:	f7fe ff3e 	bl	800872c <HAL_GetTick>
 80098b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80098b2:	e008      	b.n	80098c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80098b4:	f7fe ff3a 	bl	800872c <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d901      	bls.n	80098c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e2f5      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80098c6:	f7ff fdbf 	bl	8009448 <LL_RCC_MSI_IsReady>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0f1      	beq.n	80098b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fdc8 	bl	800946a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fdec 	bl	80094bc <LL_RCC_MSI_SetCalibTrimming>
 80098e4:	e015      	b.n	8009912 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80098e6:	f7ff fda0 	bl	800942a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80098ea:	f7fe ff1f 	bl	800872c <HAL_GetTick>
 80098ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80098f0:	e008      	b.n	8009904 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80098f2:	f7fe ff1b 	bl	800872c <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d901      	bls.n	8009904 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e2d6      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009904:	f7ff fda0 	bl	8009448 <LL_RCC_MSI_IsReady>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f1      	bne.n	80098f2 <HAL_RCC_OscConfig+0x11a>
 800990e:	e000      	b.n	8009912 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009910:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d047      	beq.n	80099ae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800991e:	f7ff fdf6 	bl	800950e <LL_RCC_GetSysClkSource>
 8009922:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009924:	f7ff feef 	bl	8009706 <LL_RCC_PLL_GetMainSource>
 8009928:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	2b08      	cmp	r3, #8
 800992e:	d005      	beq.n	800993c <HAL_RCC_OscConfig+0x164>
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	2b0c      	cmp	r3, #12
 8009934:	d108      	bne.n	8009948 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	2b03      	cmp	r3, #3
 800993a:	d105      	bne.n	8009948 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d134      	bne.n	80099ae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e2b4      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009950:	d102      	bne.n	8009958 <HAL_RCC_OscConfig+0x180>
 8009952:	f7ff fbdd 	bl	8009110 <LL_RCC_HSE_Enable>
 8009956:	e001      	b.n	800995c <HAL_RCC_OscConfig+0x184>
 8009958:	f7ff fbe9 	bl	800912e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d012      	beq.n	800998a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009964:	f7fe fee2 	bl	800872c <HAL_GetTick>
 8009968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800996a:	e008      	b.n	800997e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800996c:	f7fe fede 	bl	800872c <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b64      	cmp	r3, #100	; 0x64
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e299      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800997e:	f7ff fbe5 	bl	800914c <LL_RCC_HSE_IsReady>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0f1      	beq.n	800996c <HAL_RCC_OscConfig+0x194>
 8009988:	e011      	b.n	80099ae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998a:	f7fe fecf 	bl	800872c <HAL_GetTick>
 800998e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009990:	e008      	b.n	80099a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009992:	f7fe fecb 	bl	800872c <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b64      	cmp	r3, #100	; 0x64
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e286      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80099a4:	f7ff fbd2 	bl	800914c <LL_RCC_HSE_IsReady>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1f1      	bne.n	8009992 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d04c      	beq.n	8009a54 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ba:	f7ff fda8 	bl	800950e <LL_RCC_GetSysClkSource>
 80099be:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099c0:	f7ff fea1 	bl	8009706 <LL_RCC_PLL_GetMainSource>
 80099c4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d005      	beq.n	80099d8 <HAL_RCC_OscConfig+0x200>
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b0c      	cmp	r3, #12
 80099d0:	d10e      	bne.n	80099f0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d10b      	bne.n	80099f0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e266      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fbf1 	bl	80091d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80099ee:	e031      	b.n	8009a54 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d019      	beq.n	8009a2c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099f8:	f7ff fbba 	bl	8009170 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099fc:	f7fe fe96 	bl	800872c <HAL_GetTick>
 8009a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009a02:	e008      	b.n	8009a16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a04:	f7fe fe92 	bl	800872c <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d901      	bls.n	8009a16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e24d      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009a16:	f7ff fbc9 	bl	80091ac <LL_RCC_HSI_IsReady>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0f1      	beq.n	8009a04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fbd3 	bl	80091d0 <LL_RCC_HSI_SetCalibTrimming>
 8009a2a:	e013      	b.n	8009a54 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a2c:	f7ff fbaf 	bl	800918e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a30:	f7fe fe7c 	bl	800872c <HAL_GetTick>
 8009a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a38:	f7fe fe78 	bl	800872c <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e233      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009a4a:	f7ff fbaf 	bl	80091ac <LL_RCC_HSI_IsReady>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f1      	bne.n	8009a38 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 80a3 	beq.w	8009bb4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d076      	beq.n	8009b64 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d046      	beq.n	8009b10 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009a82:	f7ff fc66 	bl	8009352 <LL_RCC_LSI1_IsReady>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d113      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009a8c:	f7ff fc3f 	bl	800930e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a90:	f7fe fe4c 	bl	800872c <HAL_GetTick>
 8009a94:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009a96:	e008      	b.n	8009aaa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009a98:	f7fe fe48 	bl	800872c <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d901      	bls.n	8009aaa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e203      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009aaa:	f7ff fc52 	bl	8009352 <LL_RCC_LSI1_IsReady>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0f1      	beq.n	8009a98 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009ab4:	f7ff fc5f 	bl	8009376 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab8:	f7fe fe38 	bl	800872c <HAL_GetTick>
 8009abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009ac0:	f7fe fe34 	bl	800872c <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e1ef      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009ad2:	f7ff fc72 	bl	80093ba <LL_RCC_LSI2_IsReady>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0f1      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fc7c 	bl	80093de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009ae6:	f7ff fc23 	bl	8009330 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aea:	f7fe fe1f 	bl	800872c <HAL_GetTick>
 8009aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009af0:	e008      	b.n	8009b04 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009af2:	f7fe fe1b 	bl	800872c <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d901      	bls.n	8009b04 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e1d6      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009b04:	f7ff fc25 	bl	8009352 <LL_RCC_LSI1_IsReady>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f1      	bne.n	8009af2 <HAL_RCC_OscConfig+0x31a>
 8009b0e:	e051      	b.n	8009bb4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009b10:	f7ff fbfd 	bl	800930e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b14:	f7fe fe0a 	bl	800872c <HAL_GetTick>
 8009b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009b1a:	e00c      	b.n	8009b36 <HAL_RCC_OscConfig+0x35e>
 8009b1c:	20000008 	.word	0x20000008
 8009b20:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b24:	f7fe fe02 	bl	800872c <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e1bd      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009b36:	f7ff fc0c 	bl	8009352 <LL_RCC_LSI1_IsReady>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f1      	beq.n	8009b24 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009b40:	f7ff fc2a 	bl	8009398 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009b44:	e008      	b.n	8009b58 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009b46:	f7fe fdf1 	bl	800872c <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e1ac      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009b58:	f7ff fc2f 	bl	80093ba <LL_RCC_LSI2_IsReady>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f1      	bne.n	8009b46 <HAL_RCC_OscConfig+0x36e>
 8009b62:	e027      	b.n	8009bb4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009b64:	f7ff fc18 	bl	8009398 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b68:	f7fe fde0 	bl	800872c <HAL_GetTick>
 8009b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009b6e:	e008      	b.n	8009b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009b70:	f7fe fddc 	bl	800872c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e197      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009b82:	f7ff fc1a 	bl	80093ba <LL_RCC_LSI2_IsReady>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1f1      	bne.n	8009b70 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009b8c:	f7ff fbd0 	bl	8009330 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b90:	f7fe fdcc 	bl	800872c <HAL_GetTick>
 8009b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009b96:	e008      	b.n	8009baa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b98:	f7fe fdc8 	bl	800872c <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e183      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009baa:	f7ff fbd2 	bl	8009352 <LL_RCC_LSI1_IsReady>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1f1      	bne.n	8009b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d05b      	beq.n	8009c78 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bc0:	4ba7      	ldr	r3, [pc, #668]	; (8009e60 <HAL_RCC_OscConfig+0x688>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d114      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009bcc:	f7ff fa70 	bl	80090b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bd0:	f7fe fdac 	bl	800872c <HAL_GetTick>
 8009bd4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd8:	f7fe fda8 	bl	800872c <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e163      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bea:	4b9d      	ldr	r3, [pc, #628]	; (8009e60 <HAL_RCC_OscConfig+0x688>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f0      	beq.n	8009bd8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d102      	bne.n	8009c04 <HAL_RCC_OscConfig+0x42c>
 8009bfe:	f7ff fb30 	bl	8009262 <LL_RCC_LSE_Enable>
 8009c02:	e00c      	b.n	8009c1e <HAL_RCC_OscConfig+0x446>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	d104      	bne.n	8009c16 <HAL_RCC_OscConfig+0x43e>
 8009c0c:	f7ff fb4b 	bl	80092a6 <LL_RCC_LSE_EnableBypass>
 8009c10:	f7ff fb27 	bl	8009262 <LL_RCC_LSE_Enable>
 8009c14:	e003      	b.n	8009c1e <HAL_RCC_OscConfig+0x446>
 8009c16:	f7ff fb35 	bl	8009284 <LL_RCC_LSE_Disable>
 8009c1a:	f7ff fb55 	bl	80092c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d014      	beq.n	8009c50 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c26:	f7fe fd81 	bl	800872c <HAL_GetTick>
 8009c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009c2c:	e00a      	b.n	8009c44 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c2e:	f7fe fd7d 	bl	800872c <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d901      	bls.n	8009c44 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e136      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009c44:	f7ff fb51 	bl	80092ea <LL_RCC_LSE_IsReady>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0ef      	beq.n	8009c2e <HAL_RCC_OscConfig+0x456>
 8009c4e:	e013      	b.n	8009c78 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c50:	f7fe fd6c 	bl	800872c <HAL_GetTick>
 8009c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009c56:	e00a      	b.n	8009c6e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c58:	f7fe fd68 	bl	800872c <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e121      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009c6e:	f7ff fb3c 	bl	80092ea <LL_RCC_LSE_IsReady>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1ef      	bne.n	8009c58 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d02c      	beq.n	8009cde <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d014      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c8c:	f7ff fab5 	bl	80091fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c90:	f7fe fd4c 	bl	800872c <HAL_GetTick>
 8009c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009c96:	e008      	b.n	8009caa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c98:	f7fe fd48 	bl	800872c <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d901      	bls.n	8009caa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e103      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009caa:	f7ff fac8 	bl	800923e <LL_RCC_HSI48_IsReady>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0f1      	beq.n	8009c98 <HAL_RCC_OscConfig+0x4c0>
 8009cb4:	e013      	b.n	8009cde <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cb6:	f7ff fab1 	bl	800921c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cba:	f7fe fd37 	bl	800872c <HAL_GetTick>
 8009cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009cc0:	e008      	b.n	8009cd4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cc2:	f7fe fd33 	bl	800872c <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d901      	bls.n	8009cd4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e0ee      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009cd4:	f7ff fab3 	bl	800923e <LL_RCC_HSI48_IsReady>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1f1      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80e4 	beq.w	8009eb0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ce8:	f7ff fc11 	bl	800950e <LL_RCC_GetSysClkSource>
 8009cec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	f040 80b4 	bne.w	8009e68 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f003 0203 	and.w	r2, r3, #3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d123      	bne.n	8009d56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d11c      	bne.n	8009d56 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0a1b      	lsrs	r3, r3, #8
 8009d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d114      	bne.n	8009d56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d10d      	bne.n	8009d56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d106      	bne.n	8009d56 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d05d      	beq.n	8009e12 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b0c      	cmp	r3, #12
 8009d5a:	d058      	beq.n	8009e0e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e0a1      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009d6e:	f7ff fc84 	bl	800967a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009d72:	f7fe fcdb 	bl	800872c <HAL_GetTick>
 8009d76:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d78:	e008      	b.n	8009d8c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d7a:	f7fe fcd7 	bl	800872c <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d901      	bls.n	8009d8c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e092      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1ef      	bne.n	8009d7a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	4b30      	ldr	r3, [pc, #192]	; (8009e64 <HAL_RCC_OscConfig+0x68c>)
 8009da2:	4013      	ands	r3, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009dac:	4311      	orrs	r1, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009db2:	0212      	lsls	r2, r2, #8
 8009db4:	4311      	orrs	r1, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009dba:	4311      	orrs	r1, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009dc0:	4311      	orrs	r1, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009dd0:	f7ff fc44 	bl	800965c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009de2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009de4:	f7fe fca2 	bl	800872c <HAL_GetTick>
 8009de8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dea:	e008      	b.n	8009dfe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dec:	f7fe fc9e 	bl	800872c <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d901      	bls.n	8009dfe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e059      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0ef      	beq.n	8009dec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e0c:	e050      	b.n	8009eb0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e04f      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d147      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009e20:	f7ff fc1c 	bl	800965c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e34:	f7fe fc7a 	bl	800872c <HAL_GetTick>
 8009e38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e3a:	e008      	b.n	8009e4e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e3c:	f7fe fc76 	bl	800872c <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e031      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0ef      	beq.n	8009e3c <HAL_RCC_OscConfig+0x664>
 8009e5c:	e028      	b.n	8009eb0 <HAL_RCC_OscConfig+0x6d8>
 8009e5e:	bf00      	nop
 8009e60:	58000400 	.word	0x58000400
 8009e64:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2b0c      	cmp	r3, #12
 8009e6c:	d01e      	beq.n	8009eac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e6e:	f7ff fc04 	bl	800967a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e72:	f7fe fc5b 	bl	800872c <HAL_GetTick>
 8009e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e78:	e008      	b.n	8009e8c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e7a:	f7fe fc57 	bl	800872c <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e012      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1ef      	bne.n	8009e7a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e9e:	68da      	ldr	r2, [r3, #12]
 8009ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <HAL_RCC_OscConfig+0x6e4>)
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	60cb      	str	r3, [r1, #12]
 8009eaa:	e001      	b.n	8009eb0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e000      	b.n	8009eb2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3734      	adds	r7, #52	; 0x34
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd90      	pop	{r4, r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	eefefffc 	.word	0xeefefffc

08009ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e12d      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ed4:	4b98      	ldr	r3, [pc, #608]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d91b      	bls.n	8009f1a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ee2:	4b95      	ldr	r3, [pc, #596]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f023 0207 	bic.w	r2, r3, #7
 8009eea:	4993      	ldr	r1, [pc, #588]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ef2:	f7fe fc1b 	bl	800872c <HAL_GetTick>
 8009ef6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009efa:	f7fe fc17 	bl	800872c <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e111      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f0c:	4b8a      	ldr	r3, [pc, #552]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d1ef      	bne.n	8009efa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff fafb 	bl	8009526 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009f30:	f7fe fbfc 	bl	800872c <HAL_GetTick>
 8009f34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009f36:	e008      	b.n	8009f4a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009f38:	f7fe fbf8 	bl	800872c <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d901      	bls.n	8009f4a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e0f2      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009f4a:	f7ff fbe8 	bl	800971e <LL_RCC_IsActiveFlag_HPRE>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0f1      	beq.n	8009f38 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d016      	beq.n	8009f8e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff faf2 	bl	800954e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009f6a:	f7fe fbdf 	bl	800872c <HAL_GetTick>
 8009f6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009f70:	e008      	b.n	8009f84 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009f72:	f7fe fbdb 	bl	800872c <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e0d5      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009f84:	f7ff fbdd 	bl	8009742 <LL_RCC_IsActiveFlag_C2HPRE>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f1      	beq.n	8009f72 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d016      	beq.n	8009fc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff faeb 	bl	800957a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009fa4:	f7fe fbc2 	bl	800872c <HAL_GetTick>
 8009fa8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009faa:	e008      	b.n	8009fbe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009fac:	f7fe fbbe 	bl	800872c <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d901      	bls.n	8009fbe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e0b8      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009fbe:	f7ff fbd3 	bl	8009768 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0f1      	beq.n	8009fac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d016      	beq.n	800a002 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff fae5 	bl	80095a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009fde:	f7fe fba5 	bl	800872c <HAL_GetTick>
 8009fe2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009fe4:	e008      	b.n	8009ff8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009fe6:	f7fe fba1 	bl	800872c <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e09b      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009ff8:	f7ff fbc9 	bl	800978e <LL_RCC_IsActiveFlag_PPRE1>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0f1      	beq.n	8009fe6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0308 	and.w	r3, r3, #8
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d017      	beq.n	800a03e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff fadb 	bl	80095d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a01a:	f7fe fb87 	bl	800872c <HAL_GetTick>
 800a01e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a020:	e008      	b.n	800a034 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a022:	f7fe fb83 	bl	800872c <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e07d      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a034:	f7ff fbbd 	bl	80097b2 <LL_RCC_IsActiveFlag_PPRE2>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0f1      	beq.n	800a022 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d043      	beq.n	800a0d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d106      	bne.n	800a060 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a052:	f7ff f87b 	bl	800914c <LL_RCC_HSE_IsReady>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d11e      	bne.n	800a09a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e067      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d106      	bne.n	800a076 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a068:	f7ff fb16 	bl	8009698 <LL_RCC_PLL_IsReady>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d113      	bne.n	800a09a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e05c      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a07e:	f7ff f9e3 	bl	8009448 <LL_RCC_MSI_IsReady>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d108      	bne.n	800a09a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e051      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a08c:	f7ff f88e 	bl	80091ac <LL_RCC_HSI_IsReady>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e04a      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff fa21 	bl	80094e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0a4:	f7fe fb42 	bl	800872c <HAL_GetTick>
 800a0a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0aa:	e00a      	b.n	800a0c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0ac:	f7fe fb3e 	bl	800872c <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e036      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0c2:	f7ff fa24 	bl	800950e <LL_RCC_GetSysClkSource>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d1ec      	bne.n	800a0ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0d2:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d21b      	bcs.n	800a118 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0e0:	4b15      	ldr	r3, [pc, #84]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f023 0207 	bic.w	r2, r3, #7
 800a0e8:	4913      	ldr	r1, [pc, #76]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0f0:	f7fe fb1c 	bl	800872c <HAL_GetTick>
 800a0f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0f6:	e008      	b.n	800a10a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a0f8:	f7fe fb18 	bl	800872c <HAL_GetTick>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	2b02      	cmp	r3, #2
 800a104:	d901      	bls.n	800a10a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e012      	b.n	800a130 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_RCC_ClockConfig+0x278>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d1ef      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a118:	f000 f87e 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 800a11c:	4603      	mov	r3, r0
 800a11e:	4a07      	ldr	r2, [pc, #28]	; (800a13c <HAL_RCC_ClockConfig+0x27c>)
 800a120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a122:	f7fe fb0f 	bl	8008744 <HAL_GetTickPrio>
 800a126:	4603      	mov	r3, r0
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fe fab1 	bl	8008690 <HAL_InitTick>
 800a12e:	4603      	mov	r3, r0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	58004000 	.word	0x58004000
 800a13c:	20000008 	.word	0x20000008

0800a140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a140:	b590      	push	{r4, r7, lr}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a146:	f7ff f9e2 	bl	800950e <LL_RCC_GetSysClkSource>
 800a14a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10a      	bne.n	800a168 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a152:	f7ff f99e 	bl	8009492 <LL_RCC_MSI_GetRange>
 800a156:	4603      	mov	r3, r0
 800a158:	091b      	lsrs	r3, r3, #4
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	4a2b      	ldr	r2, [pc, #172]	; (800a20c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	e04b      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d102      	bne.n	800a174 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a16e:	4b28      	ldr	r3, [pc, #160]	; (800a210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a170:	60fb      	str	r3, [r7, #12]
 800a172:	e045      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b08      	cmp	r3, #8
 800a178:	d10a      	bne.n	800a190 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a17a:	f7fe ffb7 	bl	80090ec <LL_RCC_HSE_IsEnabledDiv2>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b01      	cmp	r3, #1
 800a182:	d102      	bne.n	800a18a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a184:	4b22      	ldr	r3, [pc, #136]	; (800a210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e03a      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a18a:	4b22      	ldr	r3, [pc, #136]	; (800a214 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	e037      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a190:	f7ff fab9 	bl	8009706 <LL_RCC_PLL_GetMainSource>
 800a194:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d003      	beq.n	800a1a4 <HAL_RCC_GetSysClockFreq+0x64>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d003      	beq.n	800a1aa <HAL_RCC_GetSysClockFreq+0x6a>
 800a1a2:	e00d      	b.n	800a1c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a1a4:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a1a6:	60bb      	str	r3, [r7, #8]
        break;
 800a1a8:	e015      	b.n	800a1d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a1aa:	f7fe ff9f 	bl	80090ec <LL_RCC_HSE_IsEnabledDiv2>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d102      	bne.n	800a1ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a1b4:	4b16      	ldr	r3, [pc, #88]	; (800a210 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a1b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a1b8:	e00d      	b.n	800a1d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a1ba:	4b16      	ldr	r3, [pc, #88]	; (800a214 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a1bc:	60bb      	str	r3, [r7, #8]
        break;
 800a1be:	e00a      	b.n	800a1d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a1c0:	f7ff f967 	bl	8009492 <LL_RCC_MSI_GetRange>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	091b      	lsrs	r3, r3, #4
 800a1c8:	f003 030f 	and.w	r3, r3, #15
 800a1cc:	4a0f      	ldr	r2, [pc, #60]	; (800a20c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d2:	60bb      	str	r3, [r7, #8]
        break;
 800a1d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a1d6:	f7ff fa71 	bl	80096bc <LL_RCC_PLL_GetN>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	fb03 f402 	mul.w	r4, r3, r2
 800a1e2:	f7ff fa84 	bl	80096ee <LL_RCC_PLL_GetDivider>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	091b      	lsrs	r3, r3, #4
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	fbb4 f4f3 	udiv	r4, r4, r3
 800a1f0:	f7ff fa71 	bl	80096d6 <LL_RCC_PLL_GetR>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	0f5b      	lsrs	r3, r3, #29
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	fbb4 f3f3 	udiv	r3, r4, r3
 800a1fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a200:	68fb      	ldr	r3, [r7, #12]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	bf00      	nop
 800a20c:	080115d0 	.word	0x080115d0
 800a210:	00f42400 	.word	0x00f42400
 800a214:	01e84800 	.word	0x01e84800

0800a218 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a218:	b598      	push	{r3, r4, r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a21c:	f7ff ff90 	bl	800a140 <HAL_RCC_GetSysClockFreq>
 800a220:	4604      	mov	r4, r0
 800a222:	f7ff f9e9 	bl	80095f8 <LL_RCC_GetAHBPrescaler>
 800a226:	4603      	mov	r3, r0
 800a228:	091b      	lsrs	r3, r3, #4
 800a22a:	f003 030f 	and.w	r3, r3, #15
 800a22e:	4a03      	ldr	r2, [pc, #12]	; (800a23c <HAL_RCC_GetHCLKFreq+0x24>)
 800a230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a234:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	bd98      	pop	{r3, r4, r7, pc}
 800a23c:	08011570 	.word	0x08011570

0800a240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a240:	b598      	push	{r3, r4, r7, lr}
 800a242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a244:	f7ff ffe8 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 800a248:	4604      	mov	r4, r0
 800a24a:	f7ff f9ef 	bl	800962c <LL_RCC_GetAPB1Prescaler>
 800a24e:	4603      	mov	r3, r0
 800a250:	0a1b      	lsrs	r3, r3, #8
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	4a04      	ldr	r2, [pc, #16]	; (800a268 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25c:	f003 031f 	and.w	r3, r3, #31
 800a260:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a264:	4618      	mov	r0, r3
 800a266:	bd98      	pop	{r3, r4, r7, pc}
 800a268:	080115b0 	.word	0x080115b0

0800a26c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a26c:	b598      	push	{r3, r4, r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a270:	f7ff ffd2 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 800a274:	4604      	mov	r4, r0
 800a276:	f7ff f9e5 	bl	8009644 <LL_RCC_GetAPB2Prescaler>
 800a27a:	4603      	mov	r3, r0
 800a27c:	0adb      	lsrs	r3, r3, #11
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	4a04      	ldr	r2, [pc, #16]	; (800a294 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a288:	f003 031f 	and.w	r3, r3, #31
 800a28c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a290:	4618      	mov	r0, r3
 800a292:	bd98      	pop	{r3, r4, r7, pc}
 800a294:	080115b0 	.word	0x080115b0

0800a298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2bb0      	cmp	r3, #176	; 0xb0
 800a2a4:	d903      	bls.n	800a2ae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a2a6:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	e007      	b.n	800a2be <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	091b      	lsrs	r3, r3, #4
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	4a11      	ldr	r2, [pc, #68]	; (800a2fc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2bc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a2be:	f7ff f9a7 	bl	8009610 <LL_RCC_GetAHB4Prescaler>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	091b      	lsrs	r3, r3, #4
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	4a0d      	ldr	r2, [pc, #52]	; (800a300 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4a0a      	ldr	r2, [pc, #40]	; (800a304 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e0:	0c9c      	lsrs	r4, r3, #18
 800a2e2:	f7fe fef5 	bl	80090d0 <HAL_PWREx_GetVoltageRange>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 f80c 	bl	800a308 <RCC_SetFlashLatency>
 800a2f0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd90      	pop	{r4, r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	080115d0 	.word	0x080115d0
 800a300:	08011570 	.word	0x08011570
 800a304:	431bde83 	.word	0x431bde83

0800a308 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b093      	sub	sp, #76	; 0x4c
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a312:	4b37      	ldr	r3, [pc, #220]	; (800a3f0 <RCC_SetFlashLatency+0xe8>)
 800a314:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a31a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a31e:	4a35      	ldr	r2, [pc, #212]	; (800a3f4 <RCC_SetFlashLatency+0xec>)
 800a320:	f107 031c 	add.w	r3, r7, #28
 800a324:	ca07      	ldmia	r2, {r0, r1, r2}
 800a326:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a32a:	4b33      	ldr	r3, [pc, #204]	; (800a3f8 <RCC_SetFlashLatency+0xf0>)
 800a32c:	f107 040c 	add.w	r4, r7, #12
 800a330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a336:	2300      	movs	r3, #0
 800a338:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a340:	d11a      	bne.n	800a378 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a342:	2300      	movs	r3, #0
 800a344:	643b      	str	r3, [r7, #64]	; 0x40
 800a346:	e013      	b.n	800a370 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	3348      	adds	r3, #72	; 0x48
 800a34e:	443b      	add	r3, r7
 800a350:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d807      	bhi.n	800a36a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	3348      	adds	r3, #72	; 0x48
 800a360:	443b      	add	r3, r7
 800a362:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a366:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a368:	e020      	b.n	800a3ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a36c:	3301      	adds	r3, #1
 800a36e:	643b      	str	r3, [r7, #64]	; 0x40
 800a370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a372:	2b03      	cmp	r3, #3
 800a374:	d9e8      	bls.n	800a348 <RCC_SetFlashLatency+0x40>
 800a376:	e019      	b.n	800a3ac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a378:	2300      	movs	r3, #0
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a37c:	e013      	b.n	800a3a6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	3348      	adds	r3, #72	; 0x48
 800a384:	443b      	add	r3, r7
 800a386:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d807      	bhi.n	800a3a0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	3348      	adds	r3, #72	; 0x48
 800a396:	443b      	add	r3, r7
 800a398:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a39c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a39e:	e005      	b.n	800a3ac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d9e8      	bls.n	800a37e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a3ac:	4b13      	ldr	r3, [pc, #76]	; (800a3fc <RCC_SetFlashLatency+0xf4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f023 0207 	bic.w	r2, r3, #7
 800a3b4:	4911      	ldr	r1, [pc, #68]	; (800a3fc <RCC_SetFlashLatency+0xf4>)
 800a3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3bc:	f7fe f9b6 	bl	800872c <HAL_GetTick>
 800a3c0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a3c2:	e008      	b.n	800a3d6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a3c4:	f7fe f9b2 	bl	800872c <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d901      	bls.n	800a3d6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e007      	b.n	800a3e6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <RCC_SetFlashLatency+0xf4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0307 	and.w	r3, r3, #7
 800a3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d1ef      	bne.n	800a3c4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	374c      	adds	r7, #76	; 0x4c
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd90      	pop	{r4, r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	08011090 	.word	0x08011090
 800a3f4:	080110a0 	.word	0x080110a0
 800a3f8:	080110ac 	.word	0x080110ac
 800a3fc:	58004000 	.word	0x58004000

0800a400 <LL_RCC_LSE_IsEnabled>:
{
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b01      	cmp	r3, #1
 800a412:	d101      	bne.n	800a418 <LL_RCC_LSE_IsEnabled+0x18>
 800a414:	2301      	movs	r3, #1
 800a416:	e000      	b.n	800a41a <LL_RCC_LSE_IsEnabled+0x1a>
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <LL_RCC_LSE_IsReady>:
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b02      	cmp	r3, #2
 800a436:	d101      	bne.n	800a43c <LL_RCC_LSE_IsReady+0x18>
 800a438:	2301      	movs	r3, #1
 800a43a:	e000      	b.n	800a43e <LL_RCC_LSE_IsReady+0x1a>
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <LL_RCC_MSI_EnablePLLMode>:
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800a44c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a456:	f043 0304 	orr.w	r3, r3, #4
 800a45a:	6013      	str	r3, [r2, #0]
}
 800a45c:	bf00      	nop
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <LL_RCC_SetRFWKPClockSource>:
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a46e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a476:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a47a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <LL_RCC_SetSMPSClockSource>:
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a49a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	f023 0203 	bic.w	r2, r3, #3
 800a4a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <LL_RCC_SetSMPSPrescaler>:
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a4c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a4cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <LL_RCC_SetUSARTClockSource>:
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a4ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	f023 0203 	bic.w	r2, r3, #3
 800a4f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <LL_RCC_SetLPUARTClockSource>:
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4313      	orrs	r3, r2
 800a52a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <LL_RCC_SetI2CClockSource>:
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a546:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	091b      	lsrs	r3, r3, #4
 800a54e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a552:	43db      	mvns	r3, r3
 800a554:	401a      	ands	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a55e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <LL_RCC_SetLPTIMClockSource>:
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a57c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a580:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	0c1b      	lsrs	r3, r3, #16
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	43db      	mvns	r3, r3
 800a58c:	401a      	ands	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	041b      	lsls	r3, r3, #16
 800a592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a596:	4313      	orrs	r3, r2
 800a598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <LL_RCC_SetSAIClockSource>:
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a5b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <LL_RCC_SetRNGClockSource>:
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a5dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a5e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <LL_RCC_SetCLK48ClockSource>:
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a610:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <LL_RCC_SetUSBClockSource>:
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff ffe3 	bl	800a600 <LL_RCC_SetCLK48ClockSource>
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <LL_RCC_SetADCClockSource>:
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a64a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <LL_RCC_SetRTCClockSource>:
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4313      	orrs	r3, r2
 800a68a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <LL_RCC_GetRTCClockSource>:
{
 800a69a:	b480      	push	{r7}
 800a69c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a69e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <LL_RCC_ForceBackupDomainReset>:
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a6b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a6cc:	bf00      	nop
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a6da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a6ee:	bf00      	nop
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <LL_RCC_PLLSAI1_Enable>:
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a6fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a70a:	6013      	str	r3, [r2, #0]
}
 800a70c:	bf00      	nop
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <LL_RCC_PLLSAI1_Disable>:
{
 800a716:	b480      	push	{r7}
 800a718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a71a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a728:	6013      	str	r3, [r2, #0]
}
 800a72a:	bf00      	nop
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <LL_RCC_PLLSAI1_IsReady>:
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a746:	d101      	bne.n	800a74c <LL_RCC_PLLSAI1_IsReady+0x18>
 800a748:	2301      	movs	r3, #1
 800a74a:	e000      	b.n	800a74e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a760:	2300      	movs	r3, #0
 800a762:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a764:	2300      	movs	r3, #0
 800a766:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	d034      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a77c:	d021      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a77e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a782:	d81b      	bhi.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a788:	d01d      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a78a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a78e:	d815      	bhi.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00b      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a798:	d110      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a79a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a7aa:	e00d      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 f94d 	bl	800aa50 <RCCEx_PLLSAI1_ConfigNP>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a7ba:	e005      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	77fb      	strb	r3, [r7, #31]
        break;
 800a7c0:	e002      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a7c2:	bf00      	nop
 800a7c4:	e000      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d105      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff fee8 	bl	800a5a8 <LL_RCC_SetSAIClockSource>
 800a7d8:	e001      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7da:	7ffb      	ldrb	r3, [r7, #31]
 800a7dc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d046      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a7ea:	f7ff ff56 	bl	800a69a <LL_RCC_GetRTCClockSource>
 800a7ee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d03c      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a7fa:	f7fe fc59 	bl	80090b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d105      	bne.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff ff30 	bl	800a66e <LL_RCC_SetRTCClockSource>
 800a80e:	e02e      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a818:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a81a:	f7ff ff4b 	bl	800a6b4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a81e:	f7ff ff5a 	bl	800a6d6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82c:	4313      	orrs	r3, r2
 800a82e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a83a:	f7ff fde1 	bl	800a400 <LL_RCC_LSE_IsEnabled>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d114      	bne.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a844:	f7fd ff72 	bl	800872c <HAL_GetTick>
 800a848:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a84a:	e00b      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a84c:	f7fd ff6e 	bl	800872c <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	f241 3288 	movw	r2, #5000	; 0x1388
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d902      	bls.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	77fb      	strb	r3, [r7, #31]
              break;
 800a862:	e004      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a864:	f7ff fdde 	bl	800a424 <LL_RCC_LSE_IsReady>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d1ee      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a86e:	7ffb      	ldrb	r3, [r7, #31]
 800a870:	77bb      	strb	r3, [r7, #30]
 800a872:	e001      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a874:	7ffb      	ldrb	r3, [r7, #31]
 800a876:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	d004      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fe2a 	bl	800a4e2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff fe35 	bl	800a50e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0310 	and.w	r3, r3, #16
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fe5d 	bl	800a574 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fe52 	bl	800a574 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fe2a 	bl	800a53a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0308 	and.w	r3, r3, #8
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fe1f 	bl	800a53a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a904:	2b00      	cmp	r3, #0
 800a906:	d022      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fe8d 	bl	800a62c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a91a:	d107      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a91c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a92a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a934:	d10b      	bne.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3304      	adds	r3, #4
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f8e3 	bl	800ab06 <RCCEx_PLLSAI1_ConfigNQ>
 800a940:	4603      	mov	r3, r0
 800a942:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a944:	7ffb      	ldrb	r3, [r7, #31]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a94a:	7ffb      	ldrb	r3, [r7, #31]
 800a94c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a956:	2b00      	cmp	r3, #0
 800a958:	d02b      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a962:	d008      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a96c:	d003      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a972:	2b00      	cmp	r3, #0
 800a974:	d105      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff fe2a 	bl	800a5d4 <LL_RCC_SetRNGClockSource>
 800a980:	e00a      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	2000      	movs	r0, #0
 800a98e:	f7ff fe21 	bl	800a5d4 <LL_RCC_SetRNGClockSource>
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff fe34 	bl	800a600 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a9a0:	d107      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a9a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d022      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fe3d 	bl	800a642 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d0:	d107      	bne.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a9d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ea:	d10b      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 f8e3 	bl	800abbc <RCCEx_PLLSAI1_ConfigNR>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a9fa:	7ffb      	ldrb	r3, [r7, #31]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800aa00:	7ffb      	ldrb	r3, [r7, #31]
 800aa02:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d004      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff fd26 	bl	800a466 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff fd45 	bl	800a4ba <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fd2c 	bl	800a492 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800aa3a:	7fbb      	ldrb	r3, [r7, #30]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800aa48:	f7ff fcfe 	bl	800a448 <LL_RCC_MSI_EnablePLLMode>
}
 800aa4c:	bf00      	nop
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800aa5c:	f7ff fe5b 	bl	800a716 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aa60:	f7fd fe64 	bl	800872c <HAL_GetTick>
 800aa64:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa66:	e009      	b.n	800aa7c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa68:	f7fd fe60 	bl	800872c <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d902      	bls.n	800aa7c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	73fb      	strb	r3, [r7, #15]
      break;
 800aa7a:	e004      	b.n	800aa86 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa7c:	f7ff fe5a 	bl	800a734 <LL_RCC_PLLSAI1_IsReady>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f0      	bne.n	800aa68 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d137      	bne.n	800aafc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800aa8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	021b      	lsls	r3, r3, #8
 800aa9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800aaa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aab6:	4313      	orrs	r3, r2
 800aab8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800aaba:	f7ff fe1d 	bl	800a6f8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aabe:	f7fd fe35 	bl	800872c <HAL_GetTick>
 800aac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aac4:	e009      	b.n	800aada <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aac6:	f7fd fe31 	bl	800872c <HAL_GetTick>
 800aaca:	4602      	mov	r2, r0
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d902      	bls.n	800aada <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	73fb      	strb	r3, [r7, #15]
        break;
 800aad8:	e004      	b.n	800aae4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aada:	f7ff fe2b 	bl	800a734 <LL_RCC_PLLSAI1_IsReady>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d1f0      	bne.n	800aac6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d108      	bne.n	800aafc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aaea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ab12:	f7ff fe00 	bl	800a716 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ab16:	f7fd fe09 	bl	800872c <HAL_GetTick>
 800ab1a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab1c:	e009      	b.n	800ab32 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab1e:	f7fd fe05 	bl	800872c <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d902      	bls.n	800ab32 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab30:	e004      	b.n	800ab3c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab32:	f7ff fdff 	bl	800a734 <LL_RCC_PLLSAI1_IsReady>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f0      	bne.n	800ab1e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d137      	bne.n	800abb2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ab42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	021b      	lsls	r3, r3, #8
 800ab52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab56:	4313      	orrs	r3, r2
 800ab58:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ab5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ab70:	f7ff fdc2 	bl	800a6f8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab74:	f7fd fdda 	bl	800872c <HAL_GetTick>
 800ab78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab7a:	e009      	b.n	800ab90 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab7c:	f7fd fdd6 	bl	800872c <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d902      	bls.n	800ab90 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
        break;
 800ab8e:	e004      	b.n	800ab9a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab90:	f7ff fdd0 	bl	800a734 <LL_RCC_PLLSAI1_IsReady>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d1f0      	bne.n	800ab7c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d108      	bne.n	800abb2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abae:	4313      	orrs	r3, r2
 800abb0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800abc8:	f7ff fda5 	bl	800a716 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800abcc:	f7fd fdae 	bl	800872c <HAL_GetTick>
 800abd0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800abd2:	e009      	b.n	800abe8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800abd4:	f7fd fdaa 	bl	800872c <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d902      	bls.n	800abe8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	73fb      	strb	r3, [r7, #15]
      break;
 800abe6:	e004      	b.n	800abf2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800abe8:	f7ff fda4 	bl	800a734 <LL_RCC_PLLSAI1_IsReady>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f0      	bne.n	800abd4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d137      	bne.n	800ac68 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800abf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	021b      	lsls	r3, r3, #8
 800ac08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ac10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac22:	4313      	orrs	r3, r2
 800ac24:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ac26:	f7ff fd67 	bl	800a6f8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac2a:	f7fd fd7f 	bl	800872c <HAL_GetTick>
 800ac2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac30:	e009      	b.n	800ac46 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac32:	f7fd fd7b 	bl	800872c <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d902      	bls.n	800ac46 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	73fb      	strb	r3, [r7, #15]
        break;
 800ac44:	e004      	b.n	800ac50 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac46:	f7ff fd75 	bl	800a734 <LL_RCC_PLLSAI1_IsReady>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d1f0      	bne.n	800ac32 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d108      	bne.n	800ac68 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ac56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac64:	4313      	orrs	r3, r2
 800ac66:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e09f      	b.n	800adc6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7fd fa46 	bl	800812c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2202      	movs	r2, #2
 800aca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aca8:	4b49      	ldr	r3, [pc, #292]	; (800add0 <HAL_RTC_Init+0x15c>)
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f003 0310 	and.w	r3, r3, #16
 800acb0:	2b10      	cmp	r3, #16
 800acb2:	d07e      	beq.n	800adb2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	22ca      	movs	r2, #202	; 0xca
 800acba:	625a      	str	r2, [r3, #36]	; 0x24
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2253      	movs	r2, #83	; 0x53
 800acc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f8ab 	bl	800ae20 <RTC_EnterInitMode>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00a      	beq.n	800ace6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	22ff      	movs	r2, #255	; 0xff
 800acd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2204      	movs	r2, #4
 800acdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	73fb      	strb	r3, [r7, #15]
 800ace4:	e067      	b.n	800adb6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	6812      	ldr	r2, [r2, #0]
 800acf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800acf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6899      	ldr	r1, [r3, #8]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	68d2      	ldr	r2, [r2, #12]
 800ad20:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6919      	ldr	r1, [r3, #16]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	041a      	lsls	r2, r3, #16
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68da      	ldr	r2, [r3, #12]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad44:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f022 0203 	bic.w	r2, r2, #3
 800ad54:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69da      	ldr	r2, [r3, #28]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	431a      	orrs	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	430a      	orrs	r2, r1
 800ad6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d113      	bne.n	800ada4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f829 	bl	800add4 <HAL_RTC_WaitForSynchro>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00d      	beq.n	800ada4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	22ff      	movs	r2, #255	; 0xff
 800ad8e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e010      	b.n	800adc6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	22ff      	movs	r2, #255	; 0xff
 800adaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	e001      	b.n	800adb6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d103      	bne.n	800adc4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	40002800 	.word	0x40002800

0800add4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800adea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800adec:	f7fd fc9e 	bl	800872c <HAL_GetTick>
 800adf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800adf2:	e009      	b.n	800ae08 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800adf4:	f7fd fc9a 	bl	800872c <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae02:	d901      	bls.n	800ae08 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e007      	b.n	800ae18 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f003 0320 	and.w	r3, r3, #32
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0ee      	beq.n	800adf4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d119      	bne.n	800ae6a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ae40:	f7fd fc74 	bl	800872c <HAL_GetTick>
 800ae44:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ae46:	e009      	b.n	800ae5c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ae48:	f7fd fc70 	bl	800872c <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae56:	d901      	bls.n	800ae5c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e007      	b.n	800ae6c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0ee      	beq.n	800ae48 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <LL_RCC_GetUSARTClockSource>:
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800ae7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4013      	ands	r3, r2
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <LL_RCC_GetLPUARTClockSource>:
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ae9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aea0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4013      	ands	r3, r2
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e042      	b.n	800af4c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7fd f953 	bl	8008184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2224      	movs	r2, #36	; 0x24
 800aee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f022 0201 	bic.w	r2, r2, #1
 800aef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f82c 	bl	800af54 <UART_SetConfig>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e022      	b.n	800af4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fa48 	bl	800b3a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f042 0201 	orr.w	r2, r2, #1
 800af42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 facf 	bl	800b4e8 <UART_CheckIdleState>
 800af4a:	4603      	mov	r3, r0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af58:	b08c      	sub	sp, #48	; 0x30
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	431a      	orrs	r2, r3
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	431a      	orrs	r2, r3
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	4313      	orrs	r3, r2
 800af7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4baf      	ldr	r3, [pc, #700]	; (800b240 <UART_SetConfig+0x2ec>)
 800af84:	4013      	ands	r3, r2
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	6812      	ldr	r2, [r2, #0]
 800af8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af8c:	430b      	orrs	r3, r1
 800af8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	68da      	ldr	r2, [r3, #12]
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4aa4      	ldr	r2, [pc, #656]	; (800b244 <UART_SetConfig+0x2f0>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d004      	beq.n	800afc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afbc:	4313      	orrs	r3, r2
 800afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800afca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	6812      	ldr	r2, [r2, #0]
 800afd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afd4:	430b      	orrs	r3, r1
 800afd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	f023 010f 	bic.w	r1, r3, #15
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a95      	ldr	r2, [pc, #596]	; (800b248 <UART_SetConfig+0x2f4>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d125      	bne.n	800b044 <UART_SetConfig+0xf0>
 800aff8:	2003      	movs	r0, #3
 800affa:	f7ff ff3b 	bl	800ae74 <LL_RCC_GetUSARTClockSource>
 800affe:	4603      	mov	r3, r0
 800b000:	2b03      	cmp	r3, #3
 800b002:	d81b      	bhi.n	800b03c <UART_SetConfig+0xe8>
 800b004:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <UART_SetConfig+0xb8>)
 800b006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00a:	bf00      	nop
 800b00c:	0800b01d 	.word	0x0800b01d
 800b010:	0800b02d 	.word	0x0800b02d
 800b014:	0800b025 	.word	0x0800b025
 800b018:	0800b035 	.word	0x0800b035
 800b01c:	2301      	movs	r3, #1
 800b01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b022:	e042      	b.n	800b0aa <UART_SetConfig+0x156>
 800b024:	2302      	movs	r3, #2
 800b026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b02a:	e03e      	b.n	800b0aa <UART_SetConfig+0x156>
 800b02c:	2304      	movs	r3, #4
 800b02e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b032:	e03a      	b.n	800b0aa <UART_SetConfig+0x156>
 800b034:	2308      	movs	r3, #8
 800b036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b03a:	e036      	b.n	800b0aa <UART_SetConfig+0x156>
 800b03c:	2310      	movs	r3, #16
 800b03e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b042:	e032      	b.n	800b0aa <UART_SetConfig+0x156>
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a7e      	ldr	r2, [pc, #504]	; (800b244 <UART_SetConfig+0x2f0>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d12a      	bne.n	800b0a4 <UART_SetConfig+0x150>
 800b04e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b052:	f7ff ff1f 	bl	800ae94 <LL_RCC_GetLPUARTClockSource>
 800b056:	4603      	mov	r3, r0
 800b058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b05c:	d01a      	beq.n	800b094 <UART_SetConfig+0x140>
 800b05e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b062:	d81b      	bhi.n	800b09c <UART_SetConfig+0x148>
 800b064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b068:	d00c      	beq.n	800b084 <UART_SetConfig+0x130>
 800b06a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b06e:	d815      	bhi.n	800b09c <UART_SetConfig+0x148>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <UART_SetConfig+0x128>
 800b074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b078:	d008      	beq.n	800b08c <UART_SetConfig+0x138>
 800b07a:	e00f      	b.n	800b09c <UART_SetConfig+0x148>
 800b07c:	2300      	movs	r3, #0
 800b07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b082:	e012      	b.n	800b0aa <UART_SetConfig+0x156>
 800b084:	2302      	movs	r3, #2
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b08a:	e00e      	b.n	800b0aa <UART_SetConfig+0x156>
 800b08c:	2304      	movs	r3, #4
 800b08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b092:	e00a      	b.n	800b0aa <UART_SetConfig+0x156>
 800b094:	2308      	movs	r3, #8
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b09a:	e006      	b.n	800b0aa <UART_SetConfig+0x156>
 800b09c:	2310      	movs	r3, #16
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0a2:	e002      	b.n	800b0aa <UART_SetConfig+0x156>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a65      	ldr	r2, [pc, #404]	; (800b244 <UART_SetConfig+0x2f0>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	f040 8097 	bne.w	800b1e4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0ba:	2b08      	cmp	r3, #8
 800b0bc:	d823      	bhi.n	800b106 <UART_SetConfig+0x1b2>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <UART_SetConfig+0x170>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b0e9 	.word	0x0800b0e9
 800b0c8:	0800b107 	.word	0x0800b107
 800b0cc:	0800b0f1 	.word	0x0800b0f1
 800b0d0:	0800b107 	.word	0x0800b107
 800b0d4:	0800b0f7 	.word	0x0800b0f7
 800b0d8:	0800b107 	.word	0x0800b107
 800b0dc:	0800b107 	.word	0x0800b107
 800b0e0:	0800b107 	.word	0x0800b107
 800b0e4:	0800b0ff 	.word	0x0800b0ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0e8:	f7ff f8aa 	bl	800a240 <HAL_RCC_GetPCLK1Freq>
 800b0ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0ee:	e010      	b.n	800b112 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0f0:	4b56      	ldr	r3, [pc, #344]	; (800b24c <UART_SetConfig+0x2f8>)
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0f4:	e00d      	b.n	800b112 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0f6:	f7ff f823 	bl	800a140 <HAL_RCC_GetSysClockFreq>
 800b0fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0fc:	e009      	b.n	800b112 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b104:	e005      	b.n	800b112 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 812b 	beq.w	800b370 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	4a4c      	ldr	r2, [pc, #304]	; (800b250 <UART_SetConfig+0x2fc>)
 800b120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b124:	461a      	mov	r2, r3
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	fbb3 f3f2 	udiv	r3, r3, r2
 800b12c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	4413      	add	r3, r2
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d305      	bcc.n	800b14a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	429a      	cmp	r2, r3
 800b148:	d903      	bls.n	800b152 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b150:	e10e      	b.n	800b370 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	2200      	movs	r2, #0
 800b156:	60bb      	str	r3, [r7, #8]
 800b158:	60fa      	str	r2, [r7, #12]
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	4a3c      	ldr	r2, [pc, #240]	; (800b250 <UART_SetConfig+0x2fc>)
 800b160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b164:	b29b      	uxth	r3, r3
 800b166:	2200      	movs	r2, #0
 800b168:	603b      	str	r3, [r7, #0]
 800b16a:	607a      	str	r2, [r7, #4]
 800b16c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b174:	f7fb feee 	bl	8006f54 <__aeabi_uldivmod>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4610      	mov	r0, r2
 800b17e:	4619      	mov	r1, r3
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	020b      	lsls	r3, r1, #8
 800b18a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b18e:	0202      	lsls	r2, r0, #8
 800b190:	6979      	ldr	r1, [r7, #20]
 800b192:	6849      	ldr	r1, [r1, #4]
 800b194:	0849      	lsrs	r1, r1, #1
 800b196:	2000      	movs	r0, #0
 800b198:	460c      	mov	r4, r1
 800b19a:	4605      	mov	r5, r0
 800b19c:	eb12 0804 	adds.w	r8, r2, r4
 800b1a0:	eb43 0905 	adc.w	r9, r3, r5
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	469a      	mov	sl, r3
 800b1ac:	4693      	mov	fp, r2
 800b1ae:	4652      	mov	r2, sl
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7fb fecd 	bl	8006f54 <__aeabi_uldivmod>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4613      	mov	r3, r2
 800b1c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1c8:	d308      	bcc.n	800b1dc <UART_SetConfig+0x288>
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1d0:	d204      	bcs.n	800b1dc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6a3a      	ldr	r2, [r7, #32]
 800b1d8:	60da      	str	r2, [r3, #12]
 800b1da:	e0c9      	b.n	800b370 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b1e2:	e0c5      	b.n	800b370 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ec:	d16d      	bne.n	800b2ca <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b1ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	d82d      	bhi.n	800b254 <UART_SetConfig+0x300>
 800b1f8:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <UART_SetConfig+0x2ac>)
 800b1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fe:	bf00      	nop
 800b200:	0800b221 	.word	0x0800b221
 800b204:	0800b229 	.word	0x0800b229
 800b208:	0800b255 	.word	0x0800b255
 800b20c:	0800b22f 	.word	0x0800b22f
 800b210:	0800b255 	.word	0x0800b255
 800b214:	0800b255 	.word	0x0800b255
 800b218:	0800b255 	.word	0x0800b255
 800b21c:	0800b237 	.word	0x0800b237
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b220:	f7ff f824 	bl	800a26c <HAL_RCC_GetPCLK2Freq>
 800b224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b226:	e01b      	b.n	800b260 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b228:	4b08      	ldr	r3, [pc, #32]	; (800b24c <UART_SetConfig+0x2f8>)
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b22c:	e018      	b.n	800b260 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b22e:	f7fe ff87 	bl	800a140 <HAL_RCC_GetSysClockFreq>
 800b232:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b234:	e014      	b.n	800b260 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b23a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b23c:	e010      	b.n	800b260 <UART_SetConfig+0x30c>
 800b23e:	bf00      	nop
 800b240:	cfff69f3 	.word	0xcfff69f3
 800b244:	40008000 	.word	0x40008000
 800b248:	40013800 	.word	0x40013800
 800b24c:	00f42400 	.word	0x00f42400
 800b250:	08011610 	.word	0x08011610
      default:
        pclk = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b25e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 8084 	beq.w	800b370 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	4a4b      	ldr	r2, [pc, #300]	; (800b39c <UART_SetConfig+0x448>)
 800b26e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b272:	461a      	mov	r2, r3
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	fbb3 f3f2 	udiv	r3, r3, r2
 800b27a:	005a      	lsls	r2, r3, #1
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	085b      	lsrs	r3, r3, #1
 800b282:	441a      	add	r2, r3
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	2b0f      	cmp	r3, #15
 800b292:	d916      	bls.n	800b2c2 <UART_SetConfig+0x36e>
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b29a:	d212      	bcs.n	800b2c2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	f023 030f 	bic.w	r3, r3, #15
 800b2a4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	085b      	lsrs	r3, r3, #1
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	8bfb      	ldrh	r3, [r7, #30]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	8bfa      	ldrh	r2, [r7, #30]
 800b2be:	60da      	str	r2, [r3, #12]
 800b2c0:	e056      	b.n	800b370 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2c8:	e052      	b.n	800b370 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	2b07      	cmp	r3, #7
 800b2d2:	d822      	bhi.n	800b31a <UART_SetConfig+0x3c6>
 800b2d4:	a201      	add	r2, pc, #4	; (adr r2, 800b2dc <UART_SetConfig+0x388>)
 800b2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2da:	bf00      	nop
 800b2dc:	0800b2fd 	.word	0x0800b2fd
 800b2e0:	0800b305 	.word	0x0800b305
 800b2e4:	0800b31b 	.word	0x0800b31b
 800b2e8:	0800b30b 	.word	0x0800b30b
 800b2ec:	0800b31b 	.word	0x0800b31b
 800b2f0:	0800b31b 	.word	0x0800b31b
 800b2f4:	0800b31b 	.word	0x0800b31b
 800b2f8:	0800b313 	.word	0x0800b313
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2fc:	f7fe ffb6 	bl	800a26c <HAL_RCC_GetPCLK2Freq>
 800b300:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b302:	e010      	b.n	800b326 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b304:	4b26      	ldr	r3, [pc, #152]	; (800b3a0 <UART_SetConfig+0x44c>)
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b308:	e00d      	b.n	800b326 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b30a:	f7fe ff19 	bl	800a140 <HAL_RCC_GetSysClockFreq>
 800b30e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b310:	e009      	b.n	800b326 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b316:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b318:	e005      	b.n	800b326 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b324:	bf00      	nop
    }

    if (pclk != 0U)
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d021      	beq.n	800b370 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	4a1a      	ldr	r2, [pc, #104]	; (800b39c <UART_SetConfig+0x448>)
 800b332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b336:	461a      	mov	r2, r3
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	085b      	lsrs	r3, r3, #1
 800b344:	441a      	add	r2, r3
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b34e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	2b0f      	cmp	r3, #15
 800b354:	d909      	bls.n	800b36a <UART_SetConfig+0x416>
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b35c:	d205      	bcs.n	800b36a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	b29a      	uxth	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	60da      	str	r2, [r3, #12]
 800b368:	e002      	b.n	800b370 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2201      	movs	r2, #1
 800b374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2200      	movs	r2, #0
 800b384:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2200      	movs	r2, #0
 800b38a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b38c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b390:	4618      	mov	r0, r3
 800b392:	3730      	adds	r7, #48	; 0x30
 800b394:	46bd      	mov	sp, r7
 800b396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b39a:	bf00      	nop
 800b39c:	08011610 	.word	0x08011610
 800b3a0:	00f42400 	.word	0x00f42400

0800b3a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00a      	beq.n	800b3ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d2:	f003 0302 	and.w	r3, r3, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00a      	beq.n	800b412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b416:	f003 0308 	and.w	r3, r3, #8
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b438:	f003 0310 	and.w	r3, r3, #16
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00a      	beq.n	800b456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45a:	f003 0320 	and.w	r3, r3, #32
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00a      	beq.n	800b478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b480:	2b00      	cmp	r3, #0
 800b482:	d01a      	beq.n	800b4ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	430a      	orrs	r2, r1
 800b498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b49e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4a2:	d10a      	bne.n	800b4ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	605a      	str	r2, [r3, #4]
  }
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4f8:	f7fd f918 	bl	800872c <HAL_GetTick>
 800b4fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 0308 	and.w	r3, r3, #8
 800b508:	2b08      	cmp	r3, #8
 800b50a:	d10e      	bne.n	800b52a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b50c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f832 	bl	800b584 <UART_WaitOnFlagUntilTimeout>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e028      	b.n	800b57c <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b04      	cmp	r3, #4
 800b536:	d10e      	bne.n	800b556 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f81c 	bl	800b584 <UART_WaitOnFlagUntilTimeout>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e012      	b.n	800b57c <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2220      	movs	r2, #32
 800b55a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2220      	movs	r2, #32
 800b562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b09c      	sub	sp, #112	; 0x70
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b594:	e0a9      	b.n	800b6ea <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	f000 80a5 	beq.w	800b6ea <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5a0:	f7fd f8c4 	bl	800872c <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d302      	bcc.n	800b5b6 <UART_WaitOnFlagUntilTimeout+0x32>
 800b5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d140      	bne.n	800b638 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5ca:	667b      	str	r3, [r7, #100]	; 0x64
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5d6:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e6      	bne.n	800b5b6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	f023 0301 	bic.w	r3, r3, #1
 800b5fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3308      	adds	r3, #8
 800b606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b608:	64ba      	str	r2, [r7, #72]	; 0x48
 800b60a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b60e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2220      	movs	r2, #32
 800b620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2220      	movs	r2, #32
 800b628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e069      	b.n	800b70c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0304 	and.w	r3, r3, #4
 800b642:	2b00      	cmp	r3, #0
 800b644:	d051      	beq.n	800b6ea <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b654:	d149      	bne.n	800b6ea <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b65e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b674:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67e:	637b      	str	r3, [r7, #52]	; 0x34
 800b680:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e6      	bne.n	800b660 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3308      	adds	r3, #8
 800b698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f023 0301 	bic.w	r3, r3, #1
 800b6a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6b2:	623a      	str	r2, [r7, #32]
 800b6b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	69f9      	ldr	r1, [r7, #28]
 800b6b8:	6a3a      	ldr	r2, [r7, #32]
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e5      	bne.n	800b692 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e010      	b.n	800b70c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	69da      	ldr	r2, [r3, #28]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	bf0c      	ite	eq
 800b6fa:	2301      	moveq	r3, #1
 800b6fc:	2300      	movne	r3, #0
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	461a      	mov	r2, r3
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	429a      	cmp	r2, r3
 800b706:	f43f af46 	beq.w	800b596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3770      	adds	r7, #112	; 0x70
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b722:	2b01      	cmp	r3, #1
 800b724:	d101      	bne.n	800b72a <HAL_UARTEx_DisableFifoMode+0x16>
 800b726:	2302      	movs	r3, #2
 800b728:	e027      	b.n	800b77a <HAL_UARTEx_DisableFifoMode+0x66>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2224      	movs	r2, #36	; 0x24
 800b736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b758:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2220      	movs	r2, #32
 800b76c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b796:	2b01      	cmp	r3, #1
 800b798:	d101      	bne.n	800b79e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b79a:	2302      	movs	r3, #2
 800b79c:	e02d      	b.n	800b7fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2224      	movs	r2, #36	; 0x24
 800b7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0201 	bic.w	r2, r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	430a      	orrs	r2, r1
 800b7d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f850 	bl	800b880 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b812:	2b01      	cmp	r3, #1
 800b814:	d101      	bne.n	800b81a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b816:	2302      	movs	r3, #2
 800b818:	e02d      	b.n	800b876 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2224      	movs	r2, #36	; 0x24
 800b826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f022 0201 	bic.w	r2, r2, #1
 800b840:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f812 	bl	800b880 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2220      	movs	r2, #32
 800b868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d108      	bne.n	800b8a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b8a0:	e031      	b.n	800b906 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b8a2:	2308      	movs	r3, #8
 800b8a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b8a6:	2308      	movs	r3, #8
 800b8a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	0e5b      	lsrs	r3, r3, #25
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	0f5b      	lsrs	r3, r3, #29
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	f003 0307 	and.w	r3, r3, #7
 800b8c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
 800b8cc:	7b3a      	ldrb	r2, [r7, #12]
 800b8ce:	4911      	ldr	r1, [pc, #68]	; (800b914 <UARTEx_SetNbDataToProcess+0x94>)
 800b8d0:	5c8a      	ldrb	r2, [r1, r2]
 800b8d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8d6:	7b3a      	ldrb	r2, [r7, #12]
 800b8d8:	490f      	ldr	r1, [pc, #60]	; (800b918 <UARTEx_SetNbDataToProcess+0x98>)
 800b8da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	7b7a      	ldrb	r2, [r7, #13]
 800b8ec:	4909      	ldr	r1, [pc, #36]	; (800b914 <UARTEx_SetNbDataToProcess+0x94>)
 800b8ee:	5c8a      	ldrb	r2, [r1, r2]
 800b8f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8f4:	7b7a      	ldrb	r2, [r7, #13]
 800b8f6:	4908      	ldr	r1, [pc, #32]	; (800b918 <UARTEx_SetNbDataToProcess+0x98>)
 800b8f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	08011628 	.word	0x08011628
 800b918:	08011630 	.word	0x08011630

0800b91c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b924:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b928:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b930:	b29a      	uxth	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	b29b      	uxth	r3, r3
 800b936:	43db      	mvns	r3, r3
 800b938:	b29b      	uxth	r3, r3
 800b93a:	4013      	ands	r3, r2
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b952:	b084      	sub	sp, #16
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	f107 0014 	add.w	r0, r7, #20
 800b960:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	b004      	add	sp, #16
 800b992:	4770      	bx	lr

0800b994 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b99a:	1d3b      	adds	r3, r7, #4
 800b99c:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	f64f 4070 	movw	r0, #64624	; 0xfc70
 800b9a8:	f000 f920 	bl	800bbec <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	330b      	adds	r3, #11
 800b9b0:	78db      	ldrb	r3, [r3, #3]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b08b      	sub	sp, #44	; 0x2c
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b9e4:	4b4a      	ldr	r3, [pc, #296]	; (800bb10 <SHCI_GetWirelessFwInfo+0x154>)
 800b9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b9ec:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b9f6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a44      	ldr	r2, [pc, #272]	; (800bb14 <SHCI_GetWirelessFwInfo+0x158>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d10f      	bne.n	800ba28 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	e01a      	b.n	800ba5e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ba30:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ba34:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	0e1b      	lsrs	r3, r3, #24
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	b2da      	uxtb	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	0a1b      	lsrs	r3, r3, #8
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	091b      	lsrs	r3, r3, #4
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	f003 030f 	and.w	r3, r3, #15
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	0e1b      	lsrs	r3, r3, #24
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	0c1b      	lsrs	r3, r3, #16
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	b2da      	uxtb	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	0e1b      	lsrs	r3, r3, #24
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	0c1b      	lsrs	r3, r3, #16
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	0a1b      	lsrs	r3, r3, #8
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	0e1b      	lsrs	r3, r3, #24
 800baea:	b2da      	uxtb	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	0c1b      	lsrs	r3, r3, #16
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	372c      	adds	r7, #44	; 0x2c
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	58004000 	.word	0x58004000
 800bb14:	a94656b9 	.word	0xa94656b9

0800bb18 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	4a08      	ldr	r2, [pc, #32]	; (800bb48 <shci_init+0x30>)
 800bb28:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bb2a:	4a08      	ldr	r2, [pc, #32]	; (800bb4c <shci_init+0x34>)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bb30:	4806      	ldr	r0, [pc, #24]	; (800bb4c <shci_init+0x34>)
 800bb32:	f000 f911 	bl	800bd58 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 f894 	bl	800bc68 <TlInit>

  return;
 800bb40:	bf00      	nop
}
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000ff8 	.word	0x20000ff8
 800bb4c:	20000fd8 	.word	0x20000fd8

0800bb50 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bb56:	4822      	ldr	r0, [pc, #136]	; (800bbe0 <shci_user_evt_proc+0x90>)
 800bb58:	f000 faf2 	bl	800c140 <LST_is_empty>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d12b      	bne.n	800bbba <shci_user_evt_proc+0x6a>
 800bb62:	4b20      	ldr	r3, [pc, #128]	; (800bbe4 <shci_user_evt_proc+0x94>)
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d027      	beq.n	800bbba <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bb6a:	f107 030c 	add.w	r3, r7, #12
 800bb6e:	4619      	mov	r1, r3
 800bb70:	481b      	ldr	r0, [pc, #108]	; (800bbe0 <shci_user_evt_proc+0x90>)
 800bb72:	f000 fb74 	bl	800c25e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bb76:	4b1c      	ldr	r3, [pc, #112]	; (800bbe8 <shci_user_evt_proc+0x98>)
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00c      	beq.n	800bb98 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bb82:	2301      	movs	r3, #1
 800bb84:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bb86:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <shci_user_evt_proc+0x98>)
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	1d3a      	adds	r2, r7, #4
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bb90:	793a      	ldrb	r2, [r7, #4]
 800bb92:	4b14      	ldr	r3, [pc, #80]	; (800bbe4 <shci_user_evt_proc+0x94>)
 800bb94:	701a      	strb	r2, [r3, #0]
 800bb96:	e002      	b.n	800bb9e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bb98:	4b12      	ldr	r3, [pc, #72]	; (800bbe4 <shci_user_evt_proc+0x94>)
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bb9e:	4b11      	ldr	r3, [pc, #68]	; (800bbe4 <shci_user_evt_proc+0x94>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d004      	beq.n	800bbb0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 f9f1 	bl	800bf90 <TL_MM_EvtDone>
 800bbae:	e004      	b.n	800bbba <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	480a      	ldr	r0, [pc, #40]	; (800bbe0 <shci_user_evt_proc+0x90>)
 800bbb6:	f000 fae5 	bl	800c184 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bbba:	4809      	ldr	r0, [pc, #36]	; (800bbe0 <shci_user_evt_proc+0x90>)
 800bbbc:	f000 fac0 	bl	800c140 <LST_is_empty>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d107      	bne.n	800bbd6 <shci_user_evt_proc+0x86>
 800bbc6:	4b07      	ldr	r3, [pc, #28]	; (800bbe4 <shci_user_evt_proc+0x94>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bbce:	4804      	ldr	r0, [pc, #16]	; (800bbe0 <shci_user_evt_proc+0x90>)
 800bbd0:	f7fb fe58 	bl	8007884 <shci_notify_asynch_evt>
  }


  return;
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
}
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20000b18 	.word	0x20000b18
 800bbe4:	20000b28 	.word	0x20000b28
 800bbe8:	20000fd8 	.word	0x20000fd8

0800bbec <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60ba      	str	r2, [r7, #8]
 800bbf4:	607b      	str	r3, [r7, #4]
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	81fb      	strh	r3, [r7, #14]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f000 f864 	bl	800bccc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bc04:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <shci_send+0x74>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	89fa      	ldrh	r2, [r7, #14]
 800bc0a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bc0e:	4b14      	ldr	r3, [pc, #80]	; (800bc60 <shci_send+0x74>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	7b7a      	ldrb	r2, [r7, #13]
 800bc14:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bc16:	4b12      	ldr	r3, [pc, #72]	; (800bc60 <shci_send+0x74>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	330c      	adds	r3, #12
 800bc1c:	7b7a      	ldrb	r2, [r7, #13]
 800bc1e:	68b9      	ldr	r1, [r7, #8]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f004 f855 	bl	800fcd0 <memcpy>

  shciContext.io.Send(0,0);
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <shci_send+0x78>)
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bc30:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bc34:	f7fb fe3d 	bl	80078b2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f103 0008 	add.w	r0, r3, #8
 800bc3e:	4b08      	ldr	r3, [pc, #32]	; (800bc60 <shci_send+0x74>)
 800bc40:	6819      	ldr	r1, [r3, #0]
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <shci_send+0x74>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	789b      	ldrb	r3, [r3, #2]
 800bc48:	3303      	adds	r3, #3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f004 f840 	bl	800fcd0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bc50:	2001      	movs	r0, #1
 800bc52:	f000 f83b 	bl	800bccc <Cmd_SetStatus>

  return;
 800bc56:	bf00      	nop
}
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	20000b24 	.word	0x20000b24
 800bc64:	20000fd8 	.word	0x20000fd8

0800bc68 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bc70:	4a10      	ldr	r2, [pc, #64]	; (800bcb4 <TlInit+0x4c>)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bc76:	4810      	ldr	r0, [pc, #64]	; (800bcb8 <TlInit+0x50>)
 800bc78:	f000 fa52 	bl	800c120 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bc7c:	2001      	movs	r0, #1
 800bc7e:	f000 f825 	bl	800bccc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bc82:	4b0e      	ldr	r3, [pc, #56]	; (800bcbc <TlInit+0x54>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bc88:	4b0d      	ldr	r3, [pc, #52]	; (800bcc0 <TlInit+0x58>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bc94:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <TlInit+0x5c>)
 800bc96:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bc98:	4b0b      	ldr	r3, [pc, #44]	; (800bcc8 <TlInit+0x60>)
 800bc9a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bc9c:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <TlInit+0x58>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f107 020c 	add.w	r2, r7, #12
 800bca4:	4610      	mov	r0, r2
 800bca6:	4798      	blx	r3
  }

  return;
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
}
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20000b24 	.word	0x20000b24
 800bcb8:	20000b18 	.word	0x20000b18
 800bcbc:	20000b28 	.word	0x20000b28
 800bcc0:	20000fd8 	.word	0x20000fd8
 800bcc4:	0800bd1d 	.word	0x0800bd1d
 800bcc8:	0800bd35 	.word	0x0800bd35

0800bccc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10b      	bne.n	800bcf4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	; (800bd14 <Cmd_SetStatus+0x48>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bce4:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <Cmd_SetStatus+0x48>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2000      	movs	r0, #0
 800bcea:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <Cmd_SetStatus+0x4c>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800bcf2:	e00b      	b.n	800bd0c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800bcf4:	4b08      	ldr	r3, [pc, #32]	; (800bd18 <Cmd_SetStatus+0x4c>)
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800bcfa:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <Cmd_SetStatus+0x48>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d004      	beq.n	800bd0c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800bd02:	4b04      	ldr	r3, [pc, #16]	; (800bd14 <Cmd_SetStatus+0x48>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2001      	movs	r0, #1
 800bd08:	4798      	blx	r3
  return;
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
}
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20000ff8 	.word	0x20000ff8
 800bd18:	20000b20 	.word	0x20000b20

0800bd1c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800bd24:	2000      	movs	r0, #0
 800bd26:	f7fb fdb9 	bl	800789c <shci_cmd_resp_release>

  return;
 800bd2a:	bf00      	nop
}
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	4805      	ldr	r0, [pc, #20]	; (800bd54 <TlUserEvtReceived+0x20>)
 800bd40:	f000 fa46 	bl	800c1d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bd44:	4803      	ldr	r0, [pc, #12]	; (800bd54 <TlUserEvtReceived+0x20>)
 800bd46:	f7fb fd9d 	bl	8007884 <shci_notify_asynch_evt>

  return;
 800bd4a:	bf00      	nop
}
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	20000b18 	.word	0x20000b18

0800bd58 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a05      	ldr	r2, [pc, #20]	; (800bd78 <shci_register_io_bus+0x20>)
 800bd64:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a04      	ldr	r2, [pc, #16]	; (800bd7c <shci_register_io_bus+0x24>)
 800bd6a:	611a      	str	r2, [r3, #16]

  return;
 800bd6c:	bf00      	nop
}
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	0800be01 	.word	0x0800be01
 800bd7c:	0800be55 	.word	0x0800be55

0800bd80 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800bd84:	f003 fc52 	bl	800f62c <HW_IPCC_Enable>

  return;
 800bd88:	bf00      	nop
}
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <TL_Init>:


void TL_Init( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800bd90:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <TL_Init+0x48>)
 800bd92:	4a11      	ldr	r2, [pc, #68]	; (800bdd8 <TL_Init+0x4c>)
 800bd94:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800bd96:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <TL_Init+0x48>)
 800bd98:	4a10      	ldr	r2, [pc, #64]	; (800bddc <TL_Init+0x50>)
 800bd9a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800bd9c:	4b0d      	ldr	r3, [pc, #52]	; (800bdd4 <TL_Init+0x48>)
 800bd9e:	4a10      	ldr	r2, [pc, #64]	; (800bde0 <TL_Init+0x54>)
 800bda0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800bda2:	4b0c      	ldr	r3, [pc, #48]	; (800bdd4 <TL_Init+0x48>)
 800bda4:	4a0f      	ldr	r2, [pc, #60]	; (800bde4 <TL_Init+0x58>)
 800bda6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <TL_Init+0x48>)
 800bdaa:	4a0f      	ldr	r2, [pc, #60]	; (800bde8 <TL_Init+0x5c>)
 800bdac:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800bdae:	4b09      	ldr	r3, [pc, #36]	; (800bdd4 <TL_Init+0x48>)
 800bdb0:	4a0e      	ldr	r2, [pc, #56]	; (800bdec <TL_Init+0x60>)
 800bdb2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800bdb4:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <TL_Init+0x48>)
 800bdb6:	4a0e      	ldr	r2, [pc, #56]	; (800bdf0 <TL_Init+0x64>)
 800bdb8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800bdba:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <TL_Init+0x48>)
 800bdbc:	4a0d      	ldr	r2, [pc, #52]	; (800bdf4 <TL_Init+0x68>)
 800bdbe:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800bdc0:	4b04      	ldr	r3, [pc, #16]	; (800bdd4 <TL_Init+0x48>)
 800bdc2:	4a0d      	ldr	r2, [pc, #52]	; (800bdf8 <TL_Init+0x6c>)
 800bdc4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800bdc6:	4b03      	ldr	r3, [pc, #12]	; (800bdd4 <TL_Init+0x48>)
 800bdc8:	4a0c      	ldr	r2, [pc, #48]	; (800bdfc <TL_Init+0x70>)
 800bdca:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800bdcc:	f003 fc42 	bl	800f654 <HW_IPCC_Init>

  return;
 800bdd0:	bf00      	nop
}
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20030000 	.word	0x20030000
 800bdd8:	20030028 	.word	0x20030028
 800bddc:	20030048 	.word	0x20030048
 800bde0:	20030058 	.word	0x20030058
 800bde4:	20030068 	.word	0x20030068
 800bde8:	20030070 	.word	0x20030070
 800bdec:	20030078 	.word	0x20030078
 800bdf0:	20030080 	.word	0x20030080
 800bdf4:	2003009c 	.word	0x2003009c
 800bdf8:	200300a0 	.word	0x200300a0
 800bdfc:	200300ac 	.word	0x200300ac

0800be00 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800be0c:	480d      	ldr	r0, [pc, #52]	; (800be44 <TL_SYS_Init+0x44>)
 800be0e:	f000 f987 	bl	800c120 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800be12:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <TL_SYS_Init+0x48>)
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	689a      	ldr	r2, [r3, #8]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4a08      	ldr	r2, [pc, #32]	; (800be44 <TL_SYS_Init+0x44>)
 800be24:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800be26:	f003 fc2b 	bl	800f680 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a07      	ldr	r2, [pc, #28]	; (800be4c <TL_SYS_Init+0x4c>)
 800be30:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	4a06      	ldr	r2, [pc, #24]	; (800be50 <TL_SYS_Init+0x50>)
 800be38:	6013      	str	r3, [r2, #0]

  return 0;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	200300d0 	.word	0x200300d0
 800be48:	20030000 	.word	0x20030000
 800be4c:	20001004 	.word	0x20001004
 800be50:	20001008 	.word	0x20001008

0800be54 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800be60:	4b09      	ldr	r3, [pc, #36]	; (800be88 <TL_SYS_SendCmd+0x34>)
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2210      	movs	r2, #16
 800be68:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800be6a:	4b07      	ldr	r3, [pc, #28]	; (800be88 <TL_SYS_SendCmd+0x34>)
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4619      	mov	r1, r3
 800be72:	2004      	movs	r0, #4
 800be74:	f000 f8d6 	bl	800c024 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800be78:	f003 fc0c 	bl	800f694 <HW_IPCC_SYS_SendCmd>

  return 0;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20030000 	.word	0x20030000

0800be8c <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 800be94:	4b0a      	ldr	r3, [pc, #40]	; (800bec0 <TL_ZIGBEE_Init+0x34>)
 800be96:	69db      	ldr	r3, [r3, #28]
 800be98:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 800beb2:	f003 fbfd 	bl	800f6b0 <HW_IPCC_ZIGBEE_Init>

  return;
 800beb6:	bf00      	nop
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20030000 	.word	0x20030000

0800bec4 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	2208      	movs	r2, #8
 800bed0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 800bed2:	f003 fbfb 	bl	800f6cc <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 800bed6:	bf00      	nop
}
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20030000 	.word	0x20030000

0800bee0 <TL_ZIGBEE_SendM4AckToM0Notify>:
  return;
}

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800bee4:	4b04      	ldr	r3, [pc, #16]	; (800bef8 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800bee6:	69db      	ldr	r3, [r3, #28]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	220d      	movs	r2, #13
 800beec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 800beee:	f003 fbfb 	bl	800f6e8 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 800bef2:	bf00      	nop
}
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20030000 	.word	0x20030000

0800befc <TL_ZIGBEE_SendM4AckToM0Request>:
  return;
}

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800bf00:	4b04      	ldr	r3, [pc, #16]	; (800bf14 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 800bf02:	69db      	ldr	r3, [r3, #28]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	220d      	movs	r2, #13
 800bf08:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 800bf0a:	f003 fbfb 	bl	800f704 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 800bf0e:	bf00      	nop
}
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20030000 	.word	0x20030000

0800bf18 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800bf20:	4817      	ldr	r0, [pc, #92]	; (800bf80 <TL_MM_Init+0x68>)
 800bf22:	f000 f8fd 	bl	800c120 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800bf26:	4817      	ldr	r0, [pc, #92]	; (800bf84 <TL_MM_Init+0x6c>)
 800bf28:	f000 f8fa 	bl	800c120 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800bf2c:	4b16      	ldr	r3, [pc, #88]	; (800bf88 <TL_MM_Init+0x70>)
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	4a16      	ldr	r2, [pc, #88]	; (800bf8c <TL_MM_Init+0x74>)
 800bf32:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800bf34:	4b15      	ldr	r3, [pc, #84]	; (800bf8c <TL_MM_Init+0x74>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6892      	ldr	r2, [r2, #8]
 800bf3c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800bf3e:	4b13      	ldr	r3, [pc, #76]	; (800bf8c <TL_MM_Init+0x74>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	68d2      	ldr	r2, [r2, #12]
 800bf46:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800bf48:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <TL_MM_Init+0x74>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a0c      	ldr	r2, [pc, #48]	; (800bf80 <TL_MM_Init+0x68>)
 800bf4e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <TL_MM_Init+0x74>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800bf5a:	4b0c      	ldr	r3, [pc, #48]	; (800bf8c <TL_MM_Init+0x74>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	6852      	ldr	r2, [r2, #4]
 800bf62:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800bf64:	4b09      	ldr	r3, [pc, #36]	; (800bf8c <TL_MM_Init+0x74>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	6912      	ldr	r2, [r2, #16]
 800bf6c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800bf6e:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <TL_MM_Init+0x74>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6952      	ldr	r2, [r2, #20]
 800bf76:	619a      	str	r2, [r3, #24]

  return;
 800bf78:	bf00      	nop
}
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	200300b8 	.word	0x200300b8
 800bf84:	20000ffc 	.word	0x20000ffc
 800bf88:	20030000 	.word	0x20030000
 800bf8c:	2000100c 	.word	0x2000100c

0800bf90 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	4807      	ldr	r0, [pc, #28]	; (800bfb8 <TL_MM_EvtDone+0x28>)
 800bf9c:	f000 f918 	bl	800c1d0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	f000 f83e 	bl	800c024 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bfa8:	4804      	ldr	r0, [pc, #16]	; (800bfbc <TL_MM_EvtDone+0x2c>)
 800bfaa:	f003 fbb9 	bl	800f720 <HW_IPCC_MM_SendFreeBuf>

  return;
 800bfae:	bf00      	nop
}
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000ffc 	.word	0x20000ffc
 800bfbc:	0800bfc1 	.word	0x0800bfc1

0800bfc0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bfc6:	e00c      	b.n	800bfe2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bfc8:	1d3b      	adds	r3, r7, #4
 800bfca:	4619      	mov	r1, r3
 800bfcc:	480a      	ldr	r0, [pc, #40]	; (800bff8 <SendFreeBuf+0x38>)
 800bfce:	f000 f946 	bl	800c25e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <SendFreeBuf+0x3c>)
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 f8f7 	bl	800c1d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bfe2:	4805      	ldr	r0, [pc, #20]	; (800bff8 <SendFreeBuf+0x38>)
 800bfe4:	f000 f8ac 	bl	800c140 <LST_is_empty>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d0ec      	beq.n	800bfc8 <SendFreeBuf+0x8>
  }

  return;
 800bfee:	bf00      	nop
}
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20000ffc 	.word	0x20000ffc
 800bffc:	20030000 	.word	0x20030000

0800c000 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c004:	4805      	ldr	r0, [pc, #20]	; (800c01c <TL_TRACES_Init+0x1c>)
 800c006:	f000 f88b 	bl	800c120 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <TL_TRACES_Init+0x20>)
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	4a03      	ldr	r2, [pc, #12]	; (800c01c <TL_TRACES_Init+0x1c>)
 800c010:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c012:	f003 fba7 	bl	800f764 <HW_IPCC_TRACES_Init>

  return;
 800c016:	bf00      	nop
}
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	200300c0 	.word	0x200300c0
 800c020:	20030000 	.word	0x20030000

0800c024 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	6039      	str	r1, [r7, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	2b06      	cmp	r3, #6
 800c034:	d845      	bhi.n	800c0c2 <OutputDbgTrace+0x9e>
 800c036:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <OutputDbgTrace+0x18>)
 800c038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03c:	0800c059 	.word	0x0800c059
 800c040:	0800c07d 	.word	0x0800c07d
 800c044:	0800c083 	.word	0x0800c083
 800c048:	0800c097 	.word	0x0800c097
 800c04c:	0800c0a3 	.word	0x0800c0a3
 800c050:	0800c0a9 	.word	0x0800c0a9
 800c054:	0800c0b7 	.word	0x0800c0b7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	7a5b      	ldrb	r3, [r3, #9]
 800c060:	2bff      	cmp	r3, #255	; 0xff
 800c062:	d005      	beq.n	800c070 <OutputDbgTrace+0x4c>
 800c064:	2bff      	cmp	r3, #255	; 0xff
 800c066:	dc05      	bgt.n	800c074 <OutputDbgTrace+0x50>
 800c068:	2b0e      	cmp	r3, #14
 800c06a:	d005      	beq.n	800c078 <OutputDbgTrace+0x54>
 800c06c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c06e:	e001      	b.n	800c074 <OutputDbgTrace+0x50>
          break;
 800c070:	bf00      	nop
 800c072:	e027      	b.n	800c0c4 <OutputDbgTrace+0xa0>
          break;
 800c074:	bf00      	nop
 800c076:	e025      	b.n	800c0c4 <OutputDbgTrace+0xa0>
          break;
 800c078:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c07a:	e023      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c080:	e020      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	7a5b      	ldrb	r3, [r3, #9]
 800c08a:	2b0e      	cmp	r3, #14
 800c08c:	d001      	beq.n	800c092 <OutputDbgTrace+0x6e>
 800c08e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c090:	e000      	b.n	800c094 <OutputDbgTrace+0x70>
          break;
 800c092:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c094:	e016      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	7a5b      	ldrb	r3, [r3, #9]
 800c09e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c0a0:	e010      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c0a6:	e00d      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	7a5b      	ldrb	r3, [r3, #9]
 800c0b0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c0b2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c0b4:	e006      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	7a5b      	ldrb	r3, [r3, #9]
 800c0be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c0c0:	e000      	b.n	800c0c4 <OutputDbgTrace+0xa0>

    default:
      break;
 800c0c2:	bf00      	nop
  }

  return;
 800c0c4:	bf00      	nop
}
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c0da:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <OTP_Read+0x48>)
 800c0dc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c0de:	e002      	b.n	800c0e6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	3b08      	subs	r3, #8
 800c0e4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3307      	adds	r3, #7
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	79fa      	ldrb	r2, [r7, #7]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d003      	beq.n	800c0fa <OTP_Read+0x2a>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	4a09      	ldr	r2, [pc, #36]	; (800c11c <OTP_Read+0x4c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d1f2      	bne.n	800c0e0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3307      	adds	r3, #7
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	79fa      	ldrb	r2, [r7, #7]
 800c102:	429a      	cmp	r2, r3
 800c104:	d001      	beq.n	800c10a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c106:	2300      	movs	r3, #0
 800c108:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	1fff73f8 	.word	0x1fff73f8
 800c11c:	1fff7000 	.word	0x1fff7000

0800c120 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	605a      	str	r2, [r3, #4]
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c140:	b480      	push	{r7}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c148:	f3ef 8310 	mrs	r3, PRIMASK
 800c14c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c14e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c152:	b672      	cpsid	i
}
 800c154:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d102      	bne.n	800c166 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c160:	2301      	movs	r3, #1
 800c162:	75fb      	strb	r3, [r7, #23]
 800c164:	e001      	b.n	800c16a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c166:	2300      	movs	r3, #0
 800c168:	75fb      	strb	r3, [r7, #23]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f383 8810 	msr	PRIMASK, r3
}
 800c174:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c176:	7dfb      	ldrb	r3, [r7, #23]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c184:	b480      	push	{r7}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c18e:	f3ef 8310 	mrs	r3, PRIMASK
 800c192:	60fb      	str	r3, [r7, #12]
  return(result);
 800c194:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c196:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c198:	b672      	cpsid	i
}
 800c19a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	605a      	str	r2, [r3, #4]
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f383 8810 	msr	PRIMASK, r3
}
 800c1c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c1c4:	bf00      	nop
 800c1c6:	371c      	adds	r7, #28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1da:	f3ef 8310 	mrs	r3, PRIMASK
 800c1de:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c1e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1e4:	b672      	cpsid	i
}
 800c1e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685a      	ldr	r2, [r3, #4]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c210:	bf00      	nop
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c224:	f3ef 8310 	mrs	r3, PRIMASK
 800c228:	60fb      	str	r3, [r7, #12]
  return(result);
 800c22a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c22c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c22e:	b672      	cpsid	i
}
 800c230:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	6812      	ldr	r2, [r2, #0]
 800c23a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	6852      	ldr	r2, [r2, #4]
 800c244:	605a      	str	r2, [r3, #4]
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	f383 8810 	msr	PRIMASK, r3
}
 800c250:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c252:	bf00      	nop
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b086      	sub	sp, #24
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c268:	f3ef 8310 	mrs	r3, PRIMASK
 800c26c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c26e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c272:	b672      	cpsid	i
}
 800c274:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff ffca 	bl	800c21c <LST_remove_node>
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f383 8810 	msr	PRIMASK, r3
}
 800c292:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c294:	bf00      	nop
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
 800c2ac:	e00a      	b.n	800c2c4 <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	441a      	add	r2, r3
 800c2b4:	68f9      	ldr	r1, [r7, #12]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	440b      	add	r3, r1
 800c2ba:	7812      	ldrb	r2, [r2, #0]
 800c2bc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d3f0      	bcc.n	800c2ae <zb_ipc_m4_memcpy2+0x12>
    }
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	371c      	adds	r7, #28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 800c2e4:	200c      	movs	r0, #12
 800c2e6:	f003 fce3 	bl	800fcb0 <malloc>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00a      	beq.n	800c30a <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 800c2f4:	220c      	movs	r2, #12
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f003 fcf7 	bl	800fcec <memset>
        info->callback = callback;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	605a      	str	r2, [r3, #4]
    }
    return info;
 800c30a:	68fb      	ldr	r3, [r7, #12]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
    free(info);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f003 fccf 	bl	800fcc0 <free>
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800c332:	f002 ff49 	bl	800f1c8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800c336:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d006      	beq.n	800c34e <zb_ipc_m4_get_retval+0x22>
 800c340:	4b09      	ldr	r3, [pc, #36]	; (800c368 <zb_ipc_m4_get_retval+0x3c>)
 800c342:	4a0a      	ldr	r2, [pc, #40]	; (800c36c <zb_ipc_m4_get_retval+0x40>)
 800c344:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800c348:	4809      	ldr	r0, [pc, #36]	; (800c370 <zb_ipc_m4_get_retval+0x44>)
 800c34a:	f003 fc57 	bl	800fbfc <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f103 0108 	add.w	r1, r3, #8
 800c354:	463b      	mov	r3, r7
 800c356:	2204      	movs	r2, #4
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff ff9f 	bl	800c29c <zb_ipc_m4_memcpy2>
    return retval;
 800c35e:	683b      	ldr	r3, [r7, #0]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	080110bc 	.word	0x080110bc
 800c36c:	0801186c 	.word	0x0801186c
 800c370:	080110d0 	.word	0x080110d0

0800c374 <ZbHeapMaxAlloc>:

unsigned int
ZbHeapMaxAlloc(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
    return ZB_HEAP_MAX_ALLOC;
 800c378:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <ZbInit>:

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 800c396:	4b24      	ldr	r3, [pc, #144]	; (800c428 <ZbInit+0xa0>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <ZbInit+0x1a>
        return NULL;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e03d      	b.n	800c41e <ZbInit+0x96>
    }
    Pre_ZigbeeCmdProcessing();
 800c3a2:	f002 ff59 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c3a6:	f002 ff03 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c3aa:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f042 020a 	orr.w	r2, r2, #10
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	705a      	strb	r2, [r3, #1]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	709a      	strb	r2, [r3, #2]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f042 0204 	orr.w	r2, r2, #4
 800c3ca:	711a      	strb	r2, [r3, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	715a      	strb	r2, [r3, #5]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	719a      	strb	r2, [r3, #6]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	3308      	adds	r3, #8
 800c3dc:	f107 0108 	add.w	r1, r7, #8
 800c3e0:	2208      	movs	r2, #8
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff ff5a 	bl	800c29c <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800c3f4:	f002 ff0c 	bl	800f210 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 800c3f8:	f7ff ff98 	bl	800c32c <zb_ipc_m4_get_retval>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	461a      	mov	r2, r3
 800c400:	4b09      	ldr	r3, [pc, #36]	; (800c428 <ZbInit+0xa0>)
 800c402:	601a      	str	r2, [r3, #0]
    if (setLogging != NULL) {
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <ZbInit+0x92>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	4a06      	ldr	r2, [pc, #24]	; (800c428 <ZbInit+0xa0>)
 800c410:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a04      	ldr	r2, [pc, #16]	; (800c428 <ZbInit+0xa0>)
 800c418:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 800c41a:	4b03      	ldr	r3, [pc, #12]	; (800c428 <ZbInit+0xa0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20001024 	.word	0x20001024

0800c42c <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800c438:	f002 ff0e 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c43c:	f002 feb8 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c440:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2200      	movs	r2, #0
 800c446:	f042 0213 	orr.w	r2, r2, #19
 800c44a:	701a      	strb	r2, [r3, #0]
 800c44c:	2200      	movs	r2, #0
 800c44e:	705a      	strb	r2, [r3, #1]
 800c450:	2200      	movs	r2, #0
 800c452:	709a      	strb	r2, [r3, #2]
 800c454:	2200      	movs	r2, #0
 800c456:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f042 0202 	orr.w	r2, r2, #2
 800c460:	711a      	strb	r2, [r3, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	715a      	strb	r2, [r3, #5]
 800c466:	2200      	movs	r2, #0
 800c468:	719a      	strb	r2, [r3, #6]
 800c46a:	2200      	movs	r2, #0
 800c46c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 800c474:	4b0b      	ldr	r3, [pc, #44]	; (800c4a4 <ZbSetLogging+0x78>)
 800c476:	7b1b      	ldrb	r3, [r3, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <ZbSetLogging+0x56>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <ZbSetLogging+0x5a>
 800c482:	2201      	movs	r2, #1
 800c484:	e000      	b.n	800c488 <ZbSetLogging+0x5c>
 800c486:	2200      	movs	r2, #0
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800c48c:	f002 fec0 	bl	800f210 <ZIGBEE_CmdTransfer>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 800c490:	4a04      	ldr	r2, [pc, #16]	; (800c4a4 <ZbSetLogging+0x78>)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 800c496:	4a03      	ldr	r2, [pc, #12]	; (800c4a4 <ZbSetLogging+0x78>)
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	6093      	str	r3, [r2, #8]
}
 800c49c:	bf00      	nop
 800c49e:	3718      	adds	r7, #24
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	20001024 	.word	0x20001024

0800c4a8 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 800c4b0:	f04f 0200 	mov.w	r2, #0
 800c4b4:	f04f 0300 	mov.w	r3, #0
 800c4b8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 800c4bc:	f002 fecc 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c4c0:	f002 fe76 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c4c4:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f042 020e 	orr.w	r2, r2, #14
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	705a      	strb	r2, [r3, #1]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	709a      	strb	r2, [r3, #2]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	711a      	strb	r2, [r3, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	715a      	strb	r2, [r3, #5]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	719a      	strb	r2, [r3, #6]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800c4ee:	f002 fe8f 	bl	800f210 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800c4f2:	f002 fe69 	bl	800f1c8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800c4f6:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d006      	beq.n	800c50e <ZbExtendedAddress+0x66>
 800c500:	4b0b      	ldr	r3, [pc, #44]	; (800c530 <ZbExtendedAddress+0x88>)
 800c502:	4a0c      	ldr	r2, [pc, #48]	; (800c534 <ZbExtendedAddress+0x8c>)
 800c504:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800c508:	480b      	ldr	r0, [pc, #44]	; (800c538 <ZbExtendedAddress+0x90>)
 800c50a:	f003 fb77 	bl	800fbfc <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f103 0108 	add.w	r1, r3, #8
 800c514:	f107 0308 	add.w	r3, r7, #8
 800c518:	2208      	movs	r2, #8
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7ff febe 	bl	800c29c <zb_ipc_m4_memcpy2>
    return ext_addr;
 800c520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800c524:	4610      	mov	r0, r2
 800c526:	4619      	mov	r1, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	08011110 	.word	0x08011110
 800c534:	08011884 	.word	0x08011884
 800c538:	080110d0 	.word	0x080110d0

0800c53c <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 800c548:	f107 020e 	add.w	r2, r7, #14
 800c54c:	2302      	movs	r3, #2
 800c54e:	2196      	movs	r1, #150	; 0x96
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fbf3 	bl	800cd3c <ZbNwkGet>
    return nwkAddr;
 800c556:	89fb      	ldrh	r3, [r7, #14]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <ZbStartupConfigGetProDefaults>:
    ZIGBEE_CmdTransfer();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800c568:	f002 fe76 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c56c:	f002 fe20 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c570:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	f042 021b 	orr.w	r2, r2, #27
 800c57a:	701a      	strb	r2, [r3, #0]
 800c57c:	2200      	movs	r2, #0
 800c57e:	705a      	strb	r2, [r3, #1]
 800c580:	2200      	movs	r2, #0
 800c582:	709a      	strb	r2, [r3, #2]
 800c584:	2200      	movs	r2, #0
 800c586:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f042 0201 	orr.w	r2, r2, #1
 800c590:	711a      	strb	r2, [r3, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	715a      	strb	r2, [r3, #5]
 800c596:	2200      	movs	r2, #0
 800c598:	719a      	strb	r2, [r3, #6]
 800c59a:	2200      	movs	r2, #0
 800c59c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800c5a4:	f002 fe34 	bl	800f210 <ZIGBEE_CmdTransfer>
}
 800c5a8:	bf00      	nop
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff fe8a 	bl	800c2da <zb_ipc_m4_cb_info_alloc>
 800c5c6:	6178      	str	r0, [r7, #20]
    if (info == NULL) {
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 800c5ce:	2370      	movs	r3, #112	; 0x70
 800c5d0:	e02d      	b.n	800c62e <ZbStartup+0x7e>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	4b16      	ldr	r3, [pc, #88]	; (800c638 <ZbStartup+0x88>)
 800c5de:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 800c5e0:	f002 fe3a 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c5e4:	f002 fde4 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c5e8:	6138      	str	r0, [r7, #16]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f042 021c 	orr.w	r2, r2, #28
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	705a      	strb	r2, [r3, #1]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	709a      	strb	r2, [r3, #2]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	2200      	movs	r2, #0
 800c604:	f042 0202 	orr.w	r2, r2, #2
 800c608:	711a      	strb	r2, [r3, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	715a      	strb	r2, [r3, #5]
 800c60e:	2200      	movs	r2, #0
 800c610:	719a      	strb	r2, [r3, #6]
 800c612:	2200      	movs	r2, #0
 800c614:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800c622:	f002 fdf5 	bl	800f210 <ZIGBEE_CmdTransfer>
    return (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 800c626:	f7ff fe81 	bl	800c32c <zb_ipc_m4_get_retval>
 800c62a:	4603      	mov	r3, r0
 800c62c:	b2db      	uxtb	r3, r3
    /* Followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	20001010 	.word	0x20001010

0800c63c <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08a      	sub	sp, #40	; 0x28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	460b      	mov	r3, r1
 800c64a:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 800c64c:	897b      	ldrh	r3, [r7, #10]
 800c64e:	82bb      	strh	r3, [r7, #20]
    bdbGetReq.attr = attrPtr;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	61bb      	str	r3, [r7, #24]
    bdbGetReq.attrLength = attrSz;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrIndex = attrIndex;
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 800c65c:	f002 fdfc 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c660:	f002 fda6 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c664:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 800c666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c668:	2200      	movs	r2, #0
 800c66a:	701a      	strb	r2, [r3, #0]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f042 0202 	orr.w	r2, r2, #2
 800c672:	705a      	strb	r2, [r3, #1]
 800c674:	2200      	movs	r2, #0
 800c676:	709a      	strb	r2, [r3, #2]
 800c678:	2200      	movs	r2, #0
 800c67a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	2200      	movs	r2, #0
 800c680:	f042 0202 	orr.w	r2, r2, #2
 800c684:	711a      	strb	r2, [r3, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	715a      	strb	r2, [r3, #5]
 800c68a:	2200      	movs	r2, #0
 800c68c:	719a      	strb	r2, [r3, #6]
 800c68e:	2200      	movs	r2, #0
 800c690:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 800c692:	f107 0214 	add.w	r2, r7, #20
 800c696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c698:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 800c69a:	f107 0210 	add.w	r2, r7, #16
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800c6a2:	f002 fdb5 	bl	800f210 <ZIGBEE_CmdTransfer>
    return bdbGetConf.status;
 800c6a6:	7c3b      	ldrb	r3, [r7, #16]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3728      	adds	r7, #40	; 0x28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff fe0a 	bl	800c2da <zb_ipc_m4_cb_info_alloc>
 800c6c6:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 800c6ce:	2370      	movs	r3, #112	; 0x70
 800c6d0:	e02f      	b.n	800c732 <ZbApsdeDataReqCallback+0x82>
    }
    Pre_ZigbeeCmdProcessing();
 800c6d2:	f002 fdc1 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c6d6:	f002 fd6b 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c6da:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f042 0204 	orr.w	r2, r2, #4
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f042 0202 	orr.w	r2, r2, #2
 800c6ec:	705a      	strb	r2, [r3, #1]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	709a      	strb	r2, [r3, #2]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f042 0202 	orr.w	r2, r2, #2
 800c6fe:	711a      	strb	r2, [r3, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	715a      	strb	r2, [r3, #5]
 800c704:	2200      	movs	r2, #0
 800c706:	719a      	strb	r2, [r3, #6]
 800c708:	2200      	movs	r2, #0
 800c70a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800c712:	69fa      	ldr	r2, [r7, #28]
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800c718:	f002 fd7a 	bl	800f210 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    retval = zb_ipc_m4_get_retval();
 800c71c:	f7ff fe06 	bl	800c32c <zb_ipc_m4_get_retval>
 800c720:	6178      	str	r0, [r7, #20]
    if (retval != 0x00) {
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <ZbApsdeDataReqCallback+0x7e>
        zb_ipc_m4_cb_info_free(info);
 800c728:	69f8      	ldr	r0, [r7, #28]
 800c72a:	f7ff fdf3 	bl	800c314 <zb_ipc_m4_cb_info_free>
    }
    return (enum ZbStatusCodeT)retval;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	b2db      	uxtb	r3, r3
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 800c732:	4618      	mov	r0, r3
 800c734:	3720      	adds	r7, #32
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <ZbApsEndpointProfile>:
    return zb_ipc_m4_get_retval() != 0U ? true : false;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	460b      	mov	r3, r1
 800c744:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800c746:	f002 fd87 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c74a:	f002 fd31 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c74e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f042 020d 	orr.w	r2, r2, #13
 800c758:	701a      	strb	r2, [r3, #0]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f042 0202 	orr.w	r2, r2, #2
 800c760:	705a      	strb	r2, [r3, #1]
 800c762:	2200      	movs	r2, #0
 800c764:	709a      	strb	r2, [r3, #2]
 800c766:	2200      	movs	r2, #0
 800c768:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f042 0201 	orr.w	r2, r2, #1
 800c772:	711a      	strb	r2, [r3, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	715a      	strb	r2, [r3, #5]
 800c778:	2200      	movs	r2, #0
 800c77a:	719a      	strb	r2, [r3, #6]
 800c77c:	2200      	movs	r2, #0
 800c77e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 800c780:	78fa      	ldrb	r2, [r7, #3]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800c786:	f002 fd43 	bl	800f210 <ZIGBEE_CmdTransfer>
    return (uint16_t)zb_ipc_m4_get_retval();
 800c78a:	f7ff fdcf 	bl	800c32c <zb_ipc_m4_get_retval>
 800c78e:	4603      	mov	r3, r0
 800c790:	b29b      	uxth	r3, r3
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b083      	sub	sp, #12
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <ZbApsAddrIsBcast+0x14>
        return true;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e012      	b.n	800c7d4 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d10d      	bne.n	800c7d2 <ZbApsAddrIsBcast+0x38>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	88db      	ldrh	r3, [r3, #6]
 800c7ba:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d907      	bls.n	800c7d2 <ZbApsAddrIsBcast+0x38>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	88db      	ldrh	r3, [r3, #6]
 800c7c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d001      	beq.n	800c7d2 <ZbApsAddrIsBcast+0x38>
        return true;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e000      	b.n	800c7d4 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 800c7e0:	b5b0      	push	{r4, r5, r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d10d      	bne.n	800c80e <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff fe55 	bl	800c4a8 <ZbExtendedAddress>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	429d      	cmp	r5, r3
 800c804:	bf08      	it	eq
 800c806:	4294      	cmpeq	r4, r2
 800c808:	d101      	bne.n	800c80e <ZbApsAddrIsLocal+0x2e>
            return true;
 800c80a:	2301      	movs	r3, #1
 800c80c:	e00e      	b.n	800c82c <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	2b02      	cmp	r3, #2
 800c814:	d109      	bne.n	800c82a <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	88dc      	ldrh	r4, [r3, #6]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fe8e 	bl	800c53c <ZbShortAddress>
 800c820:	4603      	mov	r3, r0
 800c822:	429c      	cmp	r4, r3
 800c824:	d101      	bne.n	800c82a <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 800c826:	2301      	movs	r3, #1
 800c828:	e000      	b.n	800c82c <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bdb0      	pop	{r4, r5, r7, pc}

0800c834 <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b08a      	sub	sp, #40	; 0x28
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	607a      	str	r2, [r7, #4]
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	460b      	mov	r3, r1
 800c842:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 800c844:	897b      	ldrh	r3, [r7, #10]
 800c846:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 800c854:	f002 fd00 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c858:	f002 fcaa 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c85c:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	2200      	movs	r2, #0
 800c862:	f042 0210 	orr.w	r2, r2, #16
 800c866:	701a      	strb	r2, [r3, #0]
 800c868:	2200      	movs	r2, #0
 800c86a:	f042 0202 	orr.w	r2, r2, #2
 800c86e:	705a      	strb	r2, [r3, #1]
 800c870:	2200      	movs	r2, #0
 800c872:	709a      	strb	r2, [r3, #2]
 800c874:	2200      	movs	r2, #0
 800c876:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	2200      	movs	r2, #0
 800c87c:	f042 0202 	orr.w	r2, r2, #2
 800c880:	711a      	strb	r2, [r3, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	715a      	strb	r2, [r3, #5]
 800c886:	2200      	movs	r2, #0
 800c888:	719a      	strb	r2, [r3, #6]
 800c88a:	2200      	movs	r2, #0
 800c88c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 800c88e:	f107 0214 	add.w	r2, r7, #20
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 800c896:	f107 0210 	add.w	r2, r7, #16
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800c89e:	f002 fcb7 	bl	800f210 <ZIGBEE_CmdTransfer>
    return apsmeGetConf.status;
 800c8a2:	7c3b      	ldrb	r3, [r7, #16]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3728      	adds	r7, #40	; 0x28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	f002 fcce 	bl	800f258 <Pre_ZigbeeCmdProcessing>
 800c8bc:	f002 fc78 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c8c0:	6178      	str	r0, [r7, #20]
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f042 0215 	orr.w	r2, r2, #21
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f042 0202 	orr.w	r2, r2, #2
 800c8d2:	705a      	strb	r2, [r3, #1]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	709a      	strb	r2, [r3, #2]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	70da      	strb	r2, [r3, #3]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f042 0202 	orr.w	r2, r2, #2
 800c8e4:	711a      	strb	r2, [r3, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	715a      	strb	r2, [r3, #5]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	719a      	strb	r2, [r3, #6]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	71da      	strb	r2, [r3, #7]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	609a      	str	r2, [r3, #8]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	60da      	str	r2, [r3, #12]
 800c8fe:	f002 fc87 	bl	800f210 <ZIGBEE_CmdTransfer>
 800c902:	bf00      	nop
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <ZbApsBindSrcExists>:
    ZIGBEE_CmdTransfer();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b092      	sub	sp, #72	; 0x48
 800c90e:	af02      	add	r7, sp, #8
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
 800c916:	4613      	mov	r3, r2
 800c918:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff fdc4 	bl	800c4a8 <ZbExtendedAddress>
 800c920:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800c928:	f107 0208 	add.w	r2, r7, #8
 800c92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	2320      	movs	r3, #32
 800c932:	21c1      	movs	r1, #193	; 0xc1
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff ff7d 	bl	800c834 <ZbApsGetIndex>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 800c940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c944:	2b00      	cmp	r3, #0
 800c946:	d120      	bne.n	800c98a <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 800c948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	d011      	beq.n	800c974 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 800c950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c954:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c958:	4299      	cmp	r1, r3
 800c95a:	bf08      	it	eq
 800c95c:	4290      	cmpeq	r0, r2
 800c95e:	d10b      	bne.n	800c978 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 800c960:	7c3b      	ldrb	r3, [r7, #16]
 800c962:	78fa      	ldrb	r2, [r7, #3]
 800c964:	429a      	cmp	r2, r3
 800c966:	d109      	bne.n	800c97c <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 800c968:	8a7b      	ldrh	r3, [r7, #18]
 800c96a:	883a      	ldrh	r2, [r7, #0]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d107      	bne.n	800c980 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 800c970:	2301      	movs	r3, #1
 800c972:	e00c      	b.n	800c98e <ZbApsBindSrcExists+0x84>
            continue;
 800c974:	bf00      	nop
 800c976:	e004      	b.n	800c982 <ZbApsBindSrcExists+0x78>
            continue;
 800c978:	bf00      	nop
 800c97a:	e002      	b.n	800c982 <ZbApsBindSrcExists+0x78>
            continue;
 800c97c:	bf00      	nop
 800c97e:	e000      	b.n	800c982 <ZbApsBindSrcExists+0x78>
            continue;
 800c980:	bf00      	nop
    for (i = 0;; i++) {
 800c982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c984:	3301      	adds	r3, #1
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800c988:	e7ce      	b.n	800c928 <ZbApsBindSrcExists+0x1e>
            break;
 800c98a:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3740      	adds	r7, #64	; 0x40
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	61bb      	str	r3, [r7, #24]
 800c9ac:	e00e      	b.n	800c9cc <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	4413      	add	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4a27      	ldr	r2, [pc, #156]	; (800ca58 <ZbMsgFilterRegister+0xc0>)
 800c9ba:	4413      	add	r3, r2
 800c9bc:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d006      	beq.n	800c9d4 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	61bb      	str	r3, [r7, #24]
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	2b1f      	cmp	r3, #31
 800c9d0:	d9ed      	bls.n	800c9ae <ZbMsgFilterRegister+0x16>
 800c9d2:	e000      	b.n	800c9d6 <ZbMsgFilterRegister+0x3e>
            break;
 800c9d4:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	2b20      	cmp	r3, #32
 800c9da:	d101      	bne.n	800c9e0 <ZbMsgFilterRegister+0x48>
        return NULL;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e036      	b.n	800ca4e <ZbMsgFilterRegister+0xb6>
    }

    Pre_ZigbeeCmdProcessing();
 800c9e0:	f002 fc3a 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800c9e4:	f002 fbe4 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800c9e8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f042 0210 	orr.w	r2, r2, #16
 800c9f2:	701a      	strb	r2, [r3, #0]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	705a      	strb	r2, [r3, #1]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	709a      	strb	r2, [r3, #2]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f042 0203 	orr.w	r2, r2, #3
 800ca08:	711a      	strb	r2, [r3, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	715a      	strb	r2, [r3, #5]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	719a      	strb	r2, [r3, #6]
 800ca12:	2200      	movs	r2, #0
 800ca14:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 800ca1c:	79fa      	ldrb	r2, [r7, #7]
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 800ca22:	69fa      	ldr	r2, [r7, #28]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 800ca28:	f002 fbf2 	bl	800f210 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 800ca2c:	f7ff fc7e 	bl	800c32c <zb_ipc_m4_get_retval>
 800ca30:	4603      	mov	r3, r0
 800ca32:	613b      	str	r3, [r7, #16]
    if (filter != NULL) {
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d008      	beq.n	800ca4c <ZbMsgFilterRegister+0xb4>
        cb_info->filter = filter;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca4a:	609a      	str	r2, [r3, #8]
    }
    return filter;
 800ca4c:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3720      	adds	r7, #32
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	20001038 	.word	0x20001038

0800ca5c <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d044      	beq.n	800caf6 <ZbMsgFilterRemove+0x9a>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	613b      	str	r3, [r7, #16]
 800ca70:	e00f      	b.n	800ca92 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	4613      	mov	r3, r2
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	4413      	add	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4a21      	ldr	r2, [pc, #132]	; (800cb04 <ZbMsgFilterRemove+0xa8>)
 800ca7e:	4413      	add	r3, r2
 800ca80:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d006      	beq.n	800ca9a <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	613b      	str	r3, [r7, #16]
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	2b1f      	cmp	r3, #31
 800ca96:	d9ec      	bls.n	800ca72 <ZbMsgFilterRemove+0x16>
 800ca98:	e000      	b.n	800ca9c <ZbMsgFilterRemove+0x40>
            break;
 800ca9a:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	2b20      	cmp	r3, #32
 800caa0:	d02b      	beq.n	800cafa <ZbMsgFilterRemove+0x9e>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 800caa2:	f002 fbd9 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800caa6:	f002 fb83 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800caaa:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	f042 0211 	orr.w	r2, r2, #17
 800cab4:	701a      	strb	r2, [r3, #0]
 800cab6:	2200      	movs	r2, #0
 800cab8:	705a      	strb	r2, [r3, #1]
 800caba:	2200      	movs	r2, #0
 800cabc:	709a      	strb	r2, [r3, #2]
 800cabe:	2200      	movs	r2, #0
 800cac0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f042 0201 	orr.w	r2, r2, #1
 800caca:	711a      	strb	r2, [r3, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	715a      	strb	r2, [r3, #5]
 800cad0:	2200      	movs	r2, #0
 800cad2:	719a      	strb	r2, [r3, #6]
 800cad4:	2200      	movs	r2, #0
 800cad6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 800cad8:	683a      	ldr	r2, [r7, #0]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800cade:	f002 fb97 	bl	800f210 <ZIGBEE_CmdTransfer>
    cb_info->filter = NULL;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2200      	movs	r2, #0
 800cae6:	701a      	strb	r2, [r3, #0]
 800cae8:	2200      	movs	r2, #0
 800caea:	705a      	strb	r2, [r3, #1]
 800caec:	2200      	movs	r2, #0
 800caee:	709a      	strb	r2, [r3, #2]
 800caf0:	2200      	movs	r2, #0
 800caf2:	70da      	strb	r2, [r3, #3]
 800caf4:	e002      	b.n	800cafc <ZbMsgFilterRemove+0xa0>
        return;
 800caf6:	bf00      	nop
 800caf8:	e000      	b.n	800cafc <ZbMsgFilterRemove+0xa0>
        return;
 800cafa:	bf00      	nop
}
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20001038 	.word	0x20001038

0800cb08 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 800cb14:	2300      	movs	r3, #0
 800cb16:	4a23      	ldr	r2, [pc, #140]	; (800cba4 <ZbTimerAlloc+0x9c>)
 800cb18:	210c      	movs	r1, #12
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	f000 fb8a 	bl	800d234 <zb_heap_alloc>
 800cb20:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d037      	beq.n	800cb98 <ZbTimerAlloc+0x90>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 800cb34:	f002 fb90 	bl	800f258 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cb38:	f002 fb3a 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cb3c:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f042 0214 	orr.w	r2, r2, #20
 800cb46:	701a      	strb	r2, [r3, #0]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	705a      	strb	r2, [r3, #1]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	709a      	strb	r2, [r3, #2]
 800cb50:	2200      	movs	r2, #0
 800cb52:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f042 0201 	orr.w	r2, r2, #1
 800cb5c:	711a      	strb	r2, [r3, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	715a      	strb	r2, [r3, #5]
 800cb62:	2200      	movs	r2, #0
 800cb64:	719a      	strb	r2, [r3, #6]
 800cb66:	2200      	movs	r2, #0
 800cb68:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 800cb70:	f002 fb4e 	bl	800f210 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 800cb74:	f7ff fbda 	bl	800c32c <zb_ipc_m4_get_retval>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	609a      	str	r2, [r3, #8]
        if (timer->m0_timer == NULL) {
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d107      	bne.n	800cb98 <ZbTimerAlloc+0x90>
            ZbHeapFree(NULL, timer);
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4a06      	ldr	r2, [pc, #24]	; (800cba4 <ZbTimerAlloc+0x9c>)
 800cb8c:	6979      	ldr	r1, [r7, #20]
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f000 fb5f 	bl	800d252 <zb_heap_free>
            timer = NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 800cb98:	697b      	ldr	r3, [r7, #20]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	08011124 	.word	0x08011124

0800cba8 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 800cbb0:	f002 fb52 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cbb4:	f002 fafc 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cbb8:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f042 0215 	orr.w	r2, r2, #21
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	705a      	strb	r2, [r3, #1]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	709a      	strb	r2, [r3, #2]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f042 0201 	orr.w	r2, r2, #1
 800cbd8:	711a      	strb	r2, [r3, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	715a      	strb	r2, [r3, #5]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	719a      	strb	r2, [r3, #6]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	461a      	mov	r2, r3
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800cbf0:	f002 fb0e 	bl	800f210 <ZIGBEE_CmdTransfer>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4a04      	ldr	r2, [pc, #16]	; (800cc08 <ZbTimerFree+0x60>)
 800cbf8:	6879      	ldr	r1, [r7, #4]
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	f000 fb29 	bl	800d252 <zb_heap_free>
}
 800cc00:	bf00      	nop
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	08011124 	.word	0x08011124

0800cc0c <ZbTimerReset>:
    ZIGBEE_CmdTransfer();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800cc16:	f002 fb1f 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cc1a:	f002 fac9 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cc1e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f042 0217 	orr.w	r2, r2, #23
 800cc28:	701a      	strb	r2, [r3, #0]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	705a      	strb	r2, [r3, #1]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	709a      	strb	r2, [r3, #2]
 800cc32:	2200      	movs	r2, #0
 800cc34:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f042 0202 	orr.w	r2, r2, #2
 800cc3e:	711a      	strb	r2, [r3, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	715a      	strb	r2, [r3, #5]
 800cc44:	2200      	movs	r2, #0
 800cc46:	719a      	strb	r2, [r3, #6]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	461a      	mov	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cc5c:	f002 fad8 	bl	800f210 <ZIGBEE_CmdTransfer>
}
 800cc60:	bf00      	nop
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a13      	ldr	r2, [pc, #76]	; (800ccc4 <ZbTimeoutRemaining+0x5c>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d909      	bls.n	800cc8e <ZbTimeoutRemaining+0x26>
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc80:	d805      	bhi.n	800cc8e <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	e014      	b.n	800ccb8 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	4a0c      	ldr	r2, [pc, #48]	; (800ccc4 <ZbTimeoutRemaining+0x5c>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d905      	bls.n	800cca2 <ZbTimeoutRemaining+0x3a>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9c:	d801      	bhi.n	800cca2 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e00a      	b.n	800ccb8 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d301      	bcc.n	800ccae <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e004      	b.n	800ccb8 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	bffffffd 	.word	0xbffffffd

0800ccc8 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	607a      	str	r2, [r7, #4]
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 800ccd8:	897b      	ldrh	r3, [r7, #10]
 800ccda:	82bb      	strh	r3, [r7, #20]
    nlmeGetReq.attr = attrPtr;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	61bb      	str	r3, [r7, #24]
    nlmeGetReq.attrLength = attrSz;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrIndex = attrIndex;
 800cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce6:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 800cce8:	f002 fab6 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ccec:	f002 fa60 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ccf0:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	701a      	strb	r2, [r3, #0]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f042 0203 	orr.w	r2, r2, #3
 800ccfe:	705a      	strb	r2, [r3, #1]
 800cd00:	2200      	movs	r2, #0
 800cd02:	709a      	strb	r2, [r3, #2]
 800cd04:	2200      	movs	r2, #0
 800cd06:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f042 0202 	orr.w	r2, r2, #2
 800cd10:	711a      	strb	r2, [r3, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	715a      	strb	r2, [r3, #5]
 800cd16:	2200      	movs	r2, #0
 800cd18:	719a      	strb	r2, [r3, #6]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 800cd1e:	f107 0214 	add.w	r2, r7, #20
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 800cd26:	f107 0210 	add.w	r2, r7, #16
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cd2e:	f002 fa6f 	bl	800f210 <ZIGBEE_CmdTransfer>
    return nlmeGetConf.status;
 800cd32:	7c3b      	ldrb	r3, [r7, #16]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3728      	adds	r7, #40	; 0x28
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <ZbNwkGet>:
    return nlmeSetConf.status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	607a      	str	r2, [r7, #4]
 800cd46:	603b      	str	r3, [r7, #0]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 800cd4c:	8979      	ldrh	r1, [r7, #10]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f7ff ffb6 	bl	800ccc8 <ZbNwkGetIndex>
 800cd5c:	4603      	mov	r3, r0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3710      	adds	r7, #16
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b086      	sub	sp, #24
 800cd6a:	af02      	add	r7, sp, #8
 800cd6c:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 800cd6e:	f107 020c 	add.w	r2, r7, #12
 800cd72:	2300      	movs	r3, #0
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	2304      	movs	r3, #4
 800cd78:	f241 111d 	movw	r1, #4381	; 0x111d
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff fc5d 	bl	800c63c <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 800cd82:	68fb      	ldr	r3, [r7, #12]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800cd98:	f002 fa5e 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cd9c:	f002 fa08 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cda0:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f042 021d 	orr.w	r2, r2, #29
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f042 0204 	orr.w	r2, r2, #4
 800cdb2:	705a      	strb	r2, [r3, #1]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	709a      	strb	r2, [r3, #2]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f042 0202 	orr.w	r2, r2, #2
 800cdc4:	711a      	strb	r2, [r3, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	715a      	strb	r2, [r3, #5]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	719a      	strb	r2, [r3, #6]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cdde:	f002 fa17 	bl	800f210 <ZIGBEE_CmdTransfer>
    return zb_ipc_m4_get_retval() != 0U ? true : false;
 800cde2:	f7ff faa3 	bl	800c32c <zb_ipc_m4_get_retval>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	bf14      	ite	ne
 800cdec:	2301      	movne	r3, #1
 800cdee:	2300      	moveq	r3, #0
 800cdf0:	b2db      	uxtb	r3, r3
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <ZbZclAddEndpoint>:
    return (bool)zb_ipc_m4_get_retval();
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b086      	sub	sp, #24
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800ce06:	f002 fa27 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ce0a:	f002 f9d1 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ce0e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	2200      	movs	r2, #0
 800ce14:	701a      	strb	r2, [r3, #0]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f042 0204 	orr.w	r2, r2, #4
 800ce1c:	705a      	strb	r2, [r3, #1]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	709a      	strb	r2, [r3, #2]
 800ce22:	2200      	movs	r2, #0
 800ce24:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f042 0202 	orr.w	r2, r2, #2
 800ce2e:	711a      	strb	r2, [r3, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	715a      	strb	r2, [r3, #5]
 800ce34:	2200      	movs	r2, #0
 800ce36:	719a      	strb	r2, [r3, #6]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800ce48:	f002 f9e2 	bl	800f210 <ZIGBEE_CmdTransfer>
}
 800ce4c:	bf00      	nop
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800ce5a:	f002 f9fd 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ce5e:	f002 f9a7 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ce62:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f042 0211 	orr.w	r2, r2, #17
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f042 0204 	orr.w	r2, r2, #4
 800ce74:	705a      	strb	r2, [r3, #1]
 800ce76:	2200      	movs	r2, #0
 800ce78:	709a      	strb	r2, [r3, #2]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	711a      	strb	r2, [r3, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	715a      	strb	r2, [r3, #5]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	719a      	strb	r2, [r3, #6]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800ce90:	f002 f9be 	bl	800f210 <ZIGBEE_CmdTransfer>
    return (uint8_t)zb_ipc_m4_get_retval();
 800ce94:	f7ff fa4a 	bl	800c32c <zb_ipc_m4_get_retval>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	b2db      	uxtb	r3, r3
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	617b      	str	r3, [r7, #20]

    if (callback != NULL) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d013      	beq.n	800cee4 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff fa0b 	bl	800c2da <zb_ipc_m4_cb_info_alloc>
 800cec4:	6178      	str	r0, [r7, #20]
        if (info == NULL) {
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <ZbZclCommandReq+0x2c>
            return (enum ZclStatusCodeT) ZB_STATUS_ALLOC_FAIL;
 800cecc:	2370      	movs	r3, #112	; 0x70
 800cece:	e032      	b.n	800cf36 <ZbZclCommandReq+0x92>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff fc61 	bl	800c79a <ZbApsAddrIsBcast>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d002      	beq.n	800cee4 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	2201      	movs	r2, #1
 800cee2:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 800cee4:	f002 f9b8 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cee8:	f002 f962 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ceec:	6138      	str	r0, [r7, #16]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f042 0212 	orr.w	r2, r2, #18
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f042 0204 	orr.w	r2, r2, #4
 800cefe:	705a      	strb	r2, [r3, #1]
 800cf00:	2200      	movs	r2, #0
 800cf02:	709a      	strb	r2, [r3, #2]
 800cf04:	2200      	movs	r2, #0
 800cf06:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f042 0202 	orr.w	r2, r2, #2
 800cf10:	711a      	strb	r2, [r3, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	715a      	strb	r2, [r3, #5]
 800cf16:	2200      	movs	r2, #0
 800cf18:	719a      	strb	r2, [r3, #6]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cf2a:	f002 f971 	bl	800f210 <ZIGBEE_CmdTransfer>
    return (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800cf2e:	f7ff f9fd 	bl	800c32c <zb_ipc_m4_get_retval>
 800cf32:	4603      	mov	r3, r0
 800cf34:	b2db      	uxtb	r3, r3
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b086      	sub	sp, #24
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	60b9      	str	r1, [r7, #8]
 800cf48:	607a      	str	r2, [r7, #4]
 800cf4a:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800cf4c:	f002 f984 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cf50:	f002 f92e 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cf54:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f042 0214 	orr.w	r2, r2, #20
 800cf5e:	701a      	strb	r2, [r3, #0]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f042 0204 	orr.w	r2, r2, #4
 800cf66:	705a      	strb	r2, [r3, #1]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	709a      	strb	r2, [r3, #2]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f042 0204 	orr.w	r2, r2, #4
 800cf78:	711a      	strb	r2, [r3, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	715a      	strb	r2, [r3, #5]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	719a      	strb	r2, [r3, #6]
 800cf82:	2200      	movs	r2, #0
 800cf84:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 800cf98:	78fa      	ldrb	r2, [r7, #3]
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800cf9e:	f002 f937 	bl	800f210 <ZIGBEE_CmdTransfer>
}
 800cfa2:	bf00      	nop
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 800cfaa:	b590      	push	{r4, r7, lr}
 800cfac:	b091      	sub	sp, #68	; 0x44
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	60f8      	str	r0, [r7, #12]
 800cfb2:	60b9      	str	r1, [r7, #8]
 800cfb4:	607a      	str	r2, [r7, #4]
 800cfb6:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 800cfb8:	f107 0310 	add.w	r3, r7, #16
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7f3 fa6d 	bl	800049e <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	f107 0410 	add.w	r4, r7, #16
 800cfca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cfcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	7c1b      	ldrb	r3, [r3, #16]
 800cfd4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	8a1b      	ldrh	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <ZbZclClusterCommandReq+0x40>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e000      	b.n	800cfec <ZbZclClusterCommandReq+0x42>
 800cfea:	2300      	movs	r3, #0
 800cfec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	7f1b      	ldrb	r3, [r3, #28]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	bf0c      	ite	eq
 800cff8:	2301      	moveq	r3, #1
 800cffa:	2300      	movne	r3, #0
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	7c5b      	ldrb	r3, [r3, #17]
 800d006:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	8a1b      	ldrh	r3, [r3, #16]
 800d00e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 800d010:	f7ff ff20 	bl	800ce54 <ZbZclGetNextSeqnum>
 800d014:	4603      	mov	r3, r0
 800d016:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34
    zcl_req.length = req->length;
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	63bb      	str	r3, [r7, #56]	; 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6898      	ldr	r0, [r3, #8]
 800d02a:	f107 0110 	add.w	r1, r7, #16
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	f7ff ff37 	bl	800cea4 <ZbZclCommandReq>
 800d036:	4603      	mov	r3, r0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3744      	adds	r7, #68	; 0x44
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd90      	pop	{r4, r7, pc}

0800d040 <ZbZclClusterEndpointRegister>:
    return (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    Pre_ZigbeeCmdProcessing();
 800d048:	f002 f906 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d04c:	f002 f8b0 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d050:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	f042 0202 	orr.w	r2, r2, #2
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f042 0204 	orr.w	r2, r2, #4
 800d062:	705a      	strb	r2, [r3, #1]
 800d064:	2200      	movs	r2, #0
 800d066:	709a      	strb	r2, [r3, #2]
 800d068:	2200      	movs	r2, #0
 800d06a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f042 0201 	orr.w	r2, r2, #1
 800d074:	711a      	strb	r2, [r3, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	715a      	strb	r2, [r3, #5]
 800d07a:	2200      	movs	r2, #0
 800d07c:	719a      	strb	r2, [r3, #6]
 800d07e:	2200      	movs	r2, #0
 800d080:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d088:	f002 f8c2 	bl	800f210 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 800d08c:	f7ff f94e 	bl	800c32c <zb_ipc_m4_get_retval>
 800d090:	60b8      	str	r0, [r7, #8]
    return retval != 0 ? true : false;
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	bf14      	ite	ne
 800d098:	2301      	movne	r3, #1
 800d09a:	2300      	moveq	r3, #0
 800d09c:	b2db      	uxtb	r3, r3
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    Pre_ZigbeeCmdProcessing();
 800d0ae:	f002 f8d3 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d0b2:	f002 f87d 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d0b6:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f042 0203 	orr.w	r2, r2, #3
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f042 0204 	orr.w	r2, r2, #4
 800d0c8:	705a      	strb	r2, [r3, #1]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	709a      	strb	r2, [r3, #2]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f042 0201 	orr.w	r2, r2, #1
 800d0da:	711a      	strb	r2, [r3, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	715a      	strb	r2, [r3, #5]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	719a      	strb	r2, [r3, #6]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d0ee:	f002 f88f 	bl	800f210 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 800d0f2:	f7ff f91b 	bl	800c32c <zb_ipc_m4_get_retval>
 800d0f6:	60b8      	str	r0, [r7, #8]
    return retval != 0 ? true : false;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	bf14      	ite	ne
 800d0fe:	2301      	movne	r3, #1
 800d100:	2300      	moveq	r3, #0
 800d102:	b2db      	uxtb	r3, r3
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	4608      	mov	r0, r1
 800d116:	4611      	mov	r1, r2
 800d118:	461a      	mov	r2, r3
 800d11a:	4603      	mov	r3, r0
 800d11c:	70fb      	strb	r3, [r7, #3]
 800d11e:	460b      	mov	r3, r1
 800d120:	803b      	strh	r3, [r7, #0]
 800d122:	4613      	mov	r3, r2
 800d124:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d126:	f002 f897 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d12a:	f002 f841 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d12e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	f042 0204 	orr.w	r2, r2, #4
 800d138:	701a      	strb	r2, [r3, #0]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f042 0204 	orr.w	r2, r2, #4
 800d140:	705a      	strb	r2, [r3, #1]
 800d142:	2200      	movs	r2, #0
 800d144:	709a      	strb	r2, [r3, #2]
 800d146:	2200      	movs	r2, #0
 800d148:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f042 0204 	orr.w	r2, r2, #4
 800d152:	711a      	strb	r2, [r3, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	715a      	strb	r2, [r3, #5]
 800d158:	2200      	movs	r2, #0
 800d15a:	719a      	strb	r2, [r3, #6]
 800d15c:	2200      	movs	r2, #0
 800d15e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 800d166:	78fa      	ldrb	r2, [r7, #3]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 800d16c:	883a      	ldrh	r2, [r7, #0]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 800d172:	78ba      	ldrb	r2, [r7, #2]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800d178:	f002 f84a 	bl	800f210 <ZIGBEE_CmdTransfer>
    return (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800d17c:	f7ff f8d6 	bl	800c32c <zb_ipc_m4_get_retval>
 800d180:	4603      	mov	r3, r0
 800d182:	b2db      	uxtb	r3, r3
    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d194:	f002 f860 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d198:	f002 f80a 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d19c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f042 0206 	orr.w	r2, r2, #6
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f042 0204 	orr.w	r2, r2, #4
 800d1ae:	705a      	strb	r2, [r3, #1]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	709a      	strb	r2, [r3, #2]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f042 0201 	orr.w	r2, r2, #1
 800d1c0:	711a      	strb	r2, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	715a      	strb	r2, [r3, #5]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	719a      	strb	r2, [r3, #6]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d1d4:	f002 f81c 	bl	800f210 <ZIGBEE_CmdTransfer>
}
 800d1d8:	bf00      	nop
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d1e8:	f002 f836 	bl	800f258 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d1ec:	f001 ffe0 	bl	800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d1f0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f042 020b 	orr.w	r2, r2, #11
 800d1fa:	701a      	strb	r2, [r3, #0]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f042 0204 	orr.w	r2, r2, #4
 800d202:	705a      	strb	r2, [r3, #1]
 800d204:	2200      	movs	r2, #0
 800d206:	709a      	strb	r2, [r3, #2]
 800d208:	2200      	movs	r2, #0
 800d20a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	f042 0201 	orr.w	r2, r2, #1
 800d214:	711a      	strb	r2, [r3, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	715a      	strb	r2, [r3, #5]
 800d21a:	2200      	movs	r2, #0
 800d21c:	719a      	strb	r2, [r3, #6]
 800d21e:	2200      	movs	r2, #0
 800d220:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d228:	f001 fff2 	bl	800f210 <ZIGBEE_CmdTransfer>
}
 800d22c:	bf00      	nop
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 800d242:	68b8      	ldr	r0, [r7, #8]
 800d244:	f002 fd34 	bl	800fcb0 <malloc>
 800d248:	4603      	mov	r3, r0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b084      	sub	sp, #16
 800d256:	af00      	add	r7, sp, #0
 800d258:	60f8      	str	r0, [r7, #12]
 800d25a:	60b9      	str	r1, [r7, #8]
 800d25c:	607a      	str	r2, [r7, #4]
 800d25e:	603b      	str	r3, [r7, #0]
    free(ptr);
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f002 fd2d 	bl	800fcc0 <free>
}
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
	...

0800d270 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 800d270:	b480      	push	{r7}
 800d272:	b087      	sub	sp, #28
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 800d282:	e00e      	b.n	800d2a2 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 800d284:	89fb      	ldrh	r3, [r7, #14]
 800d286:	0a1b      	lsrs	r3, r3, #8
 800d288:	b29a      	uxth	r2, r3
 800d28a:	89fb      	ldrh	r3, [r7, #14]
 800d28c:	b2d9      	uxtb	r1, r3
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	1c58      	adds	r0, r3, #1
 800d292:	6178      	str	r0, [r7, #20]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	404b      	eors	r3, r1
 800d298:	4908      	ldr	r1, [pc, #32]	; (800d2bc <WpanCrc+0x4c>)
 800d29a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d29e:	4053      	eors	r3, r2
 800d2a0:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	1e5a      	subs	r2, r3, #1
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1eb      	bne.n	800d284 <WpanCrc+0x14>
    }
    return crc;
 800d2ac:	89fb      	ldrh	r3, [r7, #14]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	371c      	adds	r7, #28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	0801166c 	.word	0x0801166c

0800d2c0 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	b0cf      	sub	sp, #316	; 0x13c
 800d2c4:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 800d2d8:	f001 ff82 	bl	800f1e0 <ZIGBEE_Get_NotificationPayloadBuffer>
 800d2dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

    switch (p_notification->ID) {
 800d2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f240 421c 	movw	r2, #1052	; 0x41c
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	f201 82f0 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d2f0:	f240 4205 	movw	r2, #1029	; 0x405
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d22d      	bcs.n	800d354 <Zigbee_CallBackProcessing+0x94>
 800d2f8:	f240 321d 	movw	r2, #797	; 0x31d
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	f201 82e7 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d302:	f240 3206 	movw	r2, #774	; 0x306
 800d306:	4293      	cmp	r3, r2
 800d308:	d25c      	bcs.n	800d3c4 <Zigbee_CallBackProcessing+0x104>
 800d30a:	f240 2209 	movw	r2, #521	; 0x209
 800d30e:	4293      	cmp	r3, r2
 800d310:	f000 847e 	beq.w	800dc10 <Zigbee_CallBackProcessing+0x950>
 800d314:	f240 2209 	movw	r2, #521	; 0x209
 800d318:	4293      	cmp	r3, r2
 800d31a:	f201 82d9 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d31e:	f240 2207 	movw	r2, #519	; 0x207
 800d322:	4293      	cmp	r3, r2
 800d324:	f000 8443 	beq.w	800dbae <Zigbee_CallBackProcessing+0x8ee>
 800d328:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d32c:	f081 82d0 	bcs.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d330:	f240 2205 	movw	r2, #517	; 0x205
 800d334:	4293      	cmp	r3, r2
 800d336:	f000 840c 	beq.w	800db52 <Zigbee_CallBackProcessing+0x892>
 800d33a:	f240 2205 	movw	r2, #517	; 0x205
 800d33e:	4293      	cmp	r3, r2
 800d340:	f201 82c6 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d344:	2b3e      	cmp	r3, #62	; 0x3e
 800d346:	f200 8133 	bhi.w	800d5b0 <Zigbee_CallBackProcessing+0x2f0>
 800d34a:	2b0d      	cmp	r3, #13
 800d34c:	f080 80c4 	bcs.w	800d4d8 <Zigbee_CallBackProcessing+0x218>
 800d350:	f001 babe 	b.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d354:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 800d358:	2b17      	cmp	r3, #23
 800d35a:	f201 82b9 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d35e:	a201      	add	r2, pc, #4	; (adr r2, 800d364 <Zigbee_CallBackProcessing+0xa4>)
 800d360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d364:	0800e567 	.word	0x0800e567
 800d368:	0800e8d1 	.word	0x0800e8d1
 800d36c:	0800e8d1 	.word	0x0800e8d1
 800d370:	0800e8d1 	.word	0x0800e8d1
 800d374:	0800e8d1 	.word	0x0800e8d1
 800d378:	0800e5af 	.word	0x0800e5af
 800d37c:	0800e8d1 	.word	0x0800e8d1
 800d380:	0800e8d1 	.word	0x0800e8d1
 800d384:	0800e8d1 	.word	0x0800e8d1
 800d388:	0800e8d1 	.word	0x0800e8d1
 800d38c:	0800e5f7 	.word	0x0800e5f7
 800d390:	0800e8d1 	.word	0x0800e8d1
 800d394:	0800e8d1 	.word	0x0800e8d1
 800d398:	0800e8d1 	.word	0x0800e8d1
 800d39c:	0800e66b 	.word	0x0800e66b
 800d3a0:	0800e8d1 	.word	0x0800e8d1
 800d3a4:	0800e8d1 	.word	0x0800e8d1
 800d3a8:	0800e6f5 	.word	0x0800e6f5
 800d3ac:	0800e8d1 	.word	0x0800e8d1
 800d3b0:	0800e74f 	.word	0x0800e74f
 800d3b4:	0800e8d1 	.word	0x0800e8d1
 800d3b8:	0800e7a9 	.word	0x0800e7a9
 800d3bc:	0800e8d1 	.word	0x0800e8d1
 800d3c0:	0800e803 	.word	0x0800e803
 800d3c4:	f2a3 3306 	subw	r3, r3, #774	; 0x306
 800d3c8:	2b17      	cmp	r3, #23
 800d3ca:	f201 8281 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d3ce:	a201      	add	r2, pc, #4	; (adr r2, 800d3d4 <Zigbee_CallBackProcessing+0x114>)
 800d3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d4:	0800dc91 	.word	0x0800dc91
 800d3d8:	0800e8d1 	.word	0x0800e8d1
 800d3dc:	0800dd49 	.word	0x0800dd49
 800d3e0:	0800e8d1 	.word	0x0800e8d1
 800d3e4:	0800e8d1 	.word	0x0800e8d1
 800d3e8:	0800e8d1 	.word	0x0800e8d1
 800d3ec:	0800dda5 	.word	0x0800dda5
 800d3f0:	0800e8d1 	.word	0x0800e8d1
 800d3f4:	0800de01 	.word	0x0800de01
 800d3f8:	0800e8d1 	.word	0x0800e8d1
 800d3fc:	0800e8d1 	.word	0x0800e8d1
 800d400:	0800e8d1 	.word	0x0800e8d1
 800d404:	0800e8d1 	.word	0x0800e8d1
 800d408:	0800e8d1 	.word	0x0800e8d1
 800d40c:	0800e8d1 	.word	0x0800e8d1
 800d410:	0800e8d1 	.word	0x0800e8d1
 800d414:	0800e8d1 	.word	0x0800e8d1
 800d418:	0800e8d1 	.word	0x0800e8d1
 800d41c:	0800e8d1 	.word	0x0800e8d1
 800d420:	0800e8d1 	.word	0x0800e8d1
 800d424:	0800e8d1 	.word	0x0800e8d1
 800d428:	0800e8d1 	.word	0x0800e8d1
 800d42c:	0800e8d1 	.word	0x0800e8d1
 800d430:	0800dced 	.word	0x0800dced
 800d434:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800d438:	2b24      	cmp	r3, #36	; 0x24
 800d43a:	f201 8249 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d43e:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <Zigbee_CallBackProcessing+0x184>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800deff 	.word	0x0800deff
 800d448:	0800e8d1 	.word	0x0800e8d1
 800d44c:	0800df57 	.word	0x0800df57
 800d450:	0800e8d1 	.word	0x0800e8d1
 800d454:	0800dfc9 	.word	0x0800dfc9
 800d458:	0800e8d1 	.word	0x0800e8d1
 800d45c:	0800e021 	.word	0x0800e021
 800d460:	0800e8d1 	.word	0x0800e8d1
 800d464:	0800e079 	.word	0x0800e079
 800d468:	0800e8d1 	.word	0x0800e8d1
 800d46c:	0800e0d1 	.word	0x0800e0d1
 800d470:	0800e8d1 	.word	0x0800e8d1
 800d474:	0800e129 	.word	0x0800e129
 800d478:	0800e8d1 	.word	0x0800e8d1
 800d47c:	0800e17f 	.word	0x0800e17f
 800d480:	0800e8d1 	.word	0x0800e8d1
 800d484:	0800e8d1 	.word	0x0800e8d1
 800d488:	0800e8d1 	.word	0x0800e8d1
 800d48c:	0800de5d 	.word	0x0800de5d
 800d490:	0800e8d1 	.word	0x0800e8d1
 800d494:	0800e1c9 	.word	0x0800e1c9
 800d498:	0800e8d1 	.word	0x0800e8d1
 800d49c:	0800e223 	.word	0x0800e223
 800d4a0:	0800e8d1 	.word	0x0800e8d1
 800d4a4:	0800e27d 	.word	0x0800e27d
 800d4a8:	0800e8d1 	.word	0x0800e8d1
 800d4ac:	0800e2f1 	.word	0x0800e2f1
 800d4b0:	0800e8d1 	.word	0x0800e8d1
 800d4b4:	0800e34b 	.word	0x0800e34b
 800d4b8:	0800e8d1 	.word	0x0800e8d1
 800d4bc:	0800e3a5 	.word	0x0800e3a5
 800d4c0:	0800e8d1 	.word	0x0800e8d1
 800d4c4:	0800e3ff 	.word	0x0800e3ff
 800d4c8:	0800e8d1 	.word	0x0800e8d1
 800d4cc:	0800e459 	.word	0x0800e459
 800d4d0:	0800e8d1 	.word	0x0800e8d1
 800d4d4:	0800e4b3 	.word	0x0800e4b3
 800d4d8:	3b0d      	subs	r3, #13
 800d4da:	2b31      	cmp	r3, #49	; 0x31
 800d4dc:	f201 81f8 	bhi.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d4e0:	a201      	add	r2, pc, #4	; (adr r2, 800d4e8 <Zigbee_CallBackProcessing+0x228>)
 800d4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e6:	bf00      	nop
 800d4e8:	0800d5c5 	.word	0x0800d5c5
 800d4ec:	0800e8d1 	.word	0x0800e8d1
 800d4f0:	0800e8d1 	.word	0x0800e8d1
 800d4f4:	0800e8d1 	.word	0x0800e8d1
 800d4f8:	0800e8d1 	.word	0x0800e8d1
 800d4fc:	0800d62b 	.word	0x0800d62b
 800d500:	0800e8d1 	.word	0x0800e8d1
 800d504:	0800e8d1 	.word	0x0800e8d1
 800d508:	0800e8d1 	.word	0x0800e8d1
 800d50c:	0800e8d1 	.word	0x0800e8d1
 800d510:	0800e8d1 	.word	0x0800e8d1
 800d514:	0800e8d1 	.word	0x0800e8d1
 800d518:	0800e8d1 	.word	0x0800e8d1
 800d51c:	0800d69f 	.word	0x0800d69f
 800d520:	0800e8d1 	.word	0x0800e8d1
 800d524:	0800e8d1 	.word	0x0800e8d1
 800d528:	0800d6fb 	.word	0x0800d6fb
 800d52c:	0800e8d1 	.word	0x0800e8d1
 800d530:	0800d763 	.word	0x0800d763
 800d534:	0800e8d1 	.word	0x0800e8d1
 800d538:	0800d7cb 	.word	0x0800d7cb
 800d53c:	0800e8d1 	.word	0x0800e8d1
 800d540:	0800d833 	.word	0x0800d833
 800d544:	0800e8d1 	.word	0x0800e8d1
 800d548:	0800e8d1 	.word	0x0800e8d1
 800d54c:	0800d89b 	.word	0x0800d89b
 800d550:	0800e8d1 	.word	0x0800e8d1
 800d554:	0800e8d1 	.word	0x0800e8d1
 800d558:	0800d91d 	.word	0x0800d91d
 800d55c:	0800e8d1 	.word	0x0800e8d1
 800d560:	0800d985 	.word	0x0800d985
 800d564:	0800e8d1 	.word	0x0800e8d1
 800d568:	0800e8d1 	.word	0x0800e8d1
 800d56c:	0800e8d1 	.word	0x0800e8d1
 800d570:	0800d9a3 	.word	0x0800d9a3
 800d574:	0800e8d1 	.word	0x0800e8d1
 800d578:	0800e8d1 	.word	0x0800e8d1
 800d57c:	0800e8d1 	.word	0x0800e8d1
 800d580:	0800d9fb 	.word	0x0800d9fb
 800d584:	0800e8d1 	.word	0x0800e8d1
 800d588:	0800e8d1 	.word	0x0800e8d1
 800d58c:	0800e8d1 	.word	0x0800e8d1
 800d590:	0800e8d1 	.word	0x0800e8d1
 800d594:	0800e8d1 	.word	0x0800e8d1
 800d598:	0800da4b 	.word	0x0800da4b
 800d59c:	0800e8d1 	.word	0x0800e8d1
 800d5a0:	0800daa3 	.word	0x0800daa3
 800d5a4:	0800e8d1 	.word	0x0800e8d1
 800d5a8:	0800dafb 	.word	0x0800dafb
 800d5ac:	0800e87d 	.word	0x0800e87d
 800d5b0:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800d5b4:	f081 818c 	bcs.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
 800d5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5bc:	f63f af3a 	bhi.w	800d434 <Zigbee_CallBackProcessing+0x174>
 800d5c0:	f001 b986 	b.w	800e8d0 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 800d5c4:	4bbb      	ldr	r3, [pc, #748]	; (800d8b4 <Zigbee_CallBackProcessing+0x5f4>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 800d5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d006      	beq.n	800d5e2 <Zigbee_CallBackProcessing+0x322>
 800d5d4:	4bb8      	ldr	r3, [pc, #736]	; (800d8b8 <Zigbee_CallBackProcessing+0x5f8>)
 800d5d6:	4ab9      	ldr	r2, [pc, #740]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d5d8:	f640 5107 	movw	r1, #3335	; 0xd07
 800d5dc:	48b8      	ldr	r0, [pc, #736]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d5de:	f002 fb0d 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 800d5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d5ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f001 8171 	beq.w	800e8d8 <Zigbee_CallBackProcessing+0x1618>
 800d5f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f001 816b 	beq.w	800e8d8 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 800d602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d60c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d610:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 800d612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d61c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4610      	mov	r0, r2
 800d624:	4798      	blx	r3
            }
            break;
 800d626:	f001 b957 	b.w	800e8d8 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 800d62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	2b03      	cmp	r3, #3
 800d632:	d006      	beq.n	800d642 <Zigbee_CallBackProcessing+0x382>
 800d634:	4ba3      	ldr	r3, [pc, #652]	; (800d8c4 <Zigbee_CallBackProcessing+0x604>)
 800d636:	4aa1      	ldr	r2, [pc, #644]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d638:	f640 5116 	movw	r1, #3350	; 0xd16
 800d63c:	48a0      	ldr	r0, [pc, #640]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d63e:	f002 fadd 	bl	800fbfc <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 800d642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d646:	691a      	ldr	r2, [r3, #16]
 800d648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d64c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d650:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 800d652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d656:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	685d      	ldr	r5, [r3, #4]
 800d65e:	4b95      	ldr	r3, [pc, #596]	; (800d8b4 <Zigbee_CallBackProcessing+0x5f4>)
 800d660:	6818      	ldr	r0, [r3, #0]
 800d662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d666:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 800d668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d66c:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 800d66e:	461e      	mov	r6, r3
 800d670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d674:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d680:	f2a2 141d 	subw	r4, r2, #285	; 0x11d
 800d684:	4632      	mov	r2, r6
 800d686:	47a8      	blx	r5
 800d688:	4603      	mov	r3, r0
 800d68a:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 800d68c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d690:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 800d69a:	f001 b980 	b.w	800e99e <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 800d69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d006      	beq.n	800d6b6 <Zigbee_CallBackProcessing+0x3f6>
 800d6a8:	4b83      	ldr	r3, [pc, #524]	; (800d8b8 <Zigbee_CallBackProcessing+0x5f8>)
 800d6aa:	4a84      	ldr	r2, [pc, #528]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d6ac:	f640 5122 	movw	r1, #3362	; 0xd22
 800d6b0:	4883      	ldr	r0, [pc, #524]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d6b2:	f002 faa3 	bl	800fbfc <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 800d6b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ba:	689a      	ldr	r2, [r3, #8]
 800d6bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d6c4:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 800d6c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f001 8102 	beq.w	800e8dc <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 800d6d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d6e8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800d6ec:	6812      	ldr	r2, [r2, #0]
 800d6ee:	6852      	ldr	r2, [r2, #4]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	4798      	blx	r3
            }
            break;
 800d6f6:	f001 b8f1 	b.w	800e8dc <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 800d6fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	2b02      	cmp	r3, #2
 800d702:	d006      	beq.n	800d712 <Zigbee_CallBackProcessing+0x452>
 800d704:	4b70      	ldr	r3, [pc, #448]	; (800d8c8 <Zigbee_CallBackProcessing+0x608>)
 800d706:	4a6d      	ldr	r2, [pc, #436]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d708:	f640 512b 	movw	r1, #3371	; 0xd2b
 800d70c:	486c      	ldr	r0, [pc, #432]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d70e:	f002 fa75 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d71c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d720:	2b00      	cmp	r3, #0
 800d722:	f001 80dd 	beq.w	800e8e0 <Zigbee_CallBackProcessing+0x1620>
 800d726:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f001 80d7 	beq.w	800e8e0 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800d732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d73c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d740:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800d742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d74e:	6859      	ldr	r1, [r3, #4]
 800d750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d754:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4610      	mov	r0, r2
 800d75c:	4798      	blx	r3
            }
            break;
 800d75e:	f001 b8bf 	b.w	800e8e0 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 800d762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d006      	beq.n	800d77a <Zigbee_CallBackProcessing+0x4ba>
 800d76c:	4b56      	ldr	r3, [pc, #344]	; (800d8c8 <Zigbee_CallBackProcessing+0x608>)
 800d76e:	4a53      	ldr	r2, [pc, #332]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d770:	f640 5136 	movw	r1, #3382	; 0xd36
 800d774:	4852      	ldr	r0, [pc, #328]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d776:	f002 fa41 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f001 80ab 	beq.w	800e8e4 <Zigbee_CallBackProcessing+0x1624>
 800d78e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f001 80a5 	beq.w	800e8e4 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 800d79a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d7a8:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 800d7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	4798      	blx	r3
            }
            break;
 800d7c6:	f001 b88d 	b.w	800e8e4 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 800d7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d006      	beq.n	800d7e2 <Zigbee_CallBackProcessing+0x522>
 800d7d4:	4b3c      	ldr	r3, [pc, #240]	; (800d8c8 <Zigbee_CallBackProcessing+0x608>)
 800d7d6:	4a39      	ldr	r2, [pc, #228]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d7d8:	f640 5141 	movw	r1, #3393	; 0xd41
 800d7dc:	4838      	ldr	r0, [pc, #224]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d7de:	f002 fa0d 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d7e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d7ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f001 8079 	beq.w	800e8e8 <Zigbee_CallBackProcessing+0x1628>
 800d7f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f001 8073 	beq.w	800e8e8 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800d802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d80c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d810:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800d812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d81e:	6859      	ldr	r1, [r3, #4]
 800d820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d824:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4610      	mov	r0, r2
 800d82c:	4798      	blx	r3
            }
            break;
 800d82e:	f001 b85b 	b.w	800e8e8 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 800d832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	2b02      	cmp	r3, #2
 800d83a:	d006      	beq.n	800d84a <Zigbee_CallBackProcessing+0x58a>
 800d83c:	4b22      	ldr	r3, [pc, #136]	; (800d8c8 <Zigbee_CallBackProcessing+0x608>)
 800d83e:	4a1f      	ldr	r2, [pc, #124]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d840:	f640 514c 	movw	r1, #3404	; 0xd4c
 800d844:	481e      	ldr	r0, [pc, #120]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d846:	f002 f9d9 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f001 8047 	beq.w	800e8ec <Zigbee_CallBackProcessing+0x162c>
 800d85e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	f001 8041 	beq.w	800e8ec <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800d86a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d878:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800d87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	b2da      	uxtb	r2, r3
 800d882:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d886:	6859      	ldr	r1, [r3, #4]
 800d888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d88c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4610      	mov	r0, r2
 800d894:	4798      	blx	r3
            }
            break;
 800d896:	f001 b829 	b.w	800e8ec <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 800d89a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d013      	beq.n	800d8cc <Zigbee_CallBackProcessing+0x60c>
 800d8a4:	4b08      	ldr	r3, [pc, #32]	; (800d8c8 <Zigbee_CallBackProcessing+0x608>)
 800d8a6:	4a05      	ldr	r2, [pc, #20]	; (800d8bc <Zigbee_CallBackProcessing+0x5fc>)
 800d8a8:	f640 5157 	movw	r1, #3415	; 0xd57
 800d8ac:	4804      	ldr	r0, [pc, #16]	; (800d8c0 <Zigbee_CallBackProcessing+0x600>)
 800d8ae:	f002 f9a5 	bl	800fbfc <__assert_func>
 800d8b2:	bf00      	nop
 800d8b4:	20001024 	.word	0x20001024
 800d8b8:	08011128 	.word	0x08011128
 800d8bc:	08011898 	.word	0x08011898
 800d8c0:	080110d0 	.word	0x080110d0
 800d8c4:	08011144 	.word	0x08011144
 800d8c8:	08011160 	.word	0x08011160
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d8d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f001 8008 	beq.w	800e8f0 <Zigbee_CallBackProcessing+0x1630>
 800d8e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f001 8002 	beq.w	800e8f0 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 800d8ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8fa:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 800d8fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	b2da      	uxtb	r2, r3
 800d904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d908:	6859      	ldr	r1, [r3, #4]
 800d90a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d90e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4610      	mov	r0, r2
 800d916:	4798      	blx	r3
            }
            break;
 800d918:	f000 bfea 	b.w	800e8f0 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 800d91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	2b02      	cmp	r3, #2
 800d924:	d006      	beq.n	800d934 <Zigbee_CallBackProcessing+0x674>
 800d926:	4bc2      	ldr	r3, [pc, #776]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800d928:	4ac2      	ldr	r2, [pc, #776]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800d92a:	f640 5162 	movw	r1, #3426	; 0xd62
 800d92e:	48c2      	ldr	r0, [pc, #776]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800d930:	f002 f964 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d93e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d942:	2b00      	cmp	r3, #0
 800d944:	f000 87d6 	beq.w	800e8f4 <Zigbee_CallBackProcessing+0x1634>
 800d948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 87d0 	beq.w	800e8f4 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800d954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d95e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d962:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800d964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d970:	6859      	ldr	r1, [r3, #4]
 800d972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d976:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4610      	mov	r0, r2
 800d97e:	4798      	blx	r3
            }
            break;
 800d980:	f000 bfb8 	b.w	800e8f4 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 800d984:	4bad      	ldr	r3, [pc, #692]	; (800dc3c <Zigbee_CallBackProcessing+0x97c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f000 87b5 	beq.w	800e8f8 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 800d98e:	4bab      	ldr	r3, [pc, #684]	; (800dc3c <Zigbee_CallBackProcessing+0x97c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4aab      	ldr	r2, [pc, #684]	; (800dc40 <Zigbee_CallBackProcessing+0x980>)
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	49ab      	ldr	r1, [pc, #684]	; (800dc44 <Zigbee_CallBackProcessing+0x984>)
 800d998:	6809      	ldr	r1, [r1, #0]
 800d99a:	4610      	mov	r0, r2
 800d99c:	4798      	blx	r3
            }
            break;
 800d99e:	f000 bfab 	b.w	800e8f8 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 800d9a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d006      	beq.n	800d9ba <Zigbee_CallBackProcessing+0x6fa>
 800d9ac:	4ba0      	ldr	r3, [pc, #640]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800d9ae:	4aa1      	ldr	r2, [pc, #644]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800d9b0:	f640 5173 	movw	r1, #3443	; 0xd73
 800d9b4:	48a0      	ldr	r0, [pc, #640]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800d9b6:	f002 f921 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800d9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800d9c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f000 8797 	beq.w	800e8fc <Zigbee_CallBackProcessing+0x163c>
 800d9ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 8791 	beq.w	800e8fc <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 800d9da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	637b      	str	r3, [r7, #52]	; 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 800d9e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	4798      	blx	r3
            }
            break;
 800d9f6:	f000 bf81 	b.w	800e8fc <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 800d9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d006      	beq.n	800da12 <Zigbee_CallBackProcessing+0x752>
 800da04:	4b90      	ldr	r3, [pc, #576]	; (800dc48 <Zigbee_CallBackProcessing+0x988>)
 800da06:	4a8b      	ldr	r2, [pc, #556]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800da08:	f640 517e 	movw	r1, #3454	; 0xd7e
 800da0c:	488a      	ldr	r0, [pc, #552]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800da0e:	f002 f8f5 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 800da12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800da1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 876d 	beq.w	800e900 <Zigbee_CallBackProcessing+0x1640>
 800da26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 8767 	beq.w	800e900 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 800da32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	63bb      	str	r3, [r7, #56]	; 0x38
                callback(info->arg);
 800da3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da3e:	685a      	ldr	r2, [r3, #4]
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	4610      	mov	r0, r2
 800da44:	4798      	blx	r3
            }
            break;
 800da46:	f000 bf5b 	b.w	800e900 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 800da4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	2b02      	cmp	r3, #2
 800da52:	d006      	beq.n	800da62 <Zigbee_CallBackProcessing+0x7a2>
 800da54:	4b76      	ldr	r3, [pc, #472]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800da56:	4a77      	ldr	r2, [pc, #476]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800da58:	f640 518a 	movw	r1, #3466	; 0xd8a
 800da5c:	4876      	ldr	r0, [pc, #472]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800da5e:	f002 f8cd 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800da62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800da6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 8747 	beq.w	800e904 <Zigbee_CallBackProcessing+0x1644>
 800da76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f000 8741 	beq.w	800e904 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 800da82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	63fb      	str	r3, [r7, #60]	; 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 800da8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	4618      	mov	r0, r3
 800da92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da96:	685a      	ldr	r2, [r3, #4]
 800da98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9a:	4611      	mov	r1, r2
 800da9c:	4798      	blx	r3
            }
            break;
 800da9e:	f000 bf31 	b.w	800e904 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 800daa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d006      	beq.n	800daba <Zigbee_CallBackProcessing+0x7fa>
 800daac:	4b60      	ldr	r3, [pc, #384]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800daae:	4a61      	ldr	r2, [pc, #388]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800dab0:	f640 5196 	movw	r1, #3478	; 0xd96
 800dab4:	4860      	ldr	r0, [pc, #384]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800dab6:	f002 f8a1 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800daba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 871d 	beq.w	800e908 <Zigbee_CallBackProcessing+0x1648>
 800dace:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 8717 	beq.w	800e908 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 800dada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	643b      	str	r3, [r7, #64]	; 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 800dae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	4618      	mov	r0, r3
 800daea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daf2:	4611      	mov	r1, r2
 800daf4:	4798      	blx	r3
            }
            break;
 800daf6:	f000 bf07 	b.w	800e908 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 800dafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	2b02      	cmp	r3, #2
 800db02:	d006      	beq.n	800db12 <Zigbee_CallBackProcessing+0x852>
 800db04:	4b4a      	ldr	r3, [pc, #296]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800db06:	4a4b      	ldr	r2, [pc, #300]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800db08:	f640 51a2 	movw	r1, #3490	; 0xda2
 800db0c:	484a      	ldr	r0, [pc, #296]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800db0e:	f002 f875 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800db12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800db1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db20:	2b00      	cmp	r3, #0
 800db22:	f000 86f3 	beq.w	800e90c <Zigbee_CallBackProcessing+0x164c>
 800db26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 86ed 	beq.w	800e90c <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 800db32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	647b      	str	r3, [r7, #68]	; 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 800db3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	4618      	mov	r0, r3
 800db42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db4a:	4611      	mov	r1, r2
 800db4c:	4798      	blx	r3
            }
            break;
 800db4e:	f000 bedd 	b.w	800e90c <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 800db52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d006      	beq.n	800db6a <Zigbee_CallBackProcessing+0x8aa>
 800db5c:	4b34      	ldr	r3, [pc, #208]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800db5e:	4a35      	ldr	r2, [pc, #212]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800db60:	f640 51ad 	movw	r1, #3501	; 0xdad
 800db64:	4834      	ldr	r0, [pc, #208]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800db66:	f002 f849 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800db6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800db74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 86c9 	beq.w	800e910 <Zigbee_CallBackProcessing+0x1650>
 800db7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 86c3 	beq.w	800e910 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 800db8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 800db94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dba6:	4611      	mov	r1, r2
 800dba8:	4798      	blx	r3
            }
            break;
 800dbaa:	f000 beb1 	b.w	800e910 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            assert(p_notification->Size == 2);
 800dbb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d006      	beq.n	800dbcc <Zigbee_CallBackProcessing+0x90c>
 800dbbe:	4b1c      	ldr	r3, [pc, #112]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800dbc0:	4a1c      	ldr	r2, [pc, #112]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800dbc2:	f640 51bd 	movw	r1, #3517	; 0xdbd
 800dbc6:	481c      	ldr	r0, [pc, #112]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800dbc8:	f002 f818 	bl	800fbfc <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800dbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 800dbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if (aps_filter_cb->callback != NULL) {
 800dbe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00b      	beq.n	800dc02 <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 800dbea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbf4:	6892      	ldr	r2, [r2, #8]
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800dbfc:	4798      	blx	r3
 800dbfe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800dc02:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800dc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc0a:	60da      	str	r2, [r3, #12]
            break;
 800dc0c:	f000 bec7 	b.w	800e99e <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 800dc10:	2300      	movs	r3, #0
 800dc12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            assert(p_notification->Size == 2);
 800dc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d015      	beq.n	800dc4c <Zigbee_CallBackProcessing+0x98c>
 800dc20:	4b03      	ldr	r3, [pc, #12]	; (800dc30 <Zigbee_CallBackProcessing+0x970>)
 800dc22:	4a04      	ldr	r2, [pc, #16]	; (800dc34 <Zigbee_CallBackProcessing+0x974>)
 800dc24:	f640 51ce 	movw	r1, #3534	; 0xdce
 800dc28:	4803      	ldr	r0, [pc, #12]	; (800dc38 <Zigbee_CallBackProcessing+0x978>)
 800dc2a:	f001 ffe7 	bl	800fbfc <__assert_func>
 800dc2e:	bf00      	nop
 800dc30:	08011160 	.word	0x08011160
 800dc34:	08011898 	.word	0x08011898
 800dc38:	080110d0 	.word	0x080110d0
 800dc3c:	20001014 	.word	0x20001014
 800dc40:	20001024 	.word	0x20001024
 800dc44:	20001018 	.word	0x20001018
 800dc48:	08011128 	.word	0x08011128
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800dc4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 800dc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (aps_filter_cb->callback != NULL) {
 800dc60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00b      	beq.n	800dc82 <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 800dc6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800dc74:	6892      	ldr	r2, [r2, #8]
 800dc76:	4611      	mov	r1, r2
 800dc78:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800dc7c:	4798      	blx	r3
 800dc7e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800dc82:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800dc86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc8a:	60da      	str	r2, [r3, #12]
            break;
 800dc8c:	f000 be87 	b.w	800e99e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 800dc90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d006      	beq.n	800dca8 <Zigbee_CallBackProcessing+0x9e8>
 800dc9a:	4bc5      	ldr	r3, [pc, #788]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800dc9c:	4ac5      	ldr	r2, [pc, #788]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800dc9e:	f640 51da 	movw	r1, #3546	; 0xdda
 800dca2:	48c5      	ldr	r0, [pc, #788]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800dca4:	f001 ffaa 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800dca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dcb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 862c 	beq.w	800e914 <Zigbee_CallBackProcessing+0x1654>
 800dcbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f000 8626 	beq.w	800e914 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 800dcc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 800dcd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dce4:	4611      	mov	r1, r2
 800dce6:	4798      	blx	r3
            }
            break;
 800dce8:	f000 be14 	b.w	800e914 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 800dcec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d006      	beq.n	800dd04 <Zigbee_CallBackProcessing+0xa44>
 800dcf6:	4bae      	ldr	r3, [pc, #696]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800dcf8:	4aae      	ldr	r2, [pc, #696]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800dcfa:	f640 51e6 	movw	r1, #3558	; 0xde6
 800dcfe:	48ae      	ldr	r0, [pc, #696]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800dd00:	f001 ff7c 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800dd04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dd0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f000 8600 	beq.w	800e918 <Zigbee_CallBackProcessing+0x1658>
 800dd18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 85fa 	beq.w	800e918 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 800dd24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 800dd2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd40:	4611      	mov	r1, r2
 800dd42:	4798      	blx	r3
            }
            break;
 800dd44:	f000 bde8 	b.w	800e918 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 800dd48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d006      	beq.n	800dd60 <Zigbee_CallBackProcessing+0xaa0>
 800dd52:	4b97      	ldr	r3, [pc, #604]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800dd54:	4a97      	ldr	r2, [pc, #604]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800dd56:	f640 51f2 	movw	r1, #3570	; 0xdf2
 800dd5a:	4897      	ldr	r0, [pc, #604]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800dd5c:	f001 ff4e 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800dd60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dd6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 85d4 	beq.w	800e91c <Zigbee_CallBackProcessing+0x165c>
 800dd74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 85ce 	beq.w	800e91c <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 800dd80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 800dd8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	4798      	blx	r3
            }
            break;
 800dda0:	f000 bdbc 	b.w	800e91c <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 800dda4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d006      	beq.n	800ddbc <Zigbee_CallBackProcessing+0xafc>
 800ddae:	4b80      	ldr	r3, [pc, #512]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800ddb0:	4a80      	ldr	r2, [pc, #512]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800ddb2:	f640 51fd 	movw	r1, #3581	; 0xdfd
 800ddb6:	4880      	ldr	r0, [pc, #512]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800ddb8:	f001 ff20 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ddbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ddc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 85a8 	beq.w	800e920 <Zigbee_CallBackProcessing+0x1660>
 800ddd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 85a2 	beq.w	800e920 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 800dddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 800dde6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	4798      	blx	r3
            }
            break;
 800ddfc:	f000 bd90 	b.w	800e920 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 800de00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d006      	beq.n	800de18 <Zigbee_CallBackProcessing+0xb58>
 800de0a:	4b69      	ldr	r3, [pc, #420]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800de0c:	4a69      	ldr	r2, [pc, #420]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800de0e:	f640 6108 	movw	r1, #3592	; 0xe08
 800de12:	4869      	ldr	r0, [pc, #420]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800de14:	f001 fef2 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800de18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800de22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 857c 	beq.w	800e924 <Zigbee_CallBackProcessing+0x1664>
 800de2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 8576 	beq.w	800e924 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 800de38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 800de42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	4618      	mov	r0, r3
 800de4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de54:	4611      	mov	r1, r2
 800de56:	4798      	blx	r3
            }
            break;
 800de58:	f000 bd64 	b.w	800e924 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 800de5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	2b03      	cmp	r3, #3
 800de64:	d006      	beq.n	800de74 <Zigbee_CallBackProcessing+0xbb4>
 800de66:	4b55      	ldr	r3, [pc, #340]	; (800dfbc <Zigbee_CallBackProcessing+0xcfc>)
 800de68:	4a52      	ldr	r2, [pc, #328]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800de6a:	f640 6116 	movw	r1, #3606	; 0xe16
 800de6e:	4852      	ldr	r0, [pc, #328]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800de70:	f001 fec4 	bl	800fbfc <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 800de74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	67fb      	str	r3, [r7, #124]	; 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 800de7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 8552 	beq.w	800e928 <Zigbee_CallBackProcessing+0x1668>
 800de84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 854d 	beq.w	800e928 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800de8e:	2300      	movs	r3, #0
 800de90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800de94:	e02a      	b.n	800deec <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 800de96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800de9a:	4613      	mov	r3, r2
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	4413      	add	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4a47      	ldr	r2, [pc, #284]	; (800dfc0 <Zigbee_CallBackProcessing+0xd00>)
 800dea4:	4413      	add	r3, r2
 800dea6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d005      	beq.n	800deb8 <Zigbee_CallBackProcessing+0xbf8>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800deac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800deb0:	3301      	adds	r3, #1
 800deb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800deb6:	e019      	b.n	800deec <Zigbee_CallBackProcessing+0xc2c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 800deb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d01b      	beq.n	800def8 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 800dec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	67bb      	str	r3, [r7, #120]	; 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 800dec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 800ded2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	673b      	str	r3, [r7, #112]	; 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 800ded8:	4b3a      	ldr	r3, [pc, #232]	; (800dfc4 <Zigbee_CallBackProcessing+0xd04>)
 800deda:	6818      	ldr	r0, [r3, #0]
 800dedc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800dee4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800dee6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800dee8:	47a0      	blx	r4
                    break;
 800deea:	e006      	b.n	800defa <Zigbee_CallBackProcessing+0xc3a>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800deec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800def0:	2b07      	cmp	r3, #7
 800def2:	d9d0      	bls.n	800de96 <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 800def4:	f000 bd18 	b.w	800e928 <Zigbee_CallBackProcessing+0x1668>
                        break;
 800def8:	bf00      	nop
            break;
 800defa:	f000 bd15 	b.w	800e928 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 800defe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	2b02      	cmp	r3, #2
 800df06:	d006      	beq.n	800df16 <Zigbee_CallBackProcessing+0xc56>
 800df08:	4b29      	ldr	r3, [pc, #164]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800df0a:	4a2a      	ldr	r2, [pc, #168]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800df0c:	f640 6133 	movw	r1, #3635	; 0xe33
 800df10:	4829      	ldr	r0, [pc, #164]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800df12:	f001 fe73 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800df16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800df20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 8501 	beq.w	800e92c <Zigbee_CallBackProcessing+0x166c>
 800df2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 84fb 	beq.w	800e92c <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 800df36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	653b      	str	r3, [r7, #80]	; 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 800df3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	4618      	mov	r0, r3
 800df46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4e:	4611      	mov	r1, r2
 800df50:	4798      	blx	r3
            }
            break;
 800df52:	f000 bceb 	b.w	800e92c <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 800df56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d006      	beq.n	800df6e <Zigbee_CallBackProcessing+0xcae>
 800df60:	4b13      	ldr	r3, [pc, #76]	; (800dfb0 <Zigbee_CallBackProcessing+0xcf0>)
 800df62:	4a14      	ldr	r2, [pc, #80]	; (800dfb4 <Zigbee_CallBackProcessing+0xcf4>)
 800df64:	f640 613e 	movw	r1, #3646	; 0xe3e
 800df68:	4813      	ldr	r0, [pc, #76]	; (800dfb8 <Zigbee_CallBackProcessing+0xcf8>)
 800df6a:	f001 fe47 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800df6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800df78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f000 84d7 	beq.w	800e930 <Zigbee_CallBackProcessing+0x1670>
 800df82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f000 84d1 	beq.w	800e930 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 800df8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	657b      	str	r3, [r7, #84]	; 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 800df96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfa2:	685a      	ldr	r2, [r3, #4]
 800dfa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4798      	blx	r3
            }
            break;
 800dfaa:	f000 bcc1 	b.w	800e930 <Zigbee_CallBackProcessing+0x1670>
 800dfae:	bf00      	nop
 800dfb0:	08011160 	.word	0x08011160
 800dfb4:	08011898 	.word	0x08011898
 800dfb8:	080110d0 	.word	0x080110d0
 800dfbc:	08011144 	.word	0x08011144
 800dfc0:	200011b8 	.word	0x200011b8
 800dfc4:	20001024 	.word	0x20001024

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 800dfc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	2b02      	cmp	r3, #2
 800dfd0:	d006      	beq.n	800dfe0 <Zigbee_CallBackProcessing+0xd20>
 800dfd2:	4bc1      	ldr	r3, [pc, #772]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800dfd4:	4ac1      	ldr	r2, [pc, #772]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800dfd6:	f640 6149 	movw	r1, #3657	; 0xe49
 800dfda:	48c1      	ldr	r0, [pc, #772]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800dfdc:	f001 fe0e 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800dfe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dfea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 84a0 	beq.w	800e934 <Zigbee_CallBackProcessing+0x1674>
 800dff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f000 849a 	beq.w	800e934 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 800e000:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	65bb      	str	r3, [r7, #88]	; 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 800e008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	4618      	mov	r0, r3
 800e010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e018:	4611      	mov	r1, r2
 800e01a:	4798      	blx	r3
            }
            break;
 800e01c:	f000 bc8a 	b.w	800e934 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 800e020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	2b02      	cmp	r3, #2
 800e028:	d006      	beq.n	800e038 <Zigbee_CallBackProcessing+0xd78>
 800e02a:	4bab      	ldr	r3, [pc, #684]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e02c:	4aab      	ldr	r2, [pc, #684]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e02e:	f640 6154 	movw	r1, #3668	; 0xe54
 800e032:	48ab      	ldr	r0, [pc, #684]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e034:	f001 fde2 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e046:	2b00      	cmp	r3, #0
 800e048:	f000 8476 	beq.w	800e938 <Zigbee_CallBackProcessing+0x1678>
 800e04c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 8470 	beq.w	800e938 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 800e058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	65fb      	str	r3, [r7, #92]	; 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 800e060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	4618      	mov	r0, r3
 800e068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e06c:	685a      	ldr	r2, [r3, #4]
 800e06e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e070:	4611      	mov	r1, r2
 800e072:	4798      	blx	r3
            }
            break;
 800e074:	f000 bc60 	b.w	800e938 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 800e078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d006      	beq.n	800e090 <Zigbee_CallBackProcessing+0xdd0>
 800e082:	4b95      	ldr	r3, [pc, #596]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e084:	4a95      	ldr	r2, [pc, #596]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e086:	f640 615f 	movw	r1, #3679	; 0xe5f
 800e08a:	4895      	ldr	r0, [pc, #596]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e08c:	f001 fdb6 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e09a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 844c 	beq.w	800e93c <Zigbee_CallBackProcessing+0x167c>
 800e0a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f000 8446 	beq.w	800e93c <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 800e0b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	663b      	str	r3, [r7, #96]	; 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 800e0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c8:	4611      	mov	r1, r2
 800e0ca:	4798      	blx	r3
            }
            break;
 800e0cc:	f000 bc36 	b.w	800e93c <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 800e0d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d006      	beq.n	800e0e8 <Zigbee_CallBackProcessing+0xe28>
 800e0da:	4b7f      	ldr	r3, [pc, #508]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e0dc:	4a7f      	ldr	r2, [pc, #508]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e0de:	f640 616a 	movw	r1, #3690	; 0xe6a
 800e0e2:	487f      	ldr	r0, [pc, #508]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e0e4:	f001 fd8a 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e0f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f000 8422 	beq.w	800e940 <Zigbee_CallBackProcessing+0x1680>
 800e0fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 841c 	beq.w	800e940 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 800e108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	667b      	str	r3, [r7, #100]	; 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 800e110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	4618      	mov	r0, r3
 800e118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e11c:	685a      	ldr	r2, [r3, #4]
 800e11e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e120:	4611      	mov	r1, r2
 800e122:	4798      	blx	r3
            }
            break;
 800e124:	f000 bc0c 	b.w	800e940 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 800e128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d006      	beq.n	800e140 <Zigbee_CallBackProcessing+0xe80>
 800e132:	4b69      	ldr	r3, [pc, #420]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e134:	4a69      	ldr	r2, [pc, #420]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e136:	f640 6175 	movw	r1, #3701	; 0xe75
 800e13a:	4869      	ldr	r0, [pc, #420]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e13c:	f001 fd5e 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e14a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f000 83f8 	beq.w	800e944 <Zigbee_CallBackProcessing+0x1684>
 800e154:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 83f2 	beq.w	800e944 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 800e160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	66bb      	str	r3, [r7, #104]	; 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 800e168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	4618      	mov	r0, r3
 800e170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e178:	4611      	mov	r1, r2
 800e17a:	4798      	blx	r3
            }
            break;
 800e17c:	e3e2      	b.n	800e944 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 800e17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d006      	beq.n	800e196 <Zigbee_CallBackProcessing+0xed6>
 800e188:	4b56      	ldr	r3, [pc, #344]	; (800e2e4 <Zigbee_CallBackProcessing+0x1024>)
 800e18a:	4a54      	ldr	r2, [pc, #336]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e18c:	f640 6182 	movw	r1, #3714	; 0xe82
 800e190:	4853      	ldr	r0, [pc, #332]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e192:	f001 fd33 	bl	800fbfc <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 800e196:	4b54      	ldr	r3, [pc, #336]	; (800e2e8 <Zigbee_CallBackProcessing+0x1028>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f000 83d4 	beq.w	800e948 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 800e1a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	66fb      	str	r3, [r7, #108]	; 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 800e1a8:	4b4f      	ldr	r3, [pc, #316]	; (800e2e8 <Zigbee_CallBackProcessing+0x1028>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a4f      	ldr	r2, [pc, #316]	; (800e2ec <Zigbee_CallBackProcessing+0x102c>)
 800e1ae:	6812      	ldr	r2, [r2, #0]
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e1b4:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 800e1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b85      	cmp	r3, #133	; 0x85
 800e1bc:	f040 83c4 	bne.w	800e948 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 800e1c0:	4b49      	ldr	r3, [pc, #292]	; (800e2e8 <Zigbee_CallBackProcessing+0x1028>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 800e1c6:	e3bf      	b.n	800e948 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 800e1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d006      	beq.n	800e1e0 <Zigbee_CallBackProcessing+0xf20>
 800e1d2:	4b41      	ldr	r3, [pc, #260]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e1d4:	4a41      	ldr	r2, [pc, #260]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e1d6:	f44f 6169 	mov.w	r1, #3728	; 0xe90
 800e1da:	4841      	ldr	r0, [pc, #260]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e1dc:	f001 fd0e 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e1ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f000 83ac 	beq.w	800e94c <Zigbee_CallBackProcessing+0x168c>
 800e1f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	f000 83a6 	beq.w	800e94c <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 800e200:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 800e20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	4618      	mov	r0, r3
 800e212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e216:	685a      	ldr	r2, [r3, #4]
 800e218:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e21c:	4611      	mov	r1, r2
 800e21e:	4798      	blx	r3
            }
            break;
 800e220:	e394      	b.n	800e94c <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 800e222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d006      	beq.n	800e23a <Zigbee_CallBackProcessing+0xf7a>
 800e22c:	4b2a      	ldr	r3, [pc, #168]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e22e:	4a2b      	ldr	r2, [pc, #172]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e230:	f640 619b 	movw	r1, #3739	; 0xe9b
 800e234:	482a      	ldr	r0, [pc, #168]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e236:	f001 fce1 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e23a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 8381 	beq.w	800e950 <Zigbee_CallBackProcessing+0x1690>
 800e24e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 837b 	beq.w	800e950 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 800e25a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 800e264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	4618      	mov	r0, r3
 800e26c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e276:	4611      	mov	r1, r2
 800e278:	4798      	blx	r3
            }
            break;
 800e27a:	e369      	b.n	800e950 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 800e27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d006      	beq.n	800e294 <Zigbee_CallBackProcessing+0xfd4>
 800e286:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <Zigbee_CallBackProcessing+0x1018>)
 800e288:	4a14      	ldr	r2, [pc, #80]	; (800e2dc <Zigbee_CallBackProcessing+0x101c>)
 800e28a:	f640 61a6 	movw	r1, #3750	; 0xea6
 800e28e:	4814      	ldr	r0, [pc, #80]	; (800e2e0 <Zigbee_CallBackProcessing+0x1020>)
 800e290:	f001 fcb4 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e29e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 8356 	beq.w	800e954 <Zigbee_CallBackProcessing+0x1694>
 800e2a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 8350 	beq.w	800e954 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 800e2b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 800e2be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	4798      	blx	r3
            }
            break;
 800e2d4:	e33e      	b.n	800e954 <Zigbee_CallBackProcessing+0x1694>
 800e2d6:	bf00      	nop
 800e2d8:	08011160 	.word	0x08011160
 800e2dc:	08011898 	.word	0x08011898
 800e2e0:	080110d0 	.word	0x080110d0
 800e2e4:	08011128 	.word	0x08011128
 800e2e8:	2000101c 	.word	0x2000101c
 800e2ec:	20001020 	.word	0x20001020

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 800e2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	d006      	beq.n	800e308 <Zigbee_CallBackProcessing+0x1048>
 800e2fa:	4bc5      	ldr	r3, [pc, #788]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e2fc:	4ac5      	ldr	r2, [pc, #788]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e2fe:	f640 61b1 	movw	r1, #3761	; 0xeb1
 800e302:	48c5      	ldr	r0, [pc, #788]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e304:	f001 fc7a 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e316:	2b00      	cmp	r3, #0
 800e318:	f000 831e 	beq.w	800e958 <Zigbee_CallBackProcessing+0x1698>
 800e31c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	f000 8318 	beq.w	800e958 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 800e328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 800e332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	4618      	mov	r0, r3
 800e33a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e344:	4611      	mov	r1, r2
 800e346:	4798      	blx	r3
            }
            break;
 800e348:	e306      	b.n	800e958 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 800e34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	2b02      	cmp	r3, #2
 800e352:	d006      	beq.n	800e362 <Zigbee_CallBackProcessing+0x10a2>
 800e354:	4bae      	ldr	r3, [pc, #696]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e356:	4aaf      	ldr	r2, [pc, #700]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e358:	f640 61bc 	movw	r1, #3772	; 0xebc
 800e35c:	48ae      	ldr	r0, [pc, #696]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e35e:	f001 fc4d 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e36c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 82f3 	beq.w	800e95c <Zigbee_CallBackProcessing+0x169c>
 800e376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 82ed 	beq.w	800e95c <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 800e382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 800e38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	4618      	mov	r0, r3
 800e394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4798      	blx	r3
            }
            break;
 800e3a2:	e2db      	b.n	800e95c <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 800e3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d006      	beq.n	800e3bc <Zigbee_CallBackProcessing+0x10fc>
 800e3ae:	4b98      	ldr	r3, [pc, #608]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e3b0:	4a98      	ldr	r2, [pc, #608]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e3b2:	f640 61c7 	movw	r1, #3783	; 0xec7
 800e3b6:	4898      	ldr	r0, [pc, #608]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e3b8:	f001 fc20 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e3c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 82c8 	beq.w	800e960 <Zigbee_CallBackProcessing+0x16a0>
 800e3d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 82c2 	beq.w	800e960 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 800e3dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 800e3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4798      	blx	r3
            }
            break;
 800e3fc:	e2b0      	b.n	800e960 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 800e3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	2b02      	cmp	r3, #2
 800e406:	d006      	beq.n	800e416 <Zigbee_CallBackProcessing+0x1156>
 800e408:	4b81      	ldr	r3, [pc, #516]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e40a:	4a82      	ldr	r2, [pc, #520]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e40c:	f640 61d2 	movw	r1, #3794	; 0xed2
 800e410:	4881      	ldr	r0, [pc, #516]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e412:	f001 fbf3 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 829d 	beq.w	800e964 <Zigbee_CallBackProcessing+0x16a4>
 800e42a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 8297 	beq.w	800e964 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 800e436:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 800e440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	4618      	mov	r0, r3
 800e448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e452:	4611      	mov	r1, r2
 800e454:	4798      	blx	r3
            }
            break;
 800e456:	e285      	b.n	800e964 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 800e458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d006      	beq.n	800e470 <Zigbee_CallBackProcessing+0x11b0>
 800e462:	4b6b      	ldr	r3, [pc, #428]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e464:	4a6b      	ldr	r2, [pc, #428]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e466:	f640 61dd 	movw	r1, #3805	; 0xedd
 800e46a:	486b      	ldr	r0, [pc, #428]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e46c:	f001 fbc6 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f000 8272 	beq.w	800e968 <Zigbee_CallBackProcessing+0x16a8>
 800e484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 826c 	beq.w	800e968 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 800e490:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 800e49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	4798      	blx	r3
            }
            break;
 800e4b0:	e25a      	b.n	800e968 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 800e4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	2b03      	cmp	r3, #3
 800e4ba:	d006      	beq.n	800e4ca <Zigbee_CallBackProcessing+0x120a>
 800e4bc:	4b57      	ldr	r3, [pc, #348]	; (800e61c <Zigbee_CallBackProcessing+0x135c>)
 800e4be:	4a55      	ldr	r2, [pc, #340]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e4c0:	f640 61eb 	movw	r1, #3819	; 0xeeb
 800e4c4:	4854      	ldr	r0, [pc, #336]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e4c6:	f001 fb99 	bl	800fbfc <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 800e4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 800e4d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 8247 	beq.w	800e96c <Zigbee_CallBackProcessing+0x16ac>
 800e4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 8241 	beq.w	800e96c <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e4f0:	e032      	b.n	800e558 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 800e4f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	4413      	add	r3, r2
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4a48      	ldr	r2, [pc, #288]	; (800e620 <Zigbee_CallBackProcessing+0x1360>)
 800e500:	4413      	add	r3, r2
 800e502:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e506:	429a      	cmp	r2, r3
 800e508:	d005      	beq.n	800e516 <Zigbee_CallBackProcessing+0x1256>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e50e:	3301      	adds	r3, #1
 800e510:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e514:	e020      	b.n	800e558 <Zigbee_CallBackProcessing+0x1298>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 800e516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d020      	beq.n	800e562 <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 800e520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 800e52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 800e534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 800e53e:	4b39      	ldr	r3, [pc, #228]	; (800e624 <Zigbee_CallBackProcessing+0x1364>)
 800e540:	6818      	ldr	r0, [r3, #0]
 800e542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800e54c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800e550:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800e554:	47a0      	blx	r4
                    break;
 800e556:	e005      	b.n	800e564 <Zigbee_CallBackProcessing+0x12a4>
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e55c:	2b07      	cmp	r3, #7
 800e55e:	d9c8      	bls.n	800e4f2 <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 800e560:	e204      	b.n	800e96c <Zigbee_CallBackProcessing+0x16ac>
                        break;
 800e562:	bf00      	nop
            break;
 800e564:	e202      	b.n	800e96c <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 800e566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d006      	beq.n	800e57e <Zigbee_CallBackProcessing+0x12be>
 800e570:	4b27      	ldr	r3, [pc, #156]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e572:	4a28      	ldr	r2, [pc, #160]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e574:	f640 710c 	movw	r1, #3852	; 0xf0c
 800e578:	4827      	ldr	r0, [pc, #156]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e57a:	f001 fb3f 	bl	800fbfc <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800e57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            cb_arg = (void *)p_notification->Data[1];
 800e588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 800e592:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e596:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800e59a:	f7f2 fe45 	bl	8001228 <zcl_cluster_data_ind>
 800e59e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e5a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e5a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5aa:	60da      	str	r2, [r3, #12]
            break;
 800e5ac:	e1f7      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 800e5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d006      	beq.n	800e5c6 <Zigbee_CallBackProcessing+0x1306>
 800e5b8:	4b15      	ldr	r3, [pc, #84]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e5ba:	4a16      	ldr	r2, [pc, #88]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e5bc:	f640 711b 	movw	r1, #3867	; 0xf1b
 800e5c0:	4815      	ldr	r0, [pc, #84]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e5c2:	f001 fb1b 	bl	800fbfc <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800e5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            cb_arg = (void *)p_notification->Data[1];
 800e5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 800e5da:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800e5de:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e5e2:	f7f2 fe3b 	bl	800125c <zcl_cluster_alarm_data_ind>
 800e5e6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e5ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e5ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5f2:	60da      	str	r2, [r3, #12]
            break;
 800e5f4:	e1d3      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 800e5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d013      	beq.n	800e628 <Zigbee_CallBackProcessing+0x1368>
 800e600:	4b03      	ldr	r3, [pc, #12]	; (800e610 <Zigbee_CallBackProcessing+0x1350>)
 800e602:	4a04      	ldr	r2, [pc, #16]	; (800e614 <Zigbee_CallBackProcessing+0x1354>)
 800e604:	f640 7125 	movw	r1, #3877	; 0xf25
 800e608:	4803      	ldr	r0, [pc, #12]	; (800e618 <Zigbee_CallBackProcessing+0x1358>)
 800e60a:	f001 faf7 	bl	800fbfc <__assert_func>
 800e60e:	bf00      	nop
 800e610:	08011160 	.word	0x08011160
 800e614:	08011898 	.word	0x08011898
 800e618:	080110d0 	.word	0x080110d0
 800e61c:	08011144 	.word	0x08011144
 800e620:	200011b8 	.word	0x200011b8
 800e624:	20001024 	.word	0x20001024
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 81a8 	beq.w	800e98c <Zigbee_CallBackProcessing+0x16cc>
 800e63c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 81a2 	beq.w	800e98c <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 800e648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 800e652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	4618      	mov	r0, r3
 800e65a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e664:	4611      	mov	r1, r2
 800e666:	4798      	blx	r3
            }
            break;
 800e668:	e190      	b.n	800e98c <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            assert(p_notification->Size == 2);
 800e670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	2b02      	cmp	r3, #2
 800e678:	d006      	beq.n	800e688 <Zigbee_CallBackProcessing+0x13c8>
 800e67a:	4bbd      	ldr	r3, [pc, #756]	; (800e970 <Zigbee_CallBackProcessing+0x16b0>)
 800e67c:	4abd      	ldr	r2, [pc, #756]	; (800e974 <Zigbee_CallBackProcessing+0x16b4>)
 800e67e:	f640 7133 	movw	r1, #3891	; 0xf33
 800e682:	48bd      	ldr	r0, [pc, #756]	; (800e978 <Zigbee_CallBackProcessing+0x16b8>)
 800e684:	f001 faba 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 800e692:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e696:	2b00      	cmp	r3, #0
 800e698:	d026      	beq.n	800e6e8 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 800e69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                if (info->callback != NULL) {
 800e6a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00f      	beq.n	800e6ce <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 800e6ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    err = callback(zcl_rsp, info->arg);
 800e6b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e6c8:	4798      	blx	r3
 800e6ca:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 800e6ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6d2:	7a1b      	ldrb	r3, [r3, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <Zigbee_CallBackProcessing+0x1428>
 800e6d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e6dc:	785b      	ldrb	r3, [r3, #1]
 800e6de:	2b94      	cmp	r3, #148	; 0x94
 800e6e0:	d002      	beq.n	800e6e8 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e6e8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800e6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6f0:	60da      	str	r2, [r3, #12]
            break;
 800e6f2:	e154      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 800e6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d006      	beq.n	800e70c <Zigbee_CallBackProcessing+0x144c>
 800e6fe:	4b9c      	ldr	r3, [pc, #624]	; (800e970 <Zigbee_CallBackProcessing+0x16b0>)
 800e700:	4a9c      	ldr	r2, [pc, #624]	; (800e974 <Zigbee_CallBackProcessing+0x16b4>)
 800e702:	f640 714b 	movw	r1, #3915	; 0xf4b
 800e706:	489c      	ldr	r0, [pc, #624]	; (800e978 <Zigbee_CallBackProcessing+0x16b8>)
 800e708:	f001 fa78 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 8138 	beq.w	800e990 <Zigbee_CallBackProcessing+0x16d0>
 800e720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	f000 8132 	beq.w	800e990 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 800e72c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 800e736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e742:	685a      	ldr	r2, [r3, #4]
 800e744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e748:	4611      	mov	r1, r2
 800e74a:	4798      	blx	r3
            }
            break;
 800e74c:	e120      	b.n	800e990 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 800e74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	2b02      	cmp	r3, #2
 800e756:	d006      	beq.n	800e766 <Zigbee_CallBackProcessing+0x14a6>
 800e758:	4b85      	ldr	r3, [pc, #532]	; (800e970 <Zigbee_CallBackProcessing+0x16b0>)
 800e75a:	4a86      	ldr	r2, [pc, #536]	; (800e974 <Zigbee_CallBackProcessing+0x16b4>)
 800e75c:	f640 7156 	movw	r1, #3926	; 0xf56
 800e760:	4885      	ldr	r0, [pc, #532]	; (800e978 <Zigbee_CallBackProcessing+0x16b8>)
 800e762:	f001 fa4b 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 810d 	beq.w	800e994 <Zigbee_CallBackProcessing+0x16d4>
 800e77a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 8107 	beq.w	800e994 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 800e786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 800e790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	4618      	mov	r0, r3
 800e798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e79c:	685a      	ldr	r2, [r3, #4]
 800e79e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4798      	blx	r3
            }
            break;
 800e7a6:	e0f5      	b.n	800e994 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 800e7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d006      	beq.n	800e7c0 <Zigbee_CallBackProcessing+0x1500>
 800e7b2:	4b6f      	ldr	r3, [pc, #444]	; (800e970 <Zigbee_CallBackProcessing+0x16b0>)
 800e7b4:	4a6f      	ldr	r2, [pc, #444]	; (800e974 <Zigbee_CallBackProcessing+0x16b4>)
 800e7b6:	f640 7161 	movw	r1, #3937	; 0xf61
 800e7ba:	486f      	ldr	r0, [pc, #444]	; (800e978 <Zigbee_CallBackProcessing+0x16b8>)
 800e7bc:	f001 fa1e 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e7ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 80e2 	beq.w	800e998 <Zigbee_CallBackProcessing+0x16d8>
 800e7d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 80dc 	beq.w	800e998 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 800e7e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 800e7ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	4798      	blx	r3
            }
            break;
 800e800:	e0ca      	b.n	800e998 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 800e802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	2b05      	cmp	r3, #5
 800e80a:	d006      	beq.n	800e81a <Zigbee_CallBackProcessing+0x155a>
 800e80c:	4b5b      	ldr	r3, [pc, #364]	; (800e97c <Zigbee_CallBackProcessing+0x16bc>)
 800e80e:	4a59      	ldr	r2, [pc, #356]	; (800e974 <Zigbee_CallBackProcessing+0x16b4>)
 800e810:	f640 716c 	movw	r1, #3948	; 0xf6c
 800e814:	4858      	ldr	r0, [pc, #352]	; (800e978 <Zigbee_CallBackProcessing+0x16b8>)
 800e816:	f001 f9f1 	bl	800fbfc <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 800e81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e81e:	699b      	ldr	r3, [r3, #24]
 800e820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f000 80b7 	beq.w	800e99c <Zigbee_CallBackProcessing+0x16dc>
 800e82e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 80b1 	beq.w	800e99c <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 800e83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e83e:	f103 0108 	add.w	r1, r3, #8
 800e842:	463b      	mov	r3, r7
 800e844:	2208      	movs	r2, #8
 800e846:	4618      	mov	r0, r3
 800e848:	f7fd fd28 	bl	800c29c <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 800e84c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 800e856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e85a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	b29a      	uxth	r2, r3
 800e862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	b2dd      	uxtb	r5, r3
 800e86a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800e876:	462b      	mov	r3, r5
 800e878:	47a0      	blx	r4
            }
            break;
 800e87a:	e08f      	b.n	800e99c <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 800e87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	2b03      	cmp	r3, #3
 800e884:	d006      	beq.n	800e894 <Zigbee_CallBackProcessing+0x15d4>
 800e886:	4b3e      	ldr	r3, [pc, #248]	; (800e980 <Zigbee_CallBackProcessing+0x16c0>)
 800e888:	4a3a      	ldr	r2, [pc, #232]	; (800e974 <Zigbee_CallBackProcessing+0x16b4>)
 800e88a:	f640 717d 	movw	r1, #3965	; 0xf7d
 800e88e:	483a      	ldr	r0, [pc, #232]	; (800e978 <Zigbee_CallBackProcessing+0x16b8>)
 800e890:	f001 f9b4 	bl	800fbfc <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 800e894:	4b3b      	ldr	r3, [pc, #236]	; (800e984 <Zigbee_CallBackProcessing+0x16c4>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d103      	bne.n	800e8a4 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 800e89c:	2381      	movs	r3, #129	; 0x81
 800e89e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                break;
 800e8a2:	e07c      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 800e8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	64fb      	str	r3, [r7, #76]	; 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 800e8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	64bb      	str	r3, [r7, #72]	; 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 800e8b4:	4b33      	ldr	r3, [pc, #204]	; (800e984 <Zigbee_CallBackProcessing+0x16c4>)
 800e8b6:	681c      	ldr	r4, [r3, #0]
 800e8b8:	4b33      	ldr	r3, [pc, #204]	; (800e988 <Zigbee_CallBackProcessing+0x16c8>)
 800e8ba:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 800e8bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8c0:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 800e8c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e8c6:	47a0      	blx	r4
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 800e8ce:	e066      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 800e8d6:	e062      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8d8:	bf00      	nop
 800e8da:	e060      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8dc:	bf00      	nop
 800e8de:	e05e      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8e0:	bf00      	nop
 800e8e2:	e05c      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8e4:	bf00      	nop
 800e8e6:	e05a      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8e8:	bf00      	nop
 800e8ea:	e058      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8ec:	bf00      	nop
 800e8ee:	e056      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8f0:	bf00      	nop
 800e8f2:	e054      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8f4:	bf00      	nop
 800e8f6:	e052      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8f8:	bf00      	nop
 800e8fa:	e050      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e8fc:	bf00      	nop
 800e8fe:	e04e      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e900:	bf00      	nop
 800e902:	e04c      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e904:	bf00      	nop
 800e906:	e04a      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e908:	bf00      	nop
 800e90a:	e048      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e90c:	bf00      	nop
 800e90e:	e046      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e910:	bf00      	nop
 800e912:	e044      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e914:	bf00      	nop
 800e916:	e042      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e918:	bf00      	nop
 800e91a:	e040      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e91c:	bf00      	nop
 800e91e:	e03e      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e920:	bf00      	nop
 800e922:	e03c      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e924:	bf00      	nop
 800e926:	e03a      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e928:	bf00      	nop
 800e92a:	e038      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e92c:	bf00      	nop
 800e92e:	e036      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e930:	bf00      	nop
 800e932:	e034      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e934:	bf00      	nop
 800e936:	e032      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e938:	bf00      	nop
 800e93a:	e030      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e93c:	bf00      	nop
 800e93e:	e02e      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e940:	bf00      	nop
 800e942:	e02c      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e944:	bf00      	nop
 800e946:	e02a      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e948:	bf00      	nop
 800e94a:	e028      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e94c:	bf00      	nop
 800e94e:	e026      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e950:	bf00      	nop
 800e952:	e024      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e954:	bf00      	nop
 800e956:	e022      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e958:	bf00      	nop
 800e95a:	e020      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e95c:	bf00      	nop
 800e95e:	e01e      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e960:	bf00      	nop
 800e962:	e01c      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e964:	bf00      	nop
 800e966:	e01a      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e968:	bf00      	nop
 800e96a:	e018      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e96c:	bf00      	nop
 800e96e:	e016      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
 800e970:	08011160 	.word	0x08011160
 800e974:	08011898 	.word	0x08011898
 800e978:	080110d0 	.word	0x080110d0
 800e97c:	0801117c 	.word	0x0801117c
 800e980:	08011144 	.word	0x08011144
 800e984:	20001010 	.word	0x20001010
 800e988:	20001024 	.word	0x20001024
            break;
 800e98c:	bf00      	nop
 800e98e:	e006      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e990:	bf00      	nop
 800e992:	e004      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e994:	bf00      	nop
 800e996:	e002      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e998:	bf00      	nop
 800e99a:	e000      	b.n	800e99e <Zigbee_CallBackProcessing+0x16de>
            break;
 800e99c:	bf00      	nop
    }

    if (info != NULL) {
 800e99e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d003      	beq.n	800e9ae <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 800e9a6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800e9aa:	f7fd fcb3 	bl	800c314 <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 800e9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800e9b6:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 800e9b8:	f7fd fa92 	bl	800bee0 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 800e9bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ca:	bf00      	nop

0800e9cc <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b089      	sub	sp, #36	; 0x24
 800e9d0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 800e9d6:	f000 fc0f 	bl	800f1f8 <ZIGBEE_Get_M0RequestPayloadBuffer>
 800e9da:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b09      	cmp	r3, #9
 800e9e2:	d046      	beq.n	800ea72 <Zigbee_M0RequestProcessing+0xa6>
 800e9e4:	2b09      	cmp	r3, #9
 800e9e6:	d864      	bhi.n	800eab2 <Zigbee_M0RequestProcessing+0xe6>
 800e9e8:	2b07      	cmp	r3, #7
 800e9ea:	d002      	beq.n	800e9f2 <Zigbee_M0RequestProcessing+0x26>
 800e9ec:	2b08      	cmp	r3, #8
 800e9ee:	d01e      	beq.n	800ea2e <Zigbee_M0RequestProcessing+0x62>
 800e9f0:	e05f      	b.n	800eab2 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d006      	beq.n	800ea08 <Zigbee_M0RequestProcessing+0x3c>
 800e9fa:	4b33      	ldr	r3, [pc, #204]	; (800eac8 <Zigbee_M0RequestProcessing+0xfc>)
 800e9fc:	4a33      	ldr	r2, [pc, #204]	; (800eacc <Zigbee_M0RequestProcessing+0x100>)
 800e9fe:	f640 71a4 	movw	r1, #4004	; 0xfa4
 800ea02:	4833      	ldr	r0, [pc, #204]	; (800ead0 <Zigbee_M0RequestProcessing+0x104>)
 800ea04:	f001 f8fa 	bl	800fbfc <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 800ea0e:	4b31      	ldr	r3, [pc, #196]	; (800ead4 <Zigbee_M0RequestProcessing+0x108>)
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d050      	beq.n	800eab8 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 800ea16:	4b2f      	ldr	r3, [pc, #188]	; (800ead4 <Zigbee_M0RequestProcessing+0x108>)
 800ea18:	685c      	ldr	r4, [r3, #4]
 800ea1a:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <Zigbee_M0RequestProcessing+0x108>)
 800ea1c:	6818      	ldr	r0, [r3, #0]
 800ea1e:	4b2e      	ldr	r3, [pc, #184]	; (800ead8 <Zigbee_M0RequestProcessing+0x10c>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	2200      	movs	r2, #0
 800ea28:	2100      	movs	r1, #0
 800ea2a:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 800ea2c:	e044      	b.n	800eab8 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d006      	beq.n	800ea44 <Zigbee_M0RequestProcessing+0x78>
 800ea36:	4b24      	ldr	r3, [pc, #144]	; (800eac8 <Zigbee_M0RequestProcessing+0xfc>)
 800ea38:	4a24      	ldr	r2, [pc, #144]	; (800eacc <Zigbee_M0RequestProcessing+0x100>)
 800ea3a:	f640 71b4 	movw	r1, #4020	; 0xfb4
 800ea3e:	4824      	ldr	r0, [pc, #144]	; (800ead0 <Zigbee_M0RequestProcessing+0x104>)
 800ea40:	f001 f8dc 	bl	800fbfc <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 f92d 	bl	800fcb0 <malloc>
 800ea56:	4603      	mov	r3, r0
 800ea58:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d004      	beq.n	800ea6a <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	6938      	ldr	r0, [r7, #16]
 800ea64:	f000 f83c 	bl	800eae0 <zb_malloc_track>
 800ea68:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	60da      	str	r2, [r3, #12]
            break;
 800ea70:	e023      	b.n	800eaba <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d006      	beq.n	800ea88 <Zigbee_M0RequestProcessing+0xbc>
 800ea7a:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <Zigbee_M0RequestProcessing+0xfc>)
 800ea7c:	4a13      	ldr	r2, [pc, #76]	; (800eacc <Zigbee_M0RequestProcessing+0x100>)
 800ea7e:	f640 71c8 	movw	r1, #4040	; 0xfc8
 800ea82:	4813      	ldr	r0, [pc, #76]	; (800ead0 <Zigbee_M0RequestProcessing+0x104>)
 800ea84:	f001 f8ba 	bl	800fbfc <__assert_func>
            ptr = (void *)p_logging->Data[0];
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d106      	bne.n	800eaa2 <Zigbee_M0RequestProcessing+0xd6>
 800ea94:	4b11      	ldr	r3, [pc, #68]	; (800eadc <Zigbee_M0RequestProcessing+0x110>)
 800ea96:	4a0d      	ldr	r2, [pc, #52]	; (800eacc <Zigbee_M0RequestProcessing+0x100>)
 800ea98:	f640 71ca 	movw	r1, #4042	; 0xfca
 800ea9c:	480c      	ldr	r0, [pc, #48]	; (800ead0 <Zigbee_M0RequestProcessing+0x104>)
 800ea9e:	f001 f8ad 	bl	800fbfc <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 800eaa2:	68b8      	ldr	r0, [r7, #8]
 800eaa4:	f000 f838 	bl	800eb18 <zb_malloc_untrack>
 800eaa8:	60b8      	str	r0, [r7, #8]
            free(ptr);
 800eaaa:	68b8      	ldr	r0, [r7, #8]
 800eaac:	f001 f908 	bl	800fcc0 <free>
            break;
 800eab0:	e003      	b.n	800eaba <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	75fb      	strb	r3, [r7, #23]
            break;
 800eab6:	e000      	b.n	800eaba <Zigbee_M0RequestProcessing+0xee>
            break;
 800eab8:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 800eaba:	f7fd fa1f 	bl	800befc <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 800eabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	371c      	adds	r7, #28
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}
 800eac8:	08011198 	.word	0x08011198
 800eacc:	080118b4 	.word	0x080118b4
 800ead0:	080110d0 	.word	0x080110d0
 800ead4:	20001024 	.word	0x20001024
 800ead8:	08011668 	.word	0x08011668
 800eadc:	080111b0 	.word	0x080111b0

0800eae0 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 800eaf6:	4b07      	ldr	r3, [pc, #28]	; (800eb14 <zb_malloc_track+0x34>)
 800eaf8:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	4413      	add	r3, r2
 800eb00:	4a04      	ldr	r2, [pc, #16]	; (800eb14 <zb_malloc_track+0x34>)
 800eb02:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 800eb06:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	20001024 	.word	0x20001024

0800eb18 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	3b04      	subs	r3, #4
 800eb24:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 800eb2c:	4b07      	ldr	r3, [pc, #28]	; (800eb4c <zb_malloc_untrack+0x34>)
 800eb2e:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	4a05      	ldr	r2, [pc, #20]	; (800eb4c <zb_malloc_untrack+0x34>)
 800eb38:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	20001024 	.word	0x20001024

0800eb50 <messaging_client_1_display_message>:
static struct ZbZclMsgMessageT my_second_message;
/* USER CODE END PV */
/* Functions Definition ------------------------------------------------------*/

/* Messaging client display_message 1 command callback */
static enum ZclStatusCodeT messaging_client_1_display_message(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgMessageT *msg, struct ZbZclAddrInfoT *srcInfo){
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 0 Messaging client 1 display_message 1 */
  return ZCL_STATUS_SUCCESS;
 800eb5e:	2300      	movs	r3, #0
  /* USER CODE END 0 Messaging client 1 display_message 1 */
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <messaging_client_1_cancel_message>:

/* Messaging client cancel_message 1 command callback */
static enum ZclStatusCodeT messaging_client_1_cancel_message(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgMessageCancelT *cancel, struct ZbZclAddrInfoT *srcInfo){
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
 800eb78:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 1 Messaging client 1 cancel_message 1 */
  return ZCL_STATUS_SUCCESS;
 800eb7a:	2300      	movs	r3, #0
  /* USER CODE END 1 Messaging client 1 cancel_message 1 */
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3714      	adds	r7, #20
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <messaging_client_1_cancel_all_messages>:

/* Messaging client cancel_all_messages 1 command callback */
static enum ZclStatusCodeT messaging_client_1_cancel_all_messages(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgMessageCancelAllT *cancel_all, struct ZbZclAddrInfoT *srcInfo){
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 2 Messaging client 1 cancel_all_messages 1 */
  return ZCL_STATUS_SUCCESS;
 800eb96:	2300      	movs	r3, #0
  /* USER CODE END 2 Messaging client 1 cancel_all_messages 1 */
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3714      	adds	r7, #20
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <messaging_client_1_display_protected_message>:

/* Messaging client display_protected_message 1 command callback */
static enum ZclStatusCodeT messaging_client_1_display_protected_message(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgMessageT *msg, struct ZbZclAddrInfoT *srcInfo){
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 3 Messaging client 1 display_protected_message 1 */
  return ZCL_STATUS_SUCCESS;
 800ebb2:	2300      	movs	r3, #0
  /* USER CODE END 3 Messaging client 1 display_protected_message 1 */
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3714      	adds	r7, #20
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <messaging_server_1_get_last_message>:

/* Messaging server get_last_message 1 command callback */
static enum ZclStatusCodeT messaging_server_1_get_last_message(struct ZbZclClusterT *cluster, void *arg, struct ZbZclAddrInfoT *srcInfo){
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 4 Messaging server 1 get_last_message 1 */
  return ZCL_STATUS_SUCCESS;
 800ebcc:	2300      	movs	r3, #0
  /* USER CODE END 4 Messaging server 1 get_last_message 1 */
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr

0800ebda <messaging_server_1_message_confirmation>:

/* Messaging server message_confirmation 1 command callback */
static enum ZclStatusCodeT messaging_server_1_message_confirmation(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgMessageConfT *conf, struct ZbZclAddrInfoT *srcInfo){
 800ebda:	b480      	push	{r7}
 800ebdc:	b085      	sub	sp, #20
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	60f8      	str	r0, [r7, #12]
 800ebe2:	60b9      	str	r1, [r7, #8]
 800ebe4:	607a      	str	r2, [r7, #4]
 800ebe6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 5 Messaging server 1 message_confirmation 1 */
  return ZCL_STATUS_SUCCESS;
 800ebe8:	2300      	movs	r3, #0
  /* USER CODE END 5 Messaging server 1 message_confirmation 1 */
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3714      	adds	r7, #20
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <messaging_server_1_get_message_cancellation>:

/* Messaging server get_message_cancellation 1 command callback */
static enum ZclStatusCodeT messaging_server_1_get_message_cancellation(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgGetMsgCancellationT *req, struct ZbZclAddrInfoT *source){
 800ebf6:	b480      	push	{r7}
 800ebf8:	b085      	sub	sp, #20
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	60f8      	str	r0, [r7, #12]
 800ebfe:	60b9      	str	r1, [r7, #8]
 800ec00:	607a      	str	r2, [r7, #4]
 800ec02:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 6 Messaging server 1 get_message_cancellation 1 */
  return ZCL_STATUS_SUCCESS;
 800ec04:	2300      	movs	r3, #0
  /* USER CODE END 6 Messaging server 1 get_message_cancellation 1 */
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
	...

0800ec14 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 800ec1a:	4a15      	ldr	r2, [pc, #84]	; (800ec70 <APP_ZIGBEE_Init+0x5c>)
 800ec1c:	2101      	movs	r1, #1
 800ec1e:	2000      	movs	r0, #0
 800ec20:	f7f9 fbb4 	bl	800838c <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 800ec24:	f000 f9fe 	bl	800f024 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 800ec28:	4812      	ldr	r0, [pc, #72]	; (800ec74 <APP_ZIGBEE_Init+0x60>)
 800ec2a:	f000 fab1 	bl	800f190 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 800ec2e:	f000 fb21 	bl	800f274 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */

  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 800ec32:	4a11      	ldr	r2, [pc, #68]	; (800ec78 <APP_ZIGBEE_Init+0x64>)
 800ec34:	2100      	movs	r1, #0
 800ec36:	2001      	movs	r0, #1
 800ec38:	f000 fedc 	bl	800f9f4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 800ec3c:	4a0f      	ldr	r2, [pc, #60]	; (800ec7c <APP_ZIGBEE_Init+0x68>)
 800ec3e:	2100      	movs	r1, #0
 800ec40:	2002      	movs	r0, #2
 800ec42:	f000 fed7 	bl	800f9f4 <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 800ec46:	4a0e      	ldr	r2, [pc, #56]	; (800ec80 <APP_ZIGBEE_Init+0x6c>)
 800ec48:	2100      	movs	r1, #0
 800ec4a:	2004      	movs	r0, #4
 800ec4c:	f000 fed2 	bl	800f9f4 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BUTTON_SW1, UTIL_SEQ_RFU, APP_ZIGBEE_SW1_Process);
 800ec50:	4a0c      	ldr	r2, [pc, #48]	; (800ec84 <APP_ZIGBEE_Init+0x70>)
 800ec52:	2100      	movs	r1, #0
 800ec54:	2008      	movs	r0, #8
 800ec56:	f000 fecd 	bl	800f9f4 <UTIL_SEQ_RegTask>
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 800ec5a:	f7fc fe9b 	bl	800b994 <SHCI_C2_ZIGBEE_Init>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 800ec62:	f000 f811 	bl	800ec88 <APP_ZIGBEE_StackLayersInit>

} /* APP_ZIGBEE_Init */
 800ec66:	bf00      	nop
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	080111bc 	.word	0x080111bc
 800ec74:	200007f4 	.word	0x200007f4
 800ec78:	0800f2a5 	.word	0x0800f2a5
 800ec7c:	0800f2d5 	.word	0x0800f2d5
 800ec80:	0800ee15 	.word	0x0800ee15
 800ec84:	0800f379 	.word	0x0800f379

0800ec88 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 800ec8c:	4a18      	ldr	r2, [pc, #96]	; (800ecf0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800ec8e:	2101      	movs	r1, #1
 800ec90:	2000      	movs	r0, #0
 800ec92:	f7f9 fb7b 	bl	800838c <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 800ec96:	2300      	movs	r3, #0
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f04f 0000 	mov.w	r0, #0
 800ec9e:	f04f 0100 	mov.w	r1, #0
 800eca2:	f7fd fb71 	bl	800c388 <ZbInit>
 800eca6:	4603      	mov	r3, r0
 800eca8:	4a12      	ldr	r2, [pc, #72]	; (800ecf4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800ecaa:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 800ecac:	4b11      	ldr	r3, [pc, #68]	; (800ecf4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d105      	bne.n	800ecc0 <APP_ZIGBEE_StackLayersInit+0x38>
 800ecb4:	4b10      	ldr	r3, [pc, #64]	; (800ecf8 <APP_ZIGBEE_StackLayersInit+0x70>)
 800ecb6:	4a11      	ldr	r2, [pc, #68]	; (800ecfc <APP_ZIGBEE_StackLayersInit+0x74>)
 800ecb8:	21f2      	movs	r1, #242	; 0xf2
 800ecba:	4811      	ldr	r0, [pc, #68]	; (800ed00 <APP_ZIGBEE_StackLayersInit+0x78>)
 800ecbc:	f000 ff9e 	bl	800fbfc <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 800ecc0:	f000 f820 	bl	800ed04 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  APP_ZIGBEE_InitMsg();
 800ecc4:	f000 fb16 	bl	800f2f4 <APP_ZIGBEE_InitMsg>
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 800ecc8:	4b0a      	ldr	r3, [pc, #40]	; (800ecf4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800ecca:	2201      	movs	r2, #1
 800eccc:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 800ecce:	f7f9 fd2d 	bl	800872c <HAL_GetTick>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	4a07      	ldr	r2, [pc, #28]	; (800ecf4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800ecd6:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeJoin;
 800ecd8:	4b06      	ldr	r3, [pc, #24]	; (800ecf4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800ecda:	2203      	movs	r2, #3
 800ecdc:	721a      	strb	r2, [r3, #8]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 800ecde:	4b05      	ldr	r3, [pc, #20]	; (800ecf4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800ece0:	2201      	movs	r2, #1
 800ece2:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800ece4:	2100      	movs	r1, #0
 800ece6:	2004      	movs	r0, #4
 800ece8:	f000 fea6 	bl	800fa38 <UTIL_SEQ_SetTask>
} /* APP_ZIGBEE_StackLayersInit */
 800ecec:	bf00      	nop
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	080111cc 	.word	0x080111cc
 800ecf4:	2000122c 	.word	0x2000122c
 800ecf8:	080111e8 	.word	0x080111e8
 800ecfc:	080118d0 	.word	0x080118d0
 800ed00:	08011204 	.word	0x08011204

0800ed04 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b088      	sub	sp, #32
 800ed08:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 800ed0a:	f107 0308 	add.w	r3, r7, #8
 800ed0e:	2218      	movs	r2, #24
 800ed10:	2100      	movs	r1, #0
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 ffea 	bl	800fcec <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_SMART_ENERGY;
 800ed18:	f240 1309 	movw	r3, #265	; 0x109
 800ed1c:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_PCT;
 800ed1e:	f240 5303 	movw	r3, #1283	; 0x503
 800ed22:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 800ed24:	2301      	movs	r3, #1
 800ed26:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 800ed28:	4b31      	ldr	r3, [pc, #196]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	1d3a      	adds	r2, r7, #4
 800ed2e:	f107 0108 	add.w	r1, r7, #8
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fe f861 	bl	800cdfa <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 800ed38:	793b      	ldrb	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d006      	beq.n	800ed4c <APP_ZIGBEE_ConfigEndpoints+0x48>
 800ed3e:	4b2d      	ldr	r3, [pc, #180]	; (800edf4 <APP_ZIGBEE_ConfigEndpoints+0xf0>)
 800ed40:	4a2d      	ldr	r2, [pc, #180]	; (800edf8 <APP_ZIGBEE_ConfigEndpoints+0xf4>)
 800ed42:	f44f 718c 	mov.w	r1, #280	; 0x118
 800ed46:	482d      	ldr	r0, [pc, #180]	; (800edfc <APP_ZIGBEE_ConfigEndpoints+0xf8>)
 800ed48:	f000 ff58 	bl	800fbfc <__assert_func>

  /* Basic client/server */
  zigbee_app_info.basic_client_1 = ZbZclBasicClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 800ed4c:	4b28      	ldr	r3, [pc, #160]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	2101      	movs	r1, #1
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7f1 fa14 	bl	8000180 <ZbZclBasicClientAlloc>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	4a25      	ldr	r2, [pc, #148]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed5c:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.basic_client_1 != NULL);
 800ed5e:	4b24      	ldr	r3, [pc, #144]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d106      	bne.n	800ed74 <APP_ZIGBEE_ConfigEndpoints+0x70>
 800ed66:	4b26      	ldr	r3, [pc, #152]	; (800ee00 <APP_ZIGBEE_ConfigEndpoints+0xfc>)
 800ed68:	4a23      	ldr	r2, [pc, #140]	; (800edf8 <APP_ZIGBEE_ConfigEndpoints+0xf4>)
 800ed6a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800ed6e:	4823      	ldr	r0, [pc, #140]	; (800edfc <APP_ZIGBEE_ConfigEndpoints+0xf8>)
 800ed70:	f000 ff44 	bl	800fbfc <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.basic_client_1);
 800ed74:	4b1e      	ldr	r3, [pc, #120]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed76:	695b      	ldr	r3, [r3, #20]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fe f961 	bl	800d040 <ZbZclClusterEndpointRegister>

  /* Messaging client/server */
  zigbee_app_info.messaging_client_1 = ZbZclMsgClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &MsgClientCallbacks_1, NULL);
 800ed7e:	4b1c      	ldr	r3, [pc, #112]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed80:	6858      	ldr	r0, [r3, #4]
 800ed82:	2300      	movs	r3, #0
 800ed84:	4a1f      	ldr	r2, [pc, #124]	; (800ee04 <APP_ZIGBEE_ConfigEndpoints+0x100>)
 800ed86:	2101      	movs	r1, #1
 800ed88:	f7f2 fc30 	bl	80015ec <ZbZclMsgClientAlloc>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	4a18      	ldr	r2, [pc, #96]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed90:	6193      	str	r3, [r2, #24]
  assert(zigbee_app_info.messaging_client_1 != NULL);
 800ed92:	4b17      	ldr	r3, [pc, #92]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d106      	bne.n	800eda8 <APP_ZIGBEE_ConfigEndpoints+0xa4>
 800ed9a:	4b1b      	ldr	r3, [pc, #108]	; (800ee08 <APP_ZIGBEE_ConfigEndpoints+0x104>)
 800ed9c:	4a16      	ldr	r2, [pc, #88]	; (800edf8 <APP_ZIGBEE_ConfigEndpoints+0xf4>)
 800ed9e:	f240 1121 	movw	r1, #289	; 0x121
 800eda2:	4816      	ldr	r0, [pc, #88]	; (800edfc <APP_ZIGBEE_ConfigEndpoints+0xf8>)
 800eda4:	f000 ff2a 	bl	800fbfc <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.messaging_client_1);
 800eda8:	4b11      	ldr	r3, [pc, #68]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800edaa:	699b      	ldr	r3, [r3, #24]
 800edac:	4618      	mov	r0, r3
 800edae:	f7fe f947 	bl	800d040 <ZbZclClusterEndpointRegister>

  zigbee_app_info.messaging_server_1 = ZbZclMsgServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &MsgServerCallbacks_1, NULL);
 800edb2:	4b0f      	ldr	r3, [pc, #60]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800edb4:	6858      	ldr	r0, [r3, #4]
 800edb6:	2300      	movs	r3, #0
 800edb8:	4a14      	ldr	r2, [pc, #80]	; (800ee0c <APP_ZIGBEE_ConfigEndpoints+0x108>)
 800edba:	2101      	movs	r1, #1
 800edbc:	f7f2 fe54 	bl	8001a68 <ZbZclMsgServerAlloc>
 800edc0:	4603      	mov	r3, r0
 800edc2:	4a0b      	ldr	r2, [pc, #44]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800edc4:	61d3      	str	r3, [r2, #28]
  assert(zigbee_app_info.messaging_server_1 != NULL);
 800edc6:	4b0a      	ldr	r3, [pc, #40]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800edc8:	69db      	ldr	r3, [r3, #28]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <APP_ZIGBEE_ConfigEndpoints+0xd8>
 800edce:	4b10      	ldr	r3, [pc, #64]	; (800ee10 <APP_ZIGBEE_ConfigEndpoints+0x10c>)
 800edd0:	4a09      	ldr	r2, [pc, #36]	; (800edf8 <APP_ZIGBEE_ConfigEndpoints+0xf4>)
 800edd2:	f240 1125 	movw	r1, #293	; 0x125
 800edd6:	4809      	ldr	r0, [pc, #36]	; (800edfc <APP_ZIGBEE_ConfigEndpoints+0xf8>)
 800edd8:	f000 ff10 	bl	800fbfc <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.messaging_server_1);
 800eddc:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <APP_ZIGBEE_ConfigEndpoints+0xec>)
 800edde:	69db      	ldr	r3, [r3, #28]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fe f92d 	bl	800d040 <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
} /* APP_ZIGBEE_ConfigEndpoints */
 800ede6:	bf00      	nop
 800ede8:	3720      	adds	r7, #32
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	2000122c 	.word	0x2000122c
 800edf4:	08011224 	.word	0x08011224
 800edf8:	080118ec 	.word	0x080118ec
 800edfc:	08011204 	.word	0x08011204
 800ee00:	08011248 	.word	0x08011248
 800ee04:	20000018 	.word	0x20000018
 800ee08:	08011270 	.word	0x08011270
 800ee0c:	20000028 	.word	0x20000028
 800ee10:	0801129c 	.word	0x0801129c

0800ee14 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 800ee14:	b590      	push	{r4, r7, lr}
 800ee16:	b0f9      	sub	sp, #484	; 0x1e4
 800ee18:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 800ee1a:	4b44      	ldr	r3, [pc, #272]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800ee1c:	7a5b      	ldrb	r3, [r3, #9]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d076      	beq.n	800ef10 <APP_ZIGBEE_NwkForm+0xfc>
 800ee22:	f7f9 fc83 	bl	800872c <HAL_GetTick>
 800ee26:	4602      	mov	r2, r0
 800ee28:	4b40      	ldr	r3, [pc, #256]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d36f      	bcc.n	800ef10 <APP_ZIGBEE_NwkForm+0xfc>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 800ee30:	4b3e      	ldr	r3, [pc, #248]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	211f      	movs	r1, #31
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fd faf7 	bl	800c42c <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 800ee3e:	463b      	mov	r3, r7
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fd fb8d 	bl	800c560 <ZbStartupConfigGetProDefaults>

    /* Set the distributed network */
    APP_DBG("Network config : APP_STARTUP_DISTRIBUTED");
 800ee46:	4a3a      	ldr	r2, [pc, #232]	; (800ef30 <APP_ZIGBEE_NwkForm+0x11c>)
 800ee48:	2101      	movs	r1, #1
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	f7f9 fa9e 	bl	800838c <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 800ee50:	4b36      	ldr	r3, [pc, #216]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800ee52:	7a1a      	ldrb	r2, [r3, #8]
 800ee54:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ee58:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ee5c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Set the TC address to be distributed. */
    config.security.trustCenterAddress = ZB_DISTRIBUTED_TC_ADDR;
 800ee60:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ee64:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 800ee68:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee70:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    /* Using the Uncertified Distributed Global Key (d0:d1:d2:d3:d4:d5:d6:d7:d8:d9:da:db:dc:dd:de:df) */
    memcpy(config.security.distributedGlobalKey, sec_key_distrib_uncert, ZB_SEC_KEYSIZE);
 800ee74:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ee78:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ee7c:	4a2d      	ldr	r2, [pc, #180]	; (800ef34 <APP_ZIGBEE_NwkForm+0x120>)
 800ee7e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800ee82:	4613      	mov	r3, r2
 800ee84:	6818      	ldr	r0, [r3, #0]
 800ee86:	6859      	ldr	r1, [r3, #4]
 800ee88:	689a      	ldr	r2, [r3, #8]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 800ee8e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ee92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ee96:	2201      	movs	r2, #1
 800ee98:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 800ee9a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800ee9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800eea2:	2200      	movs	r2, #0
 800eea4:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 800eea6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800eeaa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800eeae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eeb2:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 800eeb4:	4b1d      	ldr	r3, [pc, #116]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	463a      	mov	r2, r7
 800eeba:	4611      	mov	r1, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f000 f855 	bl	800ef6c <ZbStartupWait>
 800eec2:	4603      	mov	r3, r0
 800eec4:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 800eec8:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800eecc:	4a1a      	ldr	r2, [pc, #104]	; (800ef38 <APP_ZIGBEE_NwkForm+0x124>)
 800eece:	2101      	movs	r1, #1
 800eed0:	2000      	movs	r0, #0
 800eed2:	f7f9 fa5b 	bl	800838c <logApplication>
    zigbee_app_info.join_status = status;
 800eed6:	4a15      	ldr	r2, [pc, #84]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800eed8:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800eedc:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS) {
 800eede:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d103      	bne.n	800eeee <APP_ZIGBEE_NwkForm+0xda>
      /* USER CODE BEGIN 7 */
      zigbee_app_info.join_delay = 0U;
 800eee6:	4b11      	ldr	r3, [pc, #68]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	60da      	str	r2, [r3, #12]
 800eeec:	e010      	b.n	800ef10 <APP_ZIGBEE_NwkForm+0xfc>
    }
    else
    {
      /* USER CODE END 7 */
      zigbee_app_info.startupControl = ZbStartTypeForm;
 800eeee:	4b0f      	ldr	r3, [pc, #60]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800eef0:	2201      	movs	r2, #1
 800eef2:	721a      	strb	r2, [r3, #8]
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 800eef4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800eef8:	4a10      	ldr	r2, [pc, #64]	; (800ef3c <APP_ZIGBEE_NwkForm+0x128>)
 800eefa:	2101      	movs	r1, #1
 800eefc:	2000      	movs	r0, #0
 800eefe:	f7f9 fa45 	bl	800838c <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 800ef02:	f7f9 fc13 	bl	800872c <HAL_GetTick>
 800ef06:	4603      	mov	r3, r0
 800ef08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ef0c:	4a07      	ldr	r2, [pc, #28]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800ef0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 800ef10:	4b06      	ldr	r3, [pc, #24]	; (800ef2c <APP_ZIGBEE_NwkForm+0x118>)
 800ef12:	7a5b      	ldrb	r3, [r3, #9]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <APP_ZIGBEE_NwkForm+0x10c>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800ef18:	2100      	movs	r1, #0
 800ef1a:	2004      	movs	r0, #4
 800ef1c:	f000 fd8c 	bl	800fa38 <UTIL_SEQ_SetTask>
  }

  /* USER CODE BEGIN NW_FORM */
  /* USER CODE END NW_FORM */
} /* APP_ZIGBEE_NwkForm */
 800ef20:	bf00      	nop
 800ef22:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd90      	pop	{r4, r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	2000122c 	.word	0x2000122c
 800ef30:	080112c8 	.word	0x080112c8
 800ef34:	08011648 	.word	0x08011648
 800ef38:	080112f4 	.word	0x080112f4
 800ef3c:	0801131c 	.word	0x0801131c

0800ef40 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4603      	mov	r3, r0
 800ef48:	6039      	str	r1, [r7, #0]
 800ef4a:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	60fb      	str	r3, [r7, #12]

  info->status = status;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	79fa      	ldrb	r2, [r7, #7]
 800ef54:	705a      	strb	r2, [r3, #1]
  info->active = false;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800ef5c:	2008      	movs	r0, #8
 800ef5e:	f000 fd97 	bl	800fa90 <UTIL_SEQ_SetEvt>
} /* ZbStartupWaitCb */
 800ef62:	bf00      	nop
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
	...

0800ef6c <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 800ef76:	2002      	movs	r0, #2
 800ef78:	f000 fe9a 	bl	800fcb0 <malloc>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	60fb      	str	r3, [r7, #12]
  if (info == NULL) {
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d101      	bne.n	800ef8a <ZbStartupWait+0x1e>
    return ZB_STATUS_ALLOC_FAIL;
 800ef86:	2370      	movs	r3, #112	; 0x70
 800ef88:	e021      	b.n	800efce <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f000 feac 	bl	800fcec <memset>

  info->active = true;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2201      	movs	r2, #1
 800ef98:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	4a0e      	ldr	r2, [pc, #56]	; (800efd8 <ZbStartupWait+0x6c>)
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7fd fb05 	bl	800c5b0 <ZbStartup>
 800efa6:	4603      	mov	r3, r0
 800efa8:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS) {
 800efaa:	7afb      	ldrb	r3, [r7, #11]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <ZbStartupWait+0x4e>
    info->active = false;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	701a      	strb	r2, [r3, #0]
    return status;
 800efb6:	7afb      	ldrb	r3, [r7, #11]
 800efb8:	e009      	b.n	800efce <ZbStartupWait+0x62>
  }
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800efba:	2008      	movs	r0, #8
 800efbc:	f000 fd88 	bl	800fad0 <UTIL_SEQ_WaitEvt>
  status = info->status;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	785b      	ldrb	r3, [r3, #1]
 800efc4:	72fb      	strb	r3, [r7, #11]
  free(info);
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f000 fe7a 	bl	800fcc0 <free>
  return status;
 800efcc:	7afb      	ldrb	r3, [r7, #11]
} /* ZbStartupWait */
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	0800ef41 	.word	0x0800ef41

0800efdc <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  switch (ErrId) {
  default:
    APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 800efe6:	2100      	movs	r1, #0
 800efe8:	4803      	ldr	r0, [pc, #12]	; (800eff8 <APP_ZIGBEE_Error+0x1c>)
 800efea:	f000 f807 	bl	800effc <APP_ZIGBEE_TraceError>
    break;
 800efee:	bf00      	nop
  }
} /* APP_ZIGBEE_Error */
 800eff0:	bf00      	nop
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	0801135c 	.word	0x0801135c

0800effc <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af02      	add	r7, sp, #8
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4a04      	ldr	r2, [pc, #16]	; (800f020 <APP_ZIGBEE_TraceError+0x24>)
 800f00e:	2101      	movs	r1, #1
 800f010:	2000      	movs	r0, #0
 800f012:	f7f9 f9bb 	bl	800838c <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  /* USER CODE END TRACE_ERROR */

} /* APP_ZIGBEE_TraceError */
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	0801136c 	.word	0x0801136c

0800f024 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b098      	sub	sp, #96	; 0x60
 800f028:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800f02a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f02e:	657b      	str	r3, [r7, #84]	; 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800f030:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f032:	f7fc fcc3 	bl	800b9bc <SHCI_GetWirelessFwInfo>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d004      	beq.n	800f046 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f03c:	2101      	movs	r1, #1
 800f03e:	2002      	movs	r0, #2
 800f040:	f7ff ffcc 	bl	800efdc <APP_ZIGBEE_Error>
    /* print clusters allocated */
    APP_DBG("Clusters allocated are:");
    APP_DBG("OnOff Client on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 800f044:	e083      	b.n	800f14e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x12a>
    APP_DBG("**********************************************************");
 800f046:	4a44      	ldr	r2, [pc, #272]	; (800f158 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 800f048:	2101      	movs	r1, #1
 800f04a:	2000      	movs	r0, #0
 800f04c:	f7f9 f99e 	bl	800838c <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800f050:	4a42      	ldr	r2, [pc, #264]	; (800f15c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 800f052:	2101      	movs	r1, #1
 800f054:	2000      	movs	r0, #0
 800f056:	f7f9 f999 	bl	800838c <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800f05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	4619      	mov	r1, r3
 800f060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f062:	785b      	ldrb	r3, [r3, #1]
 800f064:	461a      	mov	r2, r3
 800f066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f068:	789b      	ldrb	r3, [r3, #2]
 800f06a:	9301      	str	r3, [sp, #4]
 800f06c:	9200      	str	r2, [sp, #0]
 800f06e:	460b      	mov	r3, r1
 800f070:	4a3b      	ldr	r2, [pc, #236]	; (800f160 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 800f072:	2101      	movs	r1, #1
 800f074:	2000      	movs	r0, #0
 800f076:	f7f9 f989 	bl	800838c <logApplication>
    switch (p_wireless_info->StackType)
 800f07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f07c:	7a5b      	ldrb	r3, [r3, #9]
 800f07e:	2b30      	cmp	r3, #48	; 0x30
 800f080:	d002      	beq.n	800f088 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 800f082:	2b31      	cmp	r3, #49	; 0x31
 800f084:	d006      	beq.n	800f094 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 800f086:	e00b      	b.n	800f0a0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
        APP_DBG("FW Type : FFD Zigbee stack");
 800f088:	4a36      	ldr	r2, [pc, #216]	; (800f164 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 800f08a:	2101      	movs	r1, #1
 800f08c:	2000      	movs	r0, #0
 800f08e:	f7f9 f97d 	bl	800838c <logApplication>
        break;
 800f092:	e00a      	b.n	800f0aa <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_DBG("FW Type : RFD Zigbee stack");
 800f094:	4a34      	ldr	r2, [pc, #208]	; (800f168 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 800f096:	2101      	movs	r1, #1
 800f098:	2000      	movs	r0, #0
 800f09a:	f7f9 f977 	bl	800838c <logApplication>
        break;
 800f09e:	e004      	b.n	800f0aa <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	2002      	movs	r0, #2
 800f0a4:	f7ff ff9a 	bl	800efdc <APP_ZIGBEE_Error>
        break;
 800f0a8:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800f0aa:	4b30      	ldr	r3, [pc, #192]	; (800f16c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800f0ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    char *pdel = NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	64bb      	str	r3, [r7, #72]	; 0x48
      pdel = strchr(__PathProject__, '/');
 800f0b2:	212f      	movs	r1, #47	; 0x2f
 800f0b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f0b6:	f001 fa1f 	bl	80104f8 <strchr>
 800f0ba:	64b8      	str	r0, [r7, #72]	; 0x48
    int index = (int)(pdel - __PathProject__);
 800f0bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	647b      	str	r3, [r7, #68]	; 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 800f0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0c6:	9301      	str	r3, [sp, #4]
 800f0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ce:	4a28      	ldr	r2, [pc, #160]	; (800f170 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	f7f9 f95a 	bl	800838c <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 800f0d8:	230b      	movs	r3, #11
 800f0da:	4a26      	ldr	r2, [pc, #152]	; (800f174 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 800f0dc:	2101      	movs	r1, #1
 800f0de:	2000      	movs	r0, #0
 800f0e0:	f7f9 f954 	bl	800838c <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 800f0e4:	4b24      	ldr	r3, [pc, #144]	; (800f178 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 800f0e6:	4a25      	ldr	r2, [pc, #148]	; (800f17c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	f7f9 f94e 	bl	800838c <logApplication>
    Z09_LL_string[0] = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	703b      	strb	r3, [r7, #0]
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f0f8:	e010      	b.n	800f11c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf8>
      sprintf(&Z09_LL_string[str_index*3],"%02x ",sec_key_ha[str_index]);
 800f0fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	4413      	add	r3, r2
 800f102:	463a      	mov	r2, r7
 800f104:	18d0      	adds	r0, r2, r3
 800f106:	4a1c      	ldr	r2, [pc, #112]	; (800f178 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 800f108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f10a:	4413      	add	r3, r2
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	491b      	ldr	r1, [pc, #108]	; (800f180 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 800f112:	f001 f9d1 	bl	80104b8 <siprintf>
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800f116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f118:	3301      	adds	r3, #1
 800f11a:	653b      	str	r3, [r7, #80]	; 0x50
 800f11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11e:	2b0f      	cmp	r3, #15
 800f120:	d9eb      	bls.n	800f0fa <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd6>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 800f122:	463b      	mov	r3, r7
 800f124:	4a17      	ldr	r2, [pc, #92]	; (800f184 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 800f126:	2101      	movs	r1, #1
 800f128:	2000      	movs	r0, #0
 800f12a:	f7f9 f92f 	bl	800838c <logApplication>
    APP_DBG("Clusters allocated are:");
 800f12e:	4a16      	ldr	r2, [pc, #88]	; (800f188 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 800f130:	2101      	movs	r1, #1
 800f132:	2000      	movs	r0, #0
 800f134:	f7f9 f92a 	bl	800838c <logApplication>
    APP_DBG("OnOff Client on Endpoint %d", SW1_ENDPOINT);
 800f138:	2301      	movs	r3, #1
 800f13a:	4a14      	ldr	r2, [pc, #80]	; (800f18c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 800f13c:	2101      	movs	r1, #1
 800f13e:	2000      	movs	r0, #0
 800f140:	f7f9 f924 	bl	800838c <logApplication>
    APP_DBG("**********************************************************");
 800f144:	4a04      	ldr	r2, [pc, #16]	; (800f158 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 800f146:	2101      	movs	r1, #1
 800f148:	2000      	movs	r0, #0
 800f14a:	f7f9 f91f 	bl	800838c <logApplication>
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 800f14e:	bf00      	nop
 800f150:	3758      	adds	r7, #88	; 0x58
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	08011390 	.word	0x08011390
 800f15c:	080113cc 	.word	0x080113cc
 800f160:	080113e8 	.word	0x080113e8
 800f164:	08011400 	.word	0x08011400
 800f168:	0801141c 	.word	0x0801141c
 800f16c:	08011204 	.word	0x08011204
 800f170:	08011438 	.word	0x08011438
 800f174:	08011454 	.word	0x08011454
 800f178:	08011638 	.word	0x08011638
 800f17c:	08011468 	.word	0x08011468
 800f180:	08011478 	.word	0x08011478
 800f184:	08011480 	.word	0x08011480
 800f188:	08011494 	.word	0x08011494
 800f18c:	080114ac 	.word	0x080114ac

0800f190 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 800f198:	4a04      	ldr	r2, [pc, #16]	; (800f1ac <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6013      	str	r3, [r2, #0]
} /* APP_ZIGBEE_RegisterCmdBuffer */
 800f19e:	bf00      	nop
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	20001218 	.word	0x20001218

0800f1b0 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800f1b4:	4b03      	ldr	r3, [pc, #12]	; (800f1c4 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	330c      	adds	r3, #12
} /* ZIGBEE_Get_OTCmdPayloadBuffer */
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20001218 	.word	0x20001218

0800f1c8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800f1cc:	4b03      	ldr	r3, [pc, #12]	; (800f1dc <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	330b      	adds	r3, #11
} /* ZIGBEE_Get_OTCmdRspPayloadBuffer */
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	20001218 	.word	0x20001218

0800f1e0 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 800f1e4:	4b03      	ldr	r3, [pc, #12]	; (800f1f4 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	330b      	adds	r3, #11
} /* ZIGBEE_Get_NotificationPayloadBuffer */
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	2000121c 	.word	0x2000121c

0800f1f8 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 800f1fc:	4b03      	ldr	r3, [pc, #12]	; (800f20c <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	330b      	adds	r3, #11
}
 800f202:	4618      	mov	r0, r3
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr
 800f20c:	20001220 	.word	0x20001220

0800f210 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800f216:	4b0f      	ldr	r3, [pc, #60]	; (800f254 <ZIGBEE_CmdTransfer+0x44>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	330c      	adds	r3, #12
 800f21c:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800f21e:	4b0d      	ldr	r3, [pc, #52]	; (800f254 <ZIGBEE_CmdTransfer+0x44>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2200      	movs	r2, #0
 800f224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f228:	725a      	strb	r2, [r3, #9]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f042 0202 	orr.w	r2, r2, #2
 800f230:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	3302      	adds	r3, #2
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	4b06      	ldr	r3, [pc, #24]	; (800f254 <ZIGBEE_CmdTransfer+0x44>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	0092      	lsls	r2, r2, #2
 800f240:	b2d2      	uxtb	r2, r2
 800f242:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 800f244:	f7fc fe3e 	bl	800bec4 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800f248:	f000 f80d 	bl	800f266 <Wait_Getting_Ack_From_M0>
} /* ZIGBEE_CmdTransfer */
 800f24c:	bf00      	nop
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	20001218 	.word	0x20001218

0800f258 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800f25c:	2004      	movs	r0, #4
 800f25e:	f000 fc37 	bl	800fad0 <UTIL_SEQ_WaitEvt>
} /* Pre_ZigbeeCmdProcessing */
 800f262:	bf00      	nop
 800f264:	bd80      	pop	{r7, pc}

0800f266 <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800f26a:	2002      	movs	r0, #2
 800f26c:	f000 fc30 	bl	800fad0 <UTIL_SEQ_WaitEvt>
} /* Wait_Getting_Ack_From_M0 */
 800f270:	bf00      	nop
 800f272:	bd80      	pop	{r7, pc}

0800f274 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	af00      	add	r7, sp, #0
    ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 800f278:	4b06      	ldr	r3, [pc, #24]	; (800f294 <APP_ZIGBEE_TL_INIT+0x20>)
 800f27a:	4a07      	ldr	r2, [pc, #28]	; (800f298 <APP_ZIGBEE_TL_INIT+0x24>)
 800f27c:	601a      	str	r2, [r3, #0]
    ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 800f27e:	4b05      	ldr	r3, [pc, #20]	; (800f294 <APP_ZIGBEE_TL_INIT+0x20>)
 800f280:	4a06      	ldr	r2, [pc, #24]	; (800f29c <APP_ZIGBEE_TL_INIT+0x28>)
 800f282:	605a      	str	r2, [r3, #4]
    ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 800f284:	4b03      	ldr	r3, [pc, #12]	; (800f294 <APP_ZIGBEE_TL_INIT+0x20>)
 800f286:	4a06      	ldr	r2, [pc, #24]	; (800f2a0 <APP_ZIGBEE_TL_INIT+0x2c>)
 800f288:	609a      	str	r2, [r3, #8]
    TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 800f28a:	4802      	ldr	r0, [pc, #8]	; (800f294 <APP_ZIGBEE_TL_INIT+0x20>)
 800f28c:	f7fc fdfe 	bl	800be8c <TL_ZIGBEE_Init>
}
 800f290:	bf00      	nop
 800f292:	bd80      	pop	{r7, pc}
 800f294:	200300d8 	.word	0x200300d8
 800f298:	200007f4 	.word	0x200007f4
 800f29c:	20000900 	.word	0x20000900
 800f2a0:	20000a0c 	.word	0x20000a0c

0800f2a4 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	af00      	add	r7, sp, #0
    if (CptReceiveNotifyFromM0 != 0) {
 800f2a8:	4b09      	ldr	r3, [pc, #36]	; (800f2d0 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00d      	beq.n	800f2cc <APP_ZIGBEE_ProcessNotifyM0ToM4+0x28>
        /* If CptReceiveNotifyFromM0 is > 1. it means that we did not serve all the events from the radio */
        if (CptReceiveNotifyFromM0 > 1U) {
 800f2b0:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d904      	bls.n	800f2c2 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1e>
            APP_ZIGBEE_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	f7ff fe8e 	bl	800efdc <APP_ZIGBEE_Error>
 800f2c0:	e001      	b.n	800f2c6 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x22>
        }
        else {
            Zigbee_CallBackProcessing();
 800f2c2:	f7fd fffd 	bl	800d2c0 <Zigbee_CallBackProcessing>
        }
        /* Reset counter */
        CptReceiveNotifyFromM0 = 0;
 800f2c6:	4b02      	ldr	r3, [pc, #8]	; (800f2d0 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]
    }
}
 800f2cc:	bf00      	nop
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	20001224 	.word	0x20001224

0800f2d4 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param
 * @return
 */
void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	af00      	add	r7, sp, #0
    if (CptReceiveRequestFromM0 != 0) {
 800f2d8:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d004      	beq.n	800f2ea <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
        Zigbee_M0RequestProcessing();
 800f2e0:	f7ff fb74 	bl	800e9cc <Zigbee_M0RequestProcessing>
        CptReceiveRequestFromM0 = 0;
 800f2e4:	4b02      	ldr	r3, [pc, #8]	; (800f2f0 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	601a      	str	r2, [r3, #0]
    }
}
 800f2ea:	bf00      	nop
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	20001228 	.word	0x20001228

0800f2f4 <APP_ZIGBEE_InitMsg>:
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void APP_ZIGBEE_InitMsg(void)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	af00      	add	r7, sp, #0

        /* Be careful - Message MAX length is 59 chars */
        my_first_message.message_id=0x00;
 800f2f8:	4b19      	ldr	r3, [pc, #100]	; (800f360 <APP_ZIGBEE_InitMsg+0x6c>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]
        my_first_message.start_time=0x00000100;
 800f2fe:	4b18      	ldr	r3, [pc, #96]	; (800f360 <APP_ZIGBEE_InitMsg+0x6c>)
 800f300:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f304:	605a      	str	r2, [r3, #4]
        /* Display message for 5 mn */
        my_first_message.duration=0x0005;
 800f306:	4b16      	ldr	r3, [pc, #88]	; (800f360 <APP_ZIGBEE_InitMsg+0x6c>)
 800f308:	2205      	movs	r2, #5
 800f30a:	811a      	strh	r2, [r3, #8]
        /* High priority message */
        my_first_message.message_control=0x08;
 800f30c:	4b14      	ldr	r3, [pc, #80]	; (800f360 <APP_ZIGBEE_InitMsg+0x6c>)
 800f30e:	2208      	movs	r2, #8
 800f310:	729a      	strb	r2, [r3, #10]
        strcpy(my_first_message.message_str,"open");
 800f312:	4b14      	ldr	r3, [pc, #80]	; (800f364 <APP_ZIGBEE_InitMsg+0x70>)
 800f314:	4a14      	ldr	r2, [pc, #80]	; (800f368 <APP_ZIGBEE_InitMsg+0x74>)
 800f316:	6810      	ldr	r0, [r2, #0]
 800f318:	6018      	str	r0, [r3, #0]
 800f31a:	7912      	ldrb	r2, [r2, #4]
 800f31c:	711a      	strb	r2, [r3, #4]
        my_first_message.extended_control=0x00;
 800f31e:	4b10      	ldr	r3, [pc, #64]	; (800f360 <APP_ZIGBEE_InitMsg+0x6c>)
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        my_second_message.message_id=0x01;
 800f326:	4b11      	ldr	r3, [pc, #68]	; (800f36c <APP_ZIGBEE_InitMsg+0x78>)
 800f328:	2201      	movs	r2, #1
 800f32a:	601a      	str	r2, [r3, #0]
        my_second_message.start_time=0x00000100;
 800f32c:	4b0f      	ldr	r3, [pc, #60]	; (800f36c <APP_ZIGBEE_InitMsg+0x78>)
 800f32e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f332:	605a      	str	r2, [r3, #4]
        /* Display message for 5 mn */
        my_second_message.duration=0x0005;
 800f334:	4b0d      	ldr	r3, [pc, #52]	; (800f36c <APP_ZIGBEE_InitMsg+0x78>)
 800f336:	2205      	movs	r2, #5
 800f338:	811a      	strh	r2, [r3, #8]
        /* High priority message */
        my_second_message.message_control=0x08;
 800f33a:	4b0c      	ldr	r3, [pc, #48]	; (800f36c <APP_ZIGBEE_InitMsg+0x78>)
 800f33c:	2208      	movs	r2, #8
 800f33e:	729a      	strb	r2, [r3, #10]
        strcpy(my_second_message.message_str,"close");
 800f340:	4b0b      	ldr	r3, [pc, #44]	; (800f370 <APP_ZIGBEE_InitMsg+0x7c>)
 800f342:	4a0c      	ldr	r2, [pc, #48]	; (800f374 <APP_ZIGBEE_InitMsg+0x80>)
 800f344:	6810      	ldr	r0, [r2, #0]
 800f346:	6018      	str	r0, [r3, #0]
 800f348:	8892      	ldrh	r2, [r2, #4]
 800f34a:	809a      	strh	r2, [r3, #4]
        my_second_message.extended_control=0x00;
 800f34c:	4b07      	ldr	r3, [pc, #28]	; (800f36c <APP_ZIGBEE_InitMsg+0x78>)
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

}
 800f354:	bf00      	nop
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	2000124c 	.word	0x2000124c
 800f364:	20001257 	.word	0x20001257
 800f368:	080114c8 	.word	0x080114c8
 800f36c:	20001294 	.word	0x20001294
 800f370:	2000129f 	.word	0x2000129f
 800f374:	080114d0 	.word	0x080114d0

0800f378 <APP_ZIGBEE_SW1_Process>:

static void APP_ZIGBEE_SW1_Process()
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b094      	sub	sp, #80	; 0x50
 800f37c:	af02      	add	r7, sp, #8
  struct ZbApsAddrT dst;
  uint64_t epid = 0U;
 800f37e:	f04f 0200 	mov.w	r2, #0
 800f382:	f04f 0300 	mov.w	r3, #0
 800f386:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  if(zigbee_app_info.zb == NULL){
 800f38a:	4b33      	ldr	r3, [pc, #204]	; (800f458 <APP_ZIGBEE_SW1_Process+0xe0>)
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d059      	beq.n	800f446 <APP_ZIGBEE_SW1_Process+0xce>
    return;
  }

  /* Check if the router joined the network */
  if (ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(epid)) != ZB_STATUS_SUCCESS) {
 800f392:	4b31      	ldr	r3, [pc, #196]	; (800f458 <APP_ZIGBEE_SW1_Process+0xe0>)
 800f394:	6858      	ldr	r0, [r3, #4]
 800f396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f39a:	2308      	movs	r3, #8
 800f39c:	219a      	movs	r1, #154	; 0x9a
 800f39e:	f7fd fccd 	bl	800cd3c <ZbNwkGet>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d150      	bne.n	800f44a <APP_ZIGBEE_SW1_Process+0xd2>
    return;
  }
  if (epid == 0U) {
 800f3a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	d04e      	beq.n	800f44e <APP_ZIGBEE_SW1_Process+0xd6>
    return;
  }


  memset(&dst, 0, sizeof(dst));
 800f3b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f3b4:	2210      	movs	r2, #16
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f000 fc97 	bl	800fcec <memset>
  dst.mode = ZB_APSDE_ADDRMODE_SHORT;
 800f3be:	2302      	movs	r3, #2
 800f3c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  dst.endpoint = SW1_ENDPOINT;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	867b      	strh	r3, [r7, #50]	; 0x32
  struct ZbNwkNeighborT neighbor;
  uint16_t i=0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint8_t lv_AgeLimit;

  ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_RouterAgeLimit, &lv_AgeLimit, sizeof(uint8_t));
 800f3ce:	4b22      	ldr	r3, [pc, #136]	; (800f458 <APP_ZIGBEE_SW1_Process+0xe0>)
 800f3d0:	6858      	ldr	r0, [r3, #4]
 800f3d2:	1dfa      	adds	r2, r7, #7
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	21a7      	movs	r1, #167	; 0xa7
 800f3d8:	f7fd fcb0 	bl	800cd3c <ZbNwkGet>

  while (ZbNwkGetIndex(zigbee_app_info.zb, ZB_NWK_NIB_ID_NeighborTable,
 800f3dc:	e00a      	b.n	800f3f4 <APP_ZIGBEE_SW1_Process+0x7c>
           &neighbor, sizeof(neighbor), i++) == ZB_NWK_STATUS_SUCCESS) {

          /* Check if this is a stale entry. */
          if((neighbor.nwkAddr != ZB_NWK_ADDR_UNDEFINED) &&
 800f3de:	8a3b      	ldrh	r3, [r7, #16]
 800f3e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d005      	beq.n	800f3f4 <APP_ZIGBEE_SW1_Process+0x7c>
              (neighbor.age <= lv_AgeLimit)) {
 800f3e8:	7e7a      	ldrb	r2, [r7, #25]
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
          if((neighbor.nwkAddr != ZB_NWK_ADDR_UNDEFINED) &&
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d801      	bhi.n	800f3f4 <APP_ZIGBEE_SW1_Process+0x7c>

              dst.nwkAddr = neighbor.nwkAddr;
 800f3f0:	8a3b      	ldrh	r3, [r7, #16]
 800f3f2:	86fb      	strh	r3, [r7, #54]	; 0x36
  while (ZbNwkGetIndex(zigbee_app_info.zb, ZB_NWK_NIB_ID_NeighborTable,
 800f3f4:	4b18      	ldr	r3, [pc, #96]	; (800f458 <APP_ZIGBEE_SW1_Process+0xe0>)
 800f3f6:	6858      	ldr	r0, [r3, #4]
           &neighbor, sizeof(neighbor), i++) == ZB_NWK_STATUS_SUCCESS) {
 800f3f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f3fc:	1c5a      	adds	r2, r3, #1
 800f3fe:	f8a7 2046 	strh.w	r2, [r7, #70]	; 0x46
  while (ZbNwkGetIndex(zigbee_app_info.zb, ZB_NWK_NIB_ID_NeighborTable,
 800f402:	f107 0208 	add.w	r2, r7, #8
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	2320      	movs	r3, #32
 800f40a:	2187      	movs	r1, #135	; 0x87
 800f40c:	f7fd fc5c 	bl	800ccc8 <ZbNwkGetIndex>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0e3      	beq.n	800f3de <APP_ZIGBEE_SW1_Process+0x66>
          }

  }

  APP_DBG("SW1 PUSHED");
 800f416:	4a11      	ldr	r2, [pc, #68]	; (800f45c <APP_ZIGBEE_SW1_Process+0xe4>)
 800f418:	2101      	movs	r1, #1
 800f41a:	2000      	movs	r0, #0
 800f41c:	f7f8 ffb6 	bl	800838c <logApplication>
  if (ZbZclMsgServerDisplayMessageReq(zigbee_app_info.messaging_client_1, &dst, &my_first_message, NULL, NULL) != ZCL_STATUS_SUCCESS) {
 800f420:	4b0d      	ldr	r3, [pc, #52]	; (800f458 <APP_ZIGBEE_SW1_Process+0xe0>)
 800f422:	6998      	ldr	r0, [r3, #24]
 800f424:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f428:	2300      	movs	r3, #0
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	2300      	movs	r3, #0
 800f42e:	4a0c      	ldr	r2, [pc, #48]	; (800f460 <APP_ZIGBEE_SW1_Process+0xe8>)
 800f430:	f7f2 fbe3 	bl	8001bfa <ZbZclMsgServerDisplayMessageReq>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00a      	beq.n	800f450 <APP_ZIGBEE_SW1_Process+0xd8>
    APP_DBG("Error, ZbZclMsgServerDisplayMessageReq failed (SW1_ENDPOINT)");
 800f43a:	4a0a      	ldr	r2, [pc, #40]	; (800f464 <APP_ZIGBEE_SW1_Process+0xec>)
 800f43c:	2101      	movs	r1, #1
 800f43e:	2000      	movs	r0, #0
 800f440:	f7f8 ffa4 	bl	800838c <logApplication>
 800f444:	e004      	b.n	800f450 <APP_ZIGBEE_SW1_Process+0xd8>
    return;
 800f446:	bf00      	nop
 800f448:	e002      	b.n	800f450 <APP_ZIGBEE_SW1_Process+0xd8>
    return;
 800f44a:	bf00      	nop
 800f44c:	e000      	b.n	800f450 <APP_ZIGBEE_SW1_Process+0xd8>
    return;
 800f44e:	bf00      	nop
  }
}
 800f450:	3748      	adds	r7, #72	; 0x48
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	2000122c 	.word	0x2000122c
 800f45c:	080114d8 	.word	0x080114d8
 800f460:	2000124c 	.word	0x2000124c
 800f464:	080114e4 	.word	0x080114e4

0800f468 <LL_PWR_EnableBootC2>:
{
 800f468:	b480      	push	{r7}
 800f46a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f46c:	4b05      	ldr	r3, [pc, #20]	; (800f484 <LL_PWR_EnableBootC2+0x1c>)
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	4a04      	ldr	r2, [pc, #16]	; (800f484 <LL_PWR_EnableBootC2+0x1c>)
 800f472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f476:	60d3      	str	r3, [r2, #12]
}
 800f478:	bf00      	nop
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	58000400 	.word	0x58000400

0800f488 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f490:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f492:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800f496:	4905      	ldr	r1, [pc, #20]	; (800f4ac <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4313      	orrs	r3, r2
 800f49c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	58000800 	.word	0x58000800

0800f4b0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f4b8:	4b05      	ldr	r3, [pc, #20]	; (800f4d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f4ba:	6a1a      	ldr	r2, [r3, #32]
 800f4bc:	4904      	ldr	r1, [pc, #16]	; (800f4d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	620b      	str	r3, [r1, #32]
}
 800f4c4:	bf00      	nop
 800f4c6:	370c      	adds	r7, #12
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr
 800f4d0:	58000800 	.word	0x58000800

0800f4d4 <LL_AHB3_GRP1_EnableClock>:
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f4dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f4ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
}
 800f4fa:	bf00      	nop
 800f4fc:	3714      	adds	r7, #20
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f506:	b480      	push	{r7}
 800f508:	b085      	sub	sp, #20
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f50e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f512:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f526:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4013      	ands	r3, r2
 800f52e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f530:	68fb      	ldr	r3, [r7, #12]
}
 800f532:	bf00      	nop
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <LL_C1_IPCC_EnableIT_TXF>:
{
 800f53e:	b480      	push	{r7}
 800f540:	b083      	sub	sp, #12
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	601a      	str	r2, [r3, #0]
}
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <LL_C1_IPCC_EnableIT_RXO>:
{
 800f55e:	b480      	push	{r7}
 800f560:	b083      	sub	sp, #12
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f043 0201 	orr.w	r2, r3, #1
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	601a      	str	r2, [r3, #0]
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	041b      	lsls	r3, r3, #16
 800f590:	43db      	mvns	r3, r3
 800f592:	401a      	ands	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	605a      	str	r2, [r3, #4]
}
 800f598:	bf00      	nop
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	43db      	mvns	r3, r3
 800f5b6:	401a      	ands	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	605a      	str	r2, [r3, #4]
}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	683a      	ldr	r2, [r7, #0]
 800f5d6:	609a      	str	r2, [r3, #8]
}
 800f5d8:	bf00      	nop
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <LL_C1_IPCC_SetFlag_CHx>:
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	041a      	lsls	r2, r3, #16
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	609a      	str	r2, [r3, #8]
}
 800f5f6:	bf00      	nop
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
 800f60a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	68da      	ldr	r2, [r3, #12]
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	4013      	ands	r3, r2
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	429a      	cmp	r2, r3
 800f618:	d101      	bne.n	800f61e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e000      	b.n	800f620 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f630:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f634:	f7ff ff67 	bl	800f506 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f638:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f63c:	f7ff ff38 	bl	800f4b0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f640:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f644:	f7ff ff20 	bl	800f488 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f648:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f64a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f64c:	f7ff ff0c 	bl	800f468 <LL_PWR_EnableBootC2>

  return;
 800f650:	bf00      	nop
}
 800f652:	bd80      	pop	{r7, pc}

0800f654 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f658:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f65c:	f7ff ff3a 	bl	800f4d4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f660:	4806      	ldr	r0, [pc, #24]	; (800f67c <HW_IPCC_Init+0x28>)
 800f662:	f7ff ff7c 	bl	800f55e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f666:	4805      	ldr	r0, [pc, #20]	; (800f67c <HW_IPCC_Init+0x28>)
 800f668:	f7ff ff69 	bl	800f53e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f66c:	202c      	movs	r0, #44	; 0x2c
 800f66e:	f7f9 f9b2 	bl	80089d6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f672:	202d      	movs	r0, #45	; 0x2d
 800f674:	f7f9 f9af 	bl	80089d6 <HAL_NVIC_EnableIRQ>

  return;
 800f678:	bf00      	nop
}
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	58000c00 	.word	0x58000c00

0800f680 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f684:	2102      	movs	r1, #2
 800f686:	4802      	ldr	r0, [pc, #8]	; (800f690 <HW_IPCC_SYS_Init+0x10>)
 800f688:	f7ff ff8c 	bl	800f5a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f68c:	bf00      	nop
}
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	58000c00 	.word	0x58000c00

0800f694 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f698:	2102      	movs	r1, #2
 800f69a:	4804      	ldr	r0, [pc, #16]	; (800f6ac <HW_IPCC_SYS_SendCmd+0x18>)
 800f69c:	f7ff ffa2 	bl	800f5e4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f6a0:	2102      	movs	r1, #2
 800f6a2:	4802      	ldr	r0, [pc, #8]	; (800f6ac <HW_IPCC_SYS_SendCmd+0x18>)
 800f6a4:	f7ff ff6b 	bl	800f57e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f6a8:	bf00      	nop
}
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	58000c00 	.word	0x58000c00

0800f6b0 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800f6b4:	2104      	movs	r1, #4
 800f6b6:	4804      	ldr	r0, [pc, #16]	; (800f6c8 <HW_IPCC_ZIGBEE_Init+0x18>)
 800f6b8:	f7ff ff74 	bl	800f5a4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800f6bc:	2110      	movs	r1, #16
 800f6be:	4802      	ldr	r0, [pc, #8]	; (800f6c8 <HW_IPCC_ZIGBEE_Init+0x18>)
 800f6c0:	f7ff ff70 	bl	800f5a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f6c4:	bf00      	nop
}
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	58000c00 	.word	0x58000c00

0800f6cc <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800f6d0:	2104      	movs	r1, #4
 800f6d2:	4804      	ldr	r0, [pc, #16]	; (800f6e4 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800f6d4:	f7ff ff86 	bl	800f5e4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800f6d8:	2104      	movs	r1, #4
 800f6da:	4802      	ldr	r0, [pc, #8]	; (800f6e4 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800f6dc:	f7ff ff4f 	bl	800f57e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f6e0:	bf00      	nop
}
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	58000c00 	.word	0x58000c00

0800f6e8 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800f6ec:	2104      	movs	r1, #4
 800f6ee:	4804      	ldr	r0, [pc, #16]	; (800f700 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800f6f0:	f7ff ff6a 	bl	800f5c8 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800f6f4:	2104      	movs	r1, #4
 800f6f6:	4802      	ldr	r0, [pc, #8]	; (800f700 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800f6f8:	f7ff ff54 	bl	800f5a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f6fc:	bf00      	nop
}
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	58000c00 	.word	0x58000c00

0800f704 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

  return;
}

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800f708:	2110      	movs	r1, #16
 800f70a:	4804      	ldr	r0, [pc, #16]	; (800f71c <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800f70c:	f7ff ff5c 	bl	800f5c8 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800f710:	2110      	movs	r1, #16
 800f712:	4802      	ldr	r0, [pc, #8]	; (800f71c <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800f714:	f7ff ff46 	bl	800f5a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f718:	bf00      	nop
}
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	58000c00 	.word	0x58000c00

0800f720 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f728:	2108      	movs	r1, #8
 800f72a:	480c      	ldr	r0, [pc, #48]	; (800f75c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f72c:	f7ff ff69 	bl	800f602 <LL_C1_IPCC_IsActiveFlag_CHx>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d007      	beq.n	800f746 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f736:	4a0a      	ldr	r2, [pc, #40]	; (800f760 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f73c:	2108      	movs	r1, #8
 800f73e:	4807      	ldr	r0, [pc, #28]	; (800f75c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f740:	f7ff ff1d 	bl	800f57e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800f744:	e006      	b.n	800f754 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f74a:	2108      	movs	r1, #8
 800f74c:	4803      	ldr	r0, [pc, #12]	; (800f75c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f74e:	f7ff ff49 	bl	800f5e4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800f752:	bf00      	nop
}
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	58000c00 	.word	0x58000c00
 800f760:	200012dc 	.word	0x200012dc

0800f764 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f768:	2108      	movs	r1, #8
 800f76a:	4802      	ldr	r0, [pc, #8]	; (800f774 <HW_IPCC_TRACES_Init+0x10>)
 800f76c:	f7ff ff1a 	bl	800f5a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f770:	bf00      	nop
}
 800f772:	bd80      	pop	{r7, pc}
 800f774:	58000c00 	.word	0x58000c00

0800f778 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800f778:	b480      	push	{r7}
 800f77a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f77c:	4b05      	ldr	r3, [pc, #20]	; (800f794 <UTIL_LPM_Init+0x1c>)
 800f77e:	2200      	movs	r2, #0
 800f780:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f782:	4b05      	ldr	r3, [pc, #20]	; (800f798 <UTIL_LPM_Init+0x20>)
 800f784:	2200      	movs	r2, #0
 800f786:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f788:	bf00      	nop
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	200012e0 	.word	0x200012e0
 800f798:	200012e4 	.word	0x200012e4

0800f79c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f79c:	b480      	push	{r7}
 800f79e:	b087      	sub	sp, #28
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7a8:	f3ef 8310 	mrs	r3, PRIMASK
 800f7ac:	613b      	str	r3, [r7, #16]
  return(result);
 800f7ae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800f7b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7b2:	b672      	cpsid	i
}
 800f7b4:	bf00      	nop
  
  switch(state)
 800f7b6:	78fb      	ldrb	r3, [r7, #3]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d008      	beq.n	800f7ce <UTIL_LPM_SetOffMode+0x32>
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d10e      	bne.n	800f7de <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f7c0:	4b0d      	ldr	r3, [pc, #52]	; (800f7f8 <UTIL_LPM_SetOffMode+0x5c>)
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	4a0b      	ldr	r2, [pc, #44]	; (800f7f8 <UTIL_LPM_SetOffMode+0x5c>)
 800f7ca:	6013      	str	r3, [r2, #0]
      break;
 800f7cc:	e008      	b.n	800f7e0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	43da      	mvns	r2, r3
 800f7d2:	4b09      	ldr	r3, [pc, #36]	; (800f7f8 <UTIL_LPM_SetOffMode+0x5c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	4a07      	ldr	r2, [pc, #28]	; (800f7f8 <UTIL_LPM_SetOffMode+0x5c>)
 800f7da:	6013      	str	r3, [r2, #0]
      break;
 800f7dc:	e000      	b.n	800f7e0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800f7de:	bf00      	nop
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f383 8810 	msr	PRIMASK, r3
}
 800f7ea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f7ec:	bf00      	nop
 800f7ee:	371c      	adds	r7, #28
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr
 800f7f8:	200012e4 	.word	0x200012e4

0800f7fc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b090      	sub	sp, #64	; 0x40
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f804:	4b73      	ldr	r3, [pc, #460]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800f80a:	4b72      	ldr	r3, [pc, #456]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4013      	ands	r3, r2
 800f812:	4a70      	ldr	r2, [pc, #448]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f814:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800f816:	4b70      	ldr	r3, [pc, #448]	; (800f9d8 <UTIL_SEQ_Run+0x1dc>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f81c:	4b6f      	ldr	r3, [pc, #444]	; (800f9dc <UTIL_SEQ_Run+0x1e0>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f822:	4b6f      	ldr	r3, [pc, #444]	; (800f9e0 <UTIL_SEQ_Run+0x1e4>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800f828:	4b6e      	ldr	r3, [pc, #440]	; (800f9e4 <UTIL_SEQ_Run+0x1e8>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f82e:	e08d      	b.n	800f94c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800f830:	2300      	movs	r3, #0
 800f832:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f834:	e002      	b.n	800f83c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800f836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f838:	3301      	adds	r3, #1
 800f83a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f83c:	4a6a      	ldr	r2, [pc, #424]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f840:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f846:	401a      	ands	r2, r3
 800f848:	4b62      	ldr	r3, [pc, #392]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4013      	ands	r3, r2
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d0f1      	beq.n	800f836 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800f852:	4a65      	ldr	r2, [pc, #404]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f856:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85c:	401a      	ands	r2, r3
 800f85e:	4b5d      	ldr	r3, [pc, #372]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4013      	ands	r3, r2
 800f864:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f866:	4a60      	ldr	r2, [pc, #384]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86a:	00db      	lsls	r3, r3, #3
 800f86c:	4413      	add	r3, r2
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	4013      	ands	r3, r2
 800f874:	2b00      	cmp	r3, #0
 800f876:	d106      	bne.n	800f886 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f878:	4a5b      	ldr	r2, [pc, #364]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87c:	00db      	lsls	r3, r3, #3
 800f87e:	4413      	add	r3, r2
 800f880:	f04f 32ff 	mov.w	r2, #4294967295
 800f884:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f886:	4a58      	ldr	r2, [pc, #352]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88a:	00db      	lsls	r3, r3, #3
 800f88c:	4413      	add	r3, r2
 800f88e:	685a      	ldr	r2, [r3, #4]
 800f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f892:	4013      	ands	r3, r2
 800f894:	4618      	mov	r0, r3
 800f896:	f000 f973 	bl	800fb80 <SEQ_BitPosition>
 800f89a:	4603      	mov	r3, r0
 800f89c:	461a      	mov	r2, r3
 800f89e:	4b53      	ldr	r3, [pc, #332]	; (800f9ec <UTIL_SEQ_Run+0x1f0>)
 800f8a0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f8a2:	4a51      	ldr	r2, [pc, #324]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a6:	00db      	lsls	r3, r3, #3
 800f8a8:	4413      	add	r3, r2
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	4b4f      	ldr	r3, [pc, #316]	; (800f9ec <UTIL_SEQ_Run+0x1f0>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f8b6:	43db      	mvns	r3, r3
 800f8b8:	401a      	ands	r2, r3
 800f8ba:	494b      	ldr	r1, [pc, #300]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8be:	00db      	lsls	r3, r3, #3
 800f8c0:	440b      	add	r3, r1
 800f8c2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800f8c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800f8ca:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f8cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f8ce:	b672      	cpsid	i
}
 800f8d0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f8d2:	4b46      	ldr	r3, [pc, #280]	; (800f9ec <UTIL_SEQ_Run+0x1f0>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8dc:	43da      	mvns	r2, r3
 800f8de:	4b3e      	ldr	r3, [pc, #248]	; (800f9d8 <UTIL_SEQ_Run+0x1dc>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4013      	ands	r3, r2
 800f8e4:	4a3c      	ldr	r2, [pc, #240]	; (800f9d8 <UTIL_SEQ_Run+0x1dc>)
 800f8e6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8ec:	e013      	b.n	800f916 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	4a3d      	ldr	r2, [pc, #244]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f8f4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f8f8:	4b3c      	ldr	r3, [pc, #240]	; (800f9ec <UTIL_SEQ_Run+0x1f0>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f902:	43da      	mvns	r2, r3
 800f904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f906:	3b01      	subs	r3, #1
 800f908:	400a      	ands	r2, r1
 800f90a:	4937      	ldr	r1, [pc, #220]	; (800f9e8 <UTIL_SEQ_Run+0x1ec>)
 800f90c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f912:	3b01      	subs	r3, #1
 800f914:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1e8      	bne.n	800f8ee <UTIL_SEQ_Run+0xf2>
 800f91c:	6a3b      	ldr	r3, [r7, #32]
 800f91e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	f383 8810 	msr	PRIMASK, r3
}
 800f926:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f928:	4b30      	ldr	r3, [pc, #192]	; (800f9ec <UTIL_SEQ_Run+0x1f0>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a30      	ldr	r2, [pc, #192]	; (800f9f0 <UTIL_SEQ_Run+0x1f4>)
 800f92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f932:	4798      	blx	r3

    local_taskset = TaskSet;
 800f934:	4b28      	ldr	r3, [pc, #160]	; (800f9d8 <UTIL_SEQ_Run+0x1dc>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800f93a:	4b28      	ldr	r3, [pc, #160]	; (800f9dc <UTIL_SEQ_Run+0x1e0>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800f940:	4b27      	ldr	r3, [pc, #156]	; (800f9e0 <UTIL_SEQ_Run+0x1e4>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800f946:	4b27      	ldr	r3, [pc, #156]	; (800f9e4 <UTIL_SEQ_Run+0x1e8>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f94c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f950:	401a      	ands	r2, r3
 800f952:	4b20      	ldr	r3, [pc, #128]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4013      	ands	r3, r2
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <UTIL_SEQ_Run+0x16c>
 800f95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f960:	4013      	ands	r3, r2
 800f962:	2b00      	cmp	r3, #0
 800f964:	f43f af64 	beq.w	800f830 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f968:	4b20      	ldr	r3, [pc, #128]	; (800f9ec <UTIL_SEQ_Run+0x1f0>)
 800f96a:	f04f 32ff 	mov.w	r2, #4294967295
 800f96e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f970:	f000 f8f8 	bl	800fb64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f974:	f3ef 8310 	mrs	r3, PRIMASK
 800f978:	613b      	str	r3, [r7, #16]
  return(result);
 800f97a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f97c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f97e:	b672      	cpsid	i
}
 800f980:	bf00      	nop
  local_taskset = TaskSet;
 800f982:	4b15      	ldr	r3, [pc, #84]	; (800f9d8 <UTIL_SEQ_Run+0x1dc>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800f988:	4b14      	ldr	r3, [pc, #80]	; (800f9dc <UTIL_SEQ_Run+0x1e0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800f98e:	4b14      	ldr	r3, [pc, #80]	; (800f9e0 <UTIL_SEQ_Run+0x1e4>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f998:	401a      	ands	r2, r3
 800f99a:	4b0e      	ldr	r3, [pc, #56]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4013      	ands	r3, r2
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d107      	bne.n	800f9b4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f9a4:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <UTIL_SEQ_Run+0x1e8>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9aa:	4013      	ands	r3, r2
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f9b0:	f7f7 ff41 	bl	8007836 <UTIL_SEQ_Idle>
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f383 8810 	msr	PRIMASK, r3
}
 800f9be:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f9c0:	f000 f8d7 	bl	800fb72 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f9c4:	4a03      	ldr	r2, [pc, #12]	; (800f9d4 <UTIL_SEQ_Run+0x1d8>)
 800f9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c8:	6013      	str	r3, [r2, #0]

  return;
 800f9ca:	bf00      	nop
}
 800f9cc:	3740      	adds	r7, #64	; 0x40
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	20000038 	.word	0x20000038
 800f9d8:	200012e8 	.word	0x200012e8
 800f9dc:	200012ec 	.word	0x200012ec
 800f9e0:	20000034 	.word	0x20000034
 800f9e4:	200012f0 	.word	0x200012f0
 800f9e8:	20001378 	.word	0x20001378
 800f9ec:	200012f4 	.word	0x200012f4
 800f9f0:	200012f8 	.word	0x200012f8

0800f9f4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa00:	f3ef 8310 	mrs	r3, PRIMASK
 800fa04:	617b      	str	r3, [r7, #20]
  return(result);
 800fa06:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800fa08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800fa0a:	b672      	cpsid	i
}
 800fa0c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f000 f8b6 	bl	800fb80 <SEQ_BitPosition>
 800fa14:	4603      	mov	r3, r0
 800fa16:	4619      	mov	r1, r3
 800fa18:	4a06      	ldr	r2, [pc, #24]	; (800fa34 <UTIL_SEQ_RegTask+0x40>)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	f383 8810 	msr	PRIMASK, r3
}
 800fa2a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800fa2c:	bf00      	nop
}
 800fa2e:	3720      	adds	r7, #32
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	200012f8 	.word	0x200012f8

0800fa38 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa42:	f3ef 8310 	mrs	r3, PRIMASK
 800fa46:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa48:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fa4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fa4c:	b672      	cpsid	i
}
 800fa4e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800fa50:	4b0d      	ldr	r3, [pc, #52]	; (800fa88 <UTIL_SEQ_SetTask+0x50>)
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	4a0b      	ldr	r2, [pc, #44]	; (800fa88 <UTIL_SEQ_SetTask+0x50>)
 800fa5a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800fa5c:	4a0b      	ldr	r2, [pc, #44]	; (800fa8c <UTIL_SEQ_SetTask+0x54>)
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	431a      	orrs	r2, r3
 800fa68:	4908      	ldr	r1, [pc, #32]	; (800fa8c <UTIL_SEQ_SetTask+0x54>)
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	f383 8810 	msr	PRIMASK, r3
}
 800fa7a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800fa7c:	bf00      	nop
}
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	200012e8 	.word	0x200012e8
 800fa8c:	20001378 	.word	0x20001378

0800fa90 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800fa90:	b480      	push	{r7}
 800fa92:	b087      	sub	sp, #28
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa98:	f3ef 8310 	mrs	r3, PRIMASK
 800fa9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800faa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800faa2:	b672      	cpsid	i
}
 800faa4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800faa6:	4b09      	ldr	r3, [pc, #36]	; (800facc <UTIL_SEQ_SetEvt+0x3c>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4313      	orrs	r3, r2
 800faae:	4a07      	ldr	r2, [pc, #28]	; (800facc <UTIL_SEQ_SetEvt+0x3c>)
 800fab0:	6013      	str	r3, [r2, #0]
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	f383 8810 	msr	PRIMASK, r3
}
 800fabc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800fabe:	bf00      	nop
}
 800fac0:	371c      	adds	r7, #28
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	200012ec 	.word	0x200012ec

0800fad0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b088      	sub	sp, #32
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800fad8:	4b1f      	ldr	r3, [pc, #124]	; (800fb58 <UTIL_SEQ_WaitEvt+0x88>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800fade:	4b1e      	ldr	r3, [pc, #120]	; (800fb58 <UTIL_SEQ_WaitEvt+0x88>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae6:	d102      	bne.n	800faee <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800fae8:	2300      	movs	r3, #0
 800faea:	61fb      	str	r3, [r7, #28]
 800faec:	e005      	b.n	800fafa <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800faee:	4b1a      	ldr	r3, [pc, #104]	; (800fb58 <UTIL_SEQ_WaitEvt+0x88>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2201      	movs	r2, #1
 800faf4:	fa02 f303 	lsl.w	r3, r2, r3
 800faf8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800fafa:	4b18      	ldr	r3, [pc, #96]	; (800fb5c <UTIL_SEQ_WaitEvt+0x8c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800fb00:	4a16      	ldr	r2, [pc, #88]	; (800fb5c <UTIL_SEQ_WaitEvt+0x8c>)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800fb06:	e003      	b.n	800fb10 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	69f8      	ldr	r0, [r7, #28]
 800fb0c:	f7f7 fe9a 	bl	8007844 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800fb10:	4b13      	ldr	r3, [pc, #76]	; (800fb60 <UTIL_SEQ_WaitEvt+0x90>)
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4013      	ands	r3, r2
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d0f5      	beq.n	800fb08 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800fb1c:	4a0e      	ldr	r2, [pc, #56]	; (800fb58 <UTIL_SEQ_WaitEvt+0x88>)
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb22:	f3ef 8310 	mrs	r3, PRIMASK
 800fb26:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb28:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fb2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fb2c:	b672      	cpsid	i
}
 800fb2e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	43da      	mvns	r2, r3
 800fb34:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <UTIL_SEQ_WaitEvt+0x90>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4013      	ands	r3, r2
 800fb3a:	4a09      	ldr	r2, [pc, #36]	; (800fb60 <UTIL_SEQ_WaitEvt+0x90>)
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f383 8810 	msr	PRIMASK, r3
}
 800fb48:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800fb4a:	4a04      	ldr	r2, [pc, #16]	; (800fb5c <UTIL_SEQ_WaitEvt+0x8c>)
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	6013      	str	r3, [r2, #0]
  return;
 800fb50:	bf00      	nop
}
 800fb52:	3720      	adds	r7, #32
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	200012f4 	.word	0x200012f4
 800fb5c:	200012f0 	.word	0x200012f0
 800fb60:	200012ec 	.word	0x200012ec

0800fb64 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800fb64:	b480      	push	{r7}
 800fb66:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800fb68:	bf00      	nop
}
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800fb72:	b480      	push	{r7}
 800fb74:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800fb76:	bf00      	nop
}
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	0c1b      	lsrs	r3, r3, #16
 800fb94:	041b      	lsls	r3, r3, #16
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d104      	bne.n	800fba4 <SEQ_BitPosition+0x24>
 800fb9a:	2310      	movs	r3, #16
 800fb9c:	73fb      	strb	r3, [r7, #15]
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	041b      	lsls	r3, r3, #16
 800fba2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d105      	bne.n	800fbba <SEQ_BitPosition+0x3a>
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
 800fbb0:	3308      	adds	r3, #8
 800fbb2:	73fb      	strb	r3, [r7, #15]
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	021b      	lsls	r3, r3, #8
 800fbb8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d105      	bne.n	800fbd0 <SEQ_BitPosition+0x50>
 800fbc4:	7bfb      	ldrb	r3, [r7, #15]
 800fbc6:	3304      	adds	r3, #4
 800fbc8:	73fb      	strb	r3, [r7, #15]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	011b      	lsls	r3, r3, #4
 800fbce:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	0f1b      	lsrs	r3, r3, #28
 800fbd4:	4a07      	ldr	r2, [pc, #28]	; (800fbf4 <SEQ_BitPosition+0x74>)
 800fbd6:	5cd2      	ldrb	r2, [r2, r3]
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	4413      	add	r3, r2
 800fbdc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800fbde:	7bfb      	ldrb	r3, [r7, #15]
 800fbe0:	f1c3 031f 	rsb	r3, r3, #31
 800fbe4:	b2db      	uxtb	r3, r3
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	08011908 	.word	0x08011908

0800fbf8 <__aeabi_memcpy>:
 800fbf8:	f000 b86a 	b.w	800fcd0 <memcpy>

0800fbfc <__assert_func>:
 800fbfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbfe:	4614      	mov	r4, r2
 800fc00:	461a      	mov	r2, r3
 800fc02:	4b09      	ldr	r3, [pc, #36]	; (800fc28 <__assert_func+0x2c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4605      	mov	r5, r0
 800fc08:	68d8      	ldr	r0, [r3, #12]
 800fc0a:	b14c      	cbz	r4, 800fc20 <__assert_func+0x24>
 800fc0c:	4b07      	ldr	r3, [pc, #28]	; (800fc2c <__assert_func+0x30>)
 800fc0e:	9100      	str	r1, [sp, #0]
 800fc10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc14:	4906      	ldr	r1, [pc, #24]	; (800fc30 <__assert_func+0x34>)
 800fc16:	462b      	mov	r3, r5
 800fc18:	f000 f814 	bl	800fc44 <fiprintf>
 800fc1c:	f000 fd3a 	bl	8010694 <abort>
 800fc20:	4b04      	ldr	r3, [pc, #16]	; (800fc34 <__assert_func+0x38>)
 800fc22:	461c      	mov	r4, r3
 800fc24:	e7f3      	b.n	800fc0e <__assert_func+0x12>
 800fc26:	bf00      	nop
 800fc28:	2000003c 	.word	0x2000003c
 800fc2c:	08011918 	.word	0x08011918
 800fc30:	08011925 	.word	0x08011925
 800fc34:	08011953 	.word	0x08011953

0800fc38 <__errno>:
 800fc38:	4b01      	ldr	r3, [pc, #4]	; (800fc40 <__errno+0x8>)
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	2000003c 	.word	0x2000003c

0800fc44 <fiprintf>:
 800fc44:	b40e      	push	{r1, r2, r3}
 800fc46:	b503      	push	{r0, r1, lr}
 800fc48:	4601      	mov	r1, r0
 800fc4a:	ab03      	add	r3, sp, #12
 800fc4c:	4805      	ldr	r0, [pc, #20]	; (800fc64 <fiprintf+0x20>)
 800fc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc52:	6800      	ldr	r0, [r0, #0]
 800fc54:	9301      	str	r3, [sp, #4]
 800fc56:	f000 f95b 	bl	800ff10 <_vfiprintf_r>
 800fc5a:	b002      	add	sp, #8
 800fc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc60:	b003      	add	sp, #12
 800fc62:	4770      	bx	lr
 800fc64:	2000003c 	.word	0x2000003c

0800fc68 <__libc_init_array>:
 800fc68:	b570      	push	{r4, r5, r6, lr}
 800fc6a:	4d0d      	ldr	r5, [pc, #52]	; (800fca0 <__libc_init_array+0x38>)
 800fc6c:	4c0d      	ldr	r4, [pc, #52]	; (800fca4 <__libc_init_array+0x3c>)
 800fc6e:	1b64      	subs	r4, r4, r5
 800fc70:	10a4      	asrs	r4, r4, #2
 800fc72:	2600      	movs	r6, #0
 800fc74:	42a6      	cmp	r6, r4
 800fc76:	d109      	bne.n	800fc8c <__libc_init_array+0x24>
 800fc78:	4d0b      	ldr	r5, [pc, #44]	; (800fca8 <__libc_init_array+0x40>)
 800fc7a:	4c0c      	ldr	r4, [pc, #48]	; (800fcac <__libc_init_array+0x44>)
 800fc7c:	f001 f9da 	bl	8011034 <_init>
 800fc80:	1b64      	subs	r4, r4, r5
 800fc82:	10a4      	asrs	r4, r4, #2
 800fc84:	2600      	movs	r6, #0
 800fc86:	42a6      	cmp	r6, r4
 800fc88:	d105      	bne.n	800fc96 <__libc_init_array+0x2e>
 800fc8a:	bd70      	pop	{r4, r5, r6, pc}
 800fc8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc90:	4798      	blx	r3
 800fc92:	3601      	adds	r6, #1
 800fc94:	e7ee      	b.n	800fc74 <__libc_init_array+0xc>
 800fc96:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc9a:	4798      	blx	r3
 800fc9c:	3601      	adds	r6, #1
 800fc9e:	e7f2      	b.n	800fc86 <__libc_init_array+0x1e>
 800fca0:	080119f4 	.word	0x080119f4
 800fca4:	080119f4 	.word	0x080119f4
 800fca8:	080119f4 	.word	0x080119f4
 800fcac:	080119f8 	.word	0x080119f8

0800fcb0 <malloc>:
 800fcb0:	4b02      	ldr	r3, [pc, #8]	; (800fcbc <malloc+0xc>)
 800fcb2:	4601      	mov	r1, r0
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	f000 b88d 	b.w	800fdd4 <_malloc_r>
 800fcba:	bf00      	nop
 800fcbc:	2000003c 	.word	0x2000003c

0800fcc0 <free>:
 800fcc0:	4b02      	ldr	r3, [pc, #8]	; (800fccc <free+0xc>)
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	6818      	ldr	r0, [r3, #0]
 800fcc6:	f000 b819 	b.w	800fcfc <_free_r>
 800fcca:	bf00      	nop
 800fccc:	2000003c 	.word	0x2000003c

0800fcd0 <memcpy>:
 800fcd0:	440a      	add	r2, r1
 800fcd2:	4291      	cmp	r1, r2
 800fcd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcd8:	d100      	bne.n	800fcdc <memcpy+0xc>
 800fcda:	4770      	bx	lr
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fce6:	4291      	cmp	r1, r2
 800fce8:	d1f9      	bne.n	800fcde <memcpy+0xe>
 800fcea:	bd10      	pop	{r4, pc}

0800fcec <memset>:
 800fcec:	4402      	add	r2, r0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d100      	bne.n	800fcf6 <memset+0xa>
 800fcf4:	4770      	bx	lr
 800fcf6:	f803 1b01 	strb.w	r1, [r3], #1
 800fcfa:	e7f9      	b.n	800fcf0 <memset+0x4>

0800fcfc <_free_r>:
 800fcfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcfe:	2900      	cmp	r1, #0
 800fd00:	d044      	beq.n	800fd8c <_free_r+0x90>
 800fd02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd06:	9001      	str	r0, [sp, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f1a1 0404 	sub.w	r4, r1, #4
 800fd0e:	bfb8      	it	lt
 800fd10:	18e4      	addlt	r4, r4, r3
 800fd12:	f000 ff01 	bl	8010b18 <__malloc_lock>
 800fd16:	4a1e      	ldr	r2, [pc, #120]	; (800fd90 <_free_r+0x94>)
 800fd18:	9801      	ldr	r0, [sp, #4]
 800fd1a:	6813      	ldr	r3, [r2, #0]
 800fd1c:	b933      	cbnz	r3, 800fd2c <_free_r+0x30>
 800fd1e:	6063      	str	r3, [r4, #4]
 800fd20:	6014      	str	r4, [r2, #0]
 800fd22:	b003      	add	sp, #12
 800fd24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd28:	f000 befc 	b.w	8010b24 <__malloc_unlock>
 800fd2c:	42a3      	cmp	r3, r4
 800fd2e:	d908      	bls.n	800fd42 <_free_r+0x46>
 800fd30:	6825      	ldr	r5, [r4, #0]
 800fd32:	1961      	adds	r1, r4, r5
 800fd34:	428b      	cmp	r3, r1
 800fd36:	bf01      	itttt	eq
 800fd38:	6819      	ldreq	r1, [r3, #0]
 800fd3a:	685b      	ldreq	r3, [r3, #4]
 800fd3c:	1949      	addeq	r1, r1, r5
 800fd3e:	6021      	streq	r1, [r4, #0]
 800fd40:	e7ed      	b.n	800fd1e <_free_r+0x22>
 800fd42:	461a      	mov	r2, r3
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	b10b      	cbz	r3, 800fd4c <_free_r+0x50>
 800fd48:	42a3      	cmp	r3, r4
 800fd4a:	d9fa      	bls.n	800fd42 <_free_r+0x46>
 800fd4c:	6811      	ldr	r1, [r2, #0]
 800fd4e:	1855      	adds	r5, r2, r1
 800fd50:	42a5      	cmp	r5, r4
 800fd52:	d10b      	bne.n	800fd6c <_free_r+0x70>
 800fd54:	6824      	ldr	r4, [r4, #0]
 800fd56:	4421      	add	r1, r4
 800fd58:	1854      	adds	r4, r2, r1
 800fd5a:	42a3      	cmp	r3, r4
 800fd5c:	6011      	str	r1, [r2, #0]
 800fd5e:	d1e0      	bne.n	800fd22 <_free_r+0x26>
 800fd60:	681c      	ldr	r4, [r3, #0]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	6053      	str	r3, [r2, #4]
 800fd66:	4421      	add	r1, r4
 800fd68:	6011      	str	r1, [r2, #0]
 800fd6a:	e7da      	b.n	800fd22 <_free_r+0x26>
 800fd6c:	d902      	bls.n	800fd74 <_free_r+0x78>
 800fd6e:	230c      	movs	r3, #12
 800fd70:	6003      	str	r3, [r0, #0]
 800fd72:	e7d6      	b.n	800fd22 <_free_r+0x26>
 800fd74:	6825      	ldr	r5, [r4, #0]
 800fd76:	1961      	adds	r1, r4, r5
 800fd78:	428b      	cmp	r3, r1
 800fd7a:	bf04      	itt	eq
 800fd7c:	6819      	ldreq	r1, [r3, #0]
 800fd7e:	685b      	ldreq	r3, [r3, #4]
 800fd80:	6063      	str	r3, [r4, #4]
 800fd82:	bf04      	itt	eq
 800fd84:	1949      	addeq	r1, r1, r5
 800fd86:	6021      	streq	r1, [r4, #0]
 800fd88:	6054      	str	r4, [r2, #4]
 800fd8a:	e7ca      	b.n	800fd22 <_free_r+0x26>
 800fd8c:	b003      	add	sp, #12
 800fd8e:	bd30      	pop	{r4, r5, pc}
 800fd90:	20001388 	.word	0x20001388

0800fd94 <sbrk_aligned>:
 800fd94:	b570      	push	{r4, r5, r6, lr}
 800fd96:	4e0e      	ldr	r6, [pc, #56]	; (800fdd0 <sbrk_aligned+0x3c>)
 800fd98:	460c      	mov	r4, r1
 800fd9a:	6831      	ldr	r1, [r6, #0]
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	b911      	cbnz	r1, 800fda6 <sbrk_aligned+0x12>
 800fda0:	f000 fb7a 	bl	8010498 <_sbrk_r>
 800fda4:	6030      	str	r0, [r6, #0]
 800fda6:	4621      	mov	r1, r4
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f000 fb75 	bl	8010498 <_sbrk_r>
 800fdae:	1c43      	adds	r3, r0, #1
 800fdb0:	d00a      	beq.n	800fdc8 <sbrk_aligned+0x34>
 800fdb2:	1cc4      	adds	r4, r0, #3
 800fdb4:	f024 0403 	bic.w	r4, r4, #3
 800fdb8:	42a0      	cmp	r0, r4
 800fdba:	d007      	beq.n	800fdcc <sbrk_aligned+0x38>
 800fdbc:	1a21      	subs	r1, r4, r0
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	f000 fb6a 	bl	8010498 <_sbrk_r>
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	d101      	bne.n	800fdcc <sbrk_aligned+0x38>
 800fdc8:	f04f 34ff 	mov.w	r4, #4294967295
 800fdcc:	4620      	mov	r0, r4
 800fdce:	bd70      	pop	{r4, r5, r6, pc}
 800fdd0:	2000138c 	.word	0x2000138c

0800fdd4 <_malloc_r>:
 800fdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd8:	1ccd      	adds	r5, r1, #3
 800fdda:	f025 0503 	bic.w	r5, r5, #3
 800fdde:	3508      	adds	r5, #8
 800fde0:	2d0c      	cmp	r5, #12
 800fde2:	bf38      	it	cc
 800fde4:	250c      	movcc	r5, #12
 800fde6:	2d00      	cmp	r5, #0
 800fde8:	4607      	mov	r7, r0
 800fdea:	db01      	blt.n	800fdf0 <_malloc_r+0x1c>
 800fdec:	42a9      	cmp	r1, r5
 800fdee:	d905      	bls.n	800fdfc <_malloc_r+0x28>
 800fdf0:	230c      	movs	r3, #12
 800fdf2:	603b      	str	r3, [r7, #0]
 800fdf4:	2600      	movs	r6, #0
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	4e2e      	ldr	r6, [pc, #184]	; (800feb8 <_malloc_r+0xe4>)
 800fdfe:	f000 fe8b 	bl	8010b18 <__malloc_lock>
 800fe02:	6833      	ldr	r3, [r6, #0]
 800fe04:	461c      	mov	r4, r3
 800fe06:	bb34      	cbnz	r4, 800fe56 <_malloc_r+0x82>
 800fe08:	4629      	mov	r1, r5
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	f7ff ffc2 	bl	800fd94 <sbrk_aligned>
 800fe10:	1c43      	adds	r3, r0, #1
 800fe12:	4604      	mov	r4, r0
 800fe14:	d14d      	bne.n	800feb2 <_malloc_r+0xde>
 800fe16:	6834      	ldr	r4, [r6, #0]
 800fe18:	4626      	mov	r6, r4
 800fe1a:	2e00      	cmp	r6, #0
 800fe1c:	d140      	bne.n	800fea0 <_malloc_r+0xcc>
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	4631      	mov	r1, r6
 800fe22:	4638      	mov	r0, r7
 800fe24:	eb04 0803 	add.w	r8, r4, r3
 800fe28:	f000 fb36 	bl	8010498 <_sbrk_r>
 800fe2c:	4580      	cmp	r8, r0
 800fe2e:	d13a      	bne.n	800fea6 <_malloc_r+0xd2>
 800fe30:	6821      	ldr	r1, [r4, #0]
 800fe32:	3503      	adds	r5, #3
 800fe34:	1a6d      	subs	r5, r5, r1
 800fe36:	f025 0503 	bic.w	r5, r5, #3
 800fe3a:	3508      	adds	r5, #8
 800fe3c:	2d0c      	cmp	r5, #12
 800fe3e:	bf38      	it	cc
 800fe40:	250c      	movcc	r5, #12
 800fe42:	4629      	mov	r1, r5
 800fe44:	4638      	mov	r0, r7
 800fe46:	f7ff ffa5 	bl	800fd94 <sbrk_aligned>
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	d02b      	beq.n	800fea6 <_malloc_r+0xd2>
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	442b      	add	r3, r5
 800fe52:	6023      	str	r3, [r4, #0]
 800fe54:	e00e      	b.n	800fe74 <_malloc_r+0xa0>
 800fe56:	6822      	ldr	r2, [r4, #0]
 800fe58:	1b52      	subs	r2, r2, r5
 800fe5a:	d41e      	bmi.n	800fe9a <_malloc_r+0xc6>
 800fe5c:	2a0b      	cmp	r2, #11
 800fe5e:	d916      	bls.n	800fe8e <_malloc_r+0xba>
 800fe60:	1961      	adds	r1, r4, r5
 800fe62:	42a3      	cmp	r3, r4
 800fe64:	6025      	str	r5, [r4, #0]
 800fe66:	bf18      	it	ne
 800fe68:	6059      	strne	r1, [r3, #4]
 800fe6a:	6863      	ldr	r3, [r4, #4]
 800fe6c:	bf08      	it	eq
 800fe6e:	6031      	streq	r1, [r6, #0]
 800fe70:	5162      	str	r2, [r4, r5]
 800fe72:	604b      	str	r3, [r1, #4]
 800fe74:	4638      	mov	r0, r7
 800fe76:	f104 060b 	add.w	r6, r4, #11
 800fe7a:	f000 fe53 	bl	8010b24 <__malloc_unlock>
 800fe7e:	f026 0607 	bic.w	r6, r6, #7
 800fe82:	1d23      	adds	r3, r4, #4
 800fe84:	1af2      	subs	r2, r6, r3
 800fe86:	d0b6      	beq.n	800fdf6 <_malloc_r+0x22>
 800fe88:	1b9b      	subs	r3, r3, r6
 800fe8a:	50a3      	str	r3, [r4, r2]
 800fe8c:	e7b3      	b.n	800fdf6 <_malloc_r+0x22>
 800fe8e:	6862      	ldr	r2, [r4, #4]
 800fe90:	42a3      	cmp	r3, r4
 800fe92:	bf0c      	ite	eq
 800fe94:	6032      	streq	r2, [r6, #0]
 800fe96:	605a      	strne	r2, [r3, #4]
 800fe98:	e7ec      	b.n	800fe74 <_malloc_r+0xa0>
 800fe9a:	4623      	mov	r3, r4
 800fe9c:	6864      	ldr	r4, [r4, #4]
 800fe9e:	e7b2      	b.n	800fe06 <_malloc_r+0x32>
 800fea0:	4634      	mov	r4, r6
 800fea2:	6876      	ldr	r6, [r6, #4]
 800fea4:	e7b9      	b.n	800fe1a <_malloc_r+0x46>
 800fea6:	230c      	movs	r3, #12
 800fea8:	603b      	str	r3, [r7, #0]
 800feaa:	4638      	mov	r0, r7
 800feac:	f000 fe3a 	bl	8010b24 <__malloc_unlock>
 800feb0:	e7a1      	b.n	800fdf6 <_malloc_r+0x22>
 800feb2:	6025      	str	r5, [r4, #0]
 800feb4:	e7de      	b.n	800fe74 <_malloc_r+0xa0>
 800feb6:	bf00      	nop
 800feb8:	20001388 	.word	0x20001388

0800febc <__sfputc_r>:
 800febc:	6893      	ldr	r3, [r2, #8]
 800febe:	3b01      	subs	r3, #1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	b410      	push	{r4}
 800fec4:	6093      	str	r3, [r2, #8]
 800fec6:	da08      	bge.n	800feda <__sfputc_r+0x1e>
 800fec8:	6994      	ldr	r4, [r2, #24]
 800feca:	42a3      	cmp	r3, r4
 800fecc:	db01      	blt.n	800fed2 <__sfputc_r+0x16>
 800fece:	290a      	cmp	r1, #10
 800fed0:	d103      	bne.n	800feda <__sfputc_r+0x1e>
 800fed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fed6:	f000 bb1d 	b.w	8010514 <__swbuf_r>
 800feda:	6813      	ldr	r3, [r2, #0]
 800fedc:	1c58      	adds	r0, r3, #1
 800fede:	6010      	str	r0, [r2, #0]
 800fee0:	7019      	strb	r1, [r3, #0]
 800fee2:	4608      	mov	r0, r1
 800fee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <__sfputs_r>:
 800feea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feec:	4606      	mov	r6, r0
 800feee:	460f      	mov	r7, r1
 800fef0:	4614      	mov	r4, r2
 800fef2:	18d5      	adds	r5, r2, r3
 800fef4:	42ac      	cmp	r4, r5
 800fef6:	d101      	bne.n	800fefc <__sfputs_r+0x12>
 800fef8:	2000      	movs	r0, #0
 800fefa:	e007      	b.n	800ff0c <__sfputs_r+0x22>
 800fefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff00:	463a      	mov	r2, r7
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7ff ffda 	bl	800febc <__sfputc_r>
 800ff08:	1c43      	adds	r3, r0, #1
 800ff0a:	d1f3      	bne.n	800fef4 <__sfputs_r+0xa>
 800ff0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff10 <_vfiprintf_r>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	460d      	mov	r5, r1
 800ff16:	b09d      	sub	sp, #116	; 0x74
 800ff18:	4614      	mov	r4, r2
 800ff1a:	4698      	mov	r8, r3
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	b118      	cbz	r0, 800ff28 <_vfiprintf_r+0x18>
 800ff20:	6983      	ldr	r3, [r0, #24]
 800ff22:	b90b      	cbnz	r3, 800ff28 <_vfiprintf_r+0x18>
 800ff24:	f000 fcd8 	bl	80108d8 <__sinit>
 800ff28:	4b89      	ldr	r3, [pc, #548]	; (8010150 <_vfiprintf_r+0x240>)
 800ff2a:	429d      	cmp	r5, r3
 800ff2c:	d11b      	bne.n	800ff66 <_vfiprintf_r+0x56>
 800ff2e:	6875      	ldr	r5, [r6, #4]
 800ff30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff32:	07d9      	lsls	r1, r3, #31
 800ff34:	d405      	bmi.n	800ff42 <_vfiprintf_r+0x32>
 800ff36:	89ab      	ldrh	r3, [r5, #12]
 800ff38:	059a      	lsls	r2, r3, #22
 800ff3a:	d402      	bmi.n	800ff42 <_vfiprintf_r+0x32>
 800ff3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff3e:	f000 fd69 	bl	8010a14 <__retarget_lock_acquire_recursive>
 800ff42:	89ab      	ldrh	r3, [r5, #12]
 800ff44:	071b      	lsls	r3, r3, #28
 800ff46:	d501      	bpl.n	800ff4c <_vfiprintf_r+0x3c>
 800ff48:	692b      	ldr	r3, [r5, #16]
 800ff4a:	b9eb      	cbnz	r3, 800ff88 <_vfiprintf_r+0x78>
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4630      	mov	r0, r6
 800ff50:	f000 fb32 	bl	80105b8 <__swsetup_r>
 800ff54:	b1c0      	cbz	r0, 800ff88 <_vfiprintf_r+0x78>
 800ff56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff58:	07dc      	lsls	r4, r3, #31
 800ff5a:	d50e      	bpl.n	800ff7a <_vfiprintf_r+0x6a>
 800ff5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff60:	b01d      	add	sp, #116	; 0x74
 800ff62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff66:	4b7b      	ldr	r3, [pc, #492]	; (8010154 <_vfiprintf_r+0x244>)
 800ff68:	429d      	cmp	r5, r3
 800ff6a:	d101      	bne.n	800ff70 <_vfiprintf_r+0x60>
 800ff6c:	68b5      	ldr	r5, [r6, #8]
 800ff6e:	e7df      	b.n	800ff30 <_vfiprintf_r+0x20>
 800ff70:	4b79      	ldr	r3, [pc, #484]	; (8010158 <_vfiprintf_r+0x248>)
 800ff72:	429d      	cmp	r5, r3
 800ff74:	bf08      	it	eq
 800ff76:	68f5      	ldreq	r5, [r6, #12]
 800ff78:	e7da      	b.n	800ff30 <_vfiprintf_r+0x20>
 800ff7a:	89ab      	ldrh	r3, [r5, #12]
 800ff7c:	0598      	lsls	r0, r3, #22
 800ff7e:	d4ed      	bmi.n	800ff5c <_vfiprintf_r+0x4c>
 800ff80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff82:	f000 fd48 	bl	8010a16 <__retarget_lock_release_recursive>
 800ff86:	e7e9      	b.n	800ff5c <_vfiprintf_r+0x4c>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff8c:	2320      	movs	r3, #32
 800ff8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff96:	2330      	movs	r3, #48	; 0x30
 800ff98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801015c <_vfiprintf_r+0x24c>
 800ff9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffa0:	f04f 0901 	mov.w	r9, #1
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	469a      	mov	sl, r3
 800ffa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffac:	b10a      	cbz	r2, 800ffb2 <_vfiprintf_r+0xa2>
 800ffae:	2a25      	cmp	r2, #37	; 0x25
 800ffb0:	d1f9      	bne.n	800ffa6 <_vfiprintf_r+0x96>
 800ffb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffb6:	d00b      	beq.n	800ffd0 <_vfiprintf_r+0xc0>
 800ffb8:	465b      	mov	r3, fp
 800ffba:	4622      	mov	r2, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7ff ff93 	bl	800feea <__sfputs_r>
 800ffc4:	3001      	adds	r0, #1
 800ffc6:	f000 80aa 	beq.w	801011e <_vfiprintf_r+0x20e>
 800ffca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffcc:	445a      	add	r2, fp
 800ffce:	9209      	str	r2, [sp, #36]	; 0x24
 800ffd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 80a2 	beq.w	801011e <_vfiprintf_r+0x20e>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffe4:	f10a 0a01 	add.w	sl, sl, #1
 800ffe8:	9304      	str	r3, [sp, #16]
 800ffea:	9307      	str	r3, [sp, #28]
 800ffec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fff0:	931a      	str	r3, [sp, #104]	; 0x68
 800fff2:	4654      	mov	r4, sl
 800fff4:	2205      	movs	r2, #5
 800fff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fffa:	4858      	ldr	r0, [pc, #352]	; (801015c <_vfiprintf_r+0x24c>)
 800fffc:	f7f6 fab0 	bl	8006560 <memchr>
 8010000:	9a04      	ldr	r2, [sp, #16]
 8010002:	b9d8      	cbnz	r0, 801003c <_vfiprintf_r+0x12c>
 8010004:	06d1      	lsls	r1, r2, #27
 8010006:	bf44      	itt	mi
 8010008:	2320      	movmi	r3, #32
 801000a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801000e:	0713      	lsls	r3, r2, #28
 8010010:	bf44      	itt	mi
 8010012:	232b      	movmi	r3, #43	; 0x2b
 8010014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010018:	f89a 3000 	ldrb.w	r3, [sl]
 801001c:	2b2a      	cmp	r3, #42	; 0x2a
 801001e:	d015      	beq.n	801004c <_vfiprintf_r+0x13c>
 8010020:	9a07      	ldr	r2, [sp, #28]
 8010022:	4654      	mov	r4, sl
 8010024:	2000      	movs	r0, #0
 8010026:	f04f 0c0a 	mov.w	ip, #10
 801002a:	4621      	mov	r1, r4
 801002c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010030:	3b30      	subs	r3, #48	; 0x30
 8010032:	2b09      	cmp	r3, #9
 8010034:	d94e      	bls.n	80100d4 <_vfiprintf_r+0x1c4>
 8010036:	b1b0      	cbz	r0, 8010066 <_vfiprintf_r+0x156>
 8010038:	9207      	str	r2, [sp, #28]
 801003a:	e014      	b.n	8010066 <_vfiprintf_r+0x156>
 801003c:	eba0 0308 	sub.w	r3, r0, r8
 8010040:	fa09 f303 	lsl.w	r3, r9, r3
 8010044:	4313      	orrs	r3, r2
 8010046:	9304      	str	r3, [sp, #16]
 8010048:	46a2      	mov	sl, r4
 801004a:	e7d2      	b.n	800fff2 <_vfiprintf_r+0xe2>
 801004c:	9b03      	ldr	r3, [sp, #12]
 801004e:	1d19      	adds	r1, r3, #4
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	9103      	str	r1, [sp, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	bfbb      	ittet	lt
 8010058:	425b      	neglt	r3, r3
 801005a:	f042 0202 	orrlt.w	r2, r2, #2
 801005e:	9307      	strge	r3, [sp, #28]
 8010060:	9307      	strlt	r3, [sp, #28]
 8010062:	bfb8      	it	lt
 8010064:	9204      	strlt	r2, [sp, #16]
 8010066:	7823      	ldrb	r3, [r4, #0]
 8010068:	2b2e      	cmp	r3, #46	; 0x2e
 801006a:	d10c      	bne.n	8010086 <_vfiprintf_r+0x176>
 801006c:	7863      	ldrb	r3, [r4, #1]
 801006e:	2b2a      	cmp	r3, #42	; 0x2a
 8010070:	d135      	bne.n	80100de <_vfiprintf_r+0x1ce>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	1d1a      	adds	r2, r3, #4
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	9203      	str	r2, [sp, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	bfb8      	it	lt
 801007e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010082:	3402      	adds	r4, #2
 8010084:	9305      	str	r3, [sp, #20]
 8010086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801016c <_vfiprintf_r+0x25c>
 801008a:	7821      	ldrb	r1, [r4, #0]
 801008c:	2203      	movs	r2, #3
 801008e:	4650      	mov	r0, sl
 8010090:	f7f6 fa66 	bl	8006560 <memchr>
 8010094:	b140      	cbz	r0, 80100a8 <_vfiprintf_r+0x198>
 8010096:	2340      	movs	r3, #64	; 0x40
 8010098:	eba0 000a 	sub.w	r0, r0, sl
 801009c:	fa03 f000 	lsl.w	r0, r3, r0
 80100a0:	9b04      	ldr	r3, [sp, #16]
 80100a2:	4303      	orrs	r3, r0
 80100a4:	3401      	adds	r4, #1
 80100a6:	9304      	str	r3, [sp, #16]
 80100a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ac:	482c      	ldr	r0, [pc, #176]	; (8010160 <_vfiprintf_r+0x250>)
 80100ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100b2:	2206      	movs	r2, #6
 80100b4:	f7f6 fa54 	bl	8006560 <memchr>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d03f      	beq.n	801013c <_vfiprintf_r+0x22c>
 80100bc:	4b29      	ldr	r3, [pc, #164]	; (8010164 <_vfiprintf_r+0x254>)
 80100be:	bb1b      	cbnz	r3, 8010108 <_vfiprintf_r+0x1f8>
 80100c0:	9b03      	ldr	r3, [sp, #12]
 80100c2:	3307      	adds	r3, #7
 80100c4:	f023 0307 	bic.w	r3, r3, #7
 80100c8:	3308      	adds	r3, #8
 80100ca:	9303      	str	r3, [sp, #12]
 80100cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ce:	443b      	add	r3, r7
 80100d0:	9309      	str	r3, [sp, #36]	; 0x24
 80100d2:	e767      	b.n	800ffa4 <_vfiprintf_r+0x94>
 80100d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100d8:	460c      	mov	r4, r1
 80100da:	2001      	movs	r0, #1
 80100dc:	e7a5      	b.n	801002a <_vfiprintf_r+0x11a>
 80100de:	2300      	movs	r3, #0
 80100e0:	3401      	adds	r4, #1
 80100e2:	9305      	str	r3, [sp, #20]
 80100e4:	4619      	mov	r1, r3
 80100e6:	f04f 0c0a 	mov.w	ip, #10
 80100ea:	4620      	mov	r0, r4
 80100ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100f0:	3a30      	subs	r2, #48	; 0x30
 80100f2:	2a09      	cmp	r2, #9
 80100f4:	d903      	bls.n	80100fe <_vfiprintf_r+0x1ee>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0c5      	beq.n	8010086 <_vfiprintf_r+0x176>
 80100fa:	9105      	str	r1, [sp, #20]
 80100fc:	e7c3      	b.n	8010086 <_vfiprintf_r+0x176>
 80100fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010102:	4604      	mov	r4, r0
 8010104:	2301      	movs	r3, #1
 8010106:	e7f0      	b.n	80100ea <_vfiprintf_r+0x1da>
 8010108:	ab03      	add	r3, sp, #12
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	462a      	mov	r2, r5
 801010e:	4b16      	ldr	r3, [pc, #88]	; (8010168 <_vfiprintf_r+0x258>)
 8010110:	a904      	add	r1, sp, #16
 8010112:	4630      	mov	r0, r6
 8010114:	f3af 8000 	nop.w
 8010118:	4607      	mov	r7, r0
 801011a:	1c78      	adds	r0, r7, #1
 801011c:	d1d6      	bne.n	80100cc <_vfiprintf_r+0x1bc>
 801011e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010120:	07d9      	lsls	r1, r3, #31
 8010122:	d405      	bmi.n	8010130 <_vfiprintf_r+0x220>
 8010124:	89ab      	ldrh	r3, [r5, #12]
 8010126:	059a      	lsls	r2, r3, #22
 8010128:	d402      	bmi.n	8010130 <_vfiprintf_r+0x220>
 801012a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801012c:	f000 fc73 	bl	8010a16 <__retarget_lock_release_recursive>
 8010130:	89ab      	ldrh	r3, [r5, #12]
 8010132:	065b      	lsls	r3, r3, #25
 8010134:	f53f af12 	bmi.w	800ff5c <_vfiprintf_r+0x4c>
 8010138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801013a:	e711      	b.n	800ff60 <_vfiprintf_r+0x50>
 801013c:	ab03      	add	r3, sp, #12
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	462a      	mov	r2, r5
 8010142:	4b09      	ldr	r3, [pc, #36]	; (8010168 <_vfiprintf_r+0x258>)
 8010144:	a904      	add	r1, sp, #16
 8010146:	4630      	mov	r0, r6
 8010148:	f000 f880 	bl	801024c <_printf_i>
 801014c:	e7e4      	b.n	8010118 <_vfiprintf_r+0x208>
 801014e:	bf00      	nop
 8010150:	080119ac 	.word	0x080119ac
 8010154:	080119cc 	.word	0x080119cc
 8010158:	0801198c 	.word	0x0801198c
 801015c:	08011958 	.word	0x08011958
 8010160:	08011962 	.word	0x08011962
 8010164:	00000000 	.word	0x00000000
 8010168:	0800feeb 	.word	0x0800feeb
 801016c:	0801195e 	.word	0x0801195e

08010170 <_printf_common>:
 8010170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010174:	4616      	mov	r6, r2
 8010176:	4699      	mov	r9, r3
 8010178:	688a      	ldr	r2, [r1, #8]
 801017a:	690b      	ldr	r3, [r1, #16]
 801017c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010180:	4293      	cmp	r3, r2
 8010182:	bfb8      	it	lt
 8010184:	4613      	movlt	r3, r2
 8010186:	6033      	str	r3, [r6, #0]
 8010188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801018c:	4607      	mov	r7, r0
 801018e:	460c      	mov	r4, r1
 8010190:	b10a      	cbz	r2, 8010196 <_printf_common+0x26>
 8010192:	3301      	adds	r3, #1
 8010194:	6033      	str	r3, [r6, #0]
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	0699      	lsls	r1, r3, #26
 801019a:	bf42      	ittt	mi
 801019c:	6833      	ldrmi	r3, [r6, #0]
 801019e:	3302      	addmi	r3, #2
 80101a0:	6033      	strmi	r3, [r6, #0]
 80101a2:	6825      	ldr	r5, [r4, #0]
 80101a4:	f015 0506 	ands.w	r5, r5, #6
 80101a8:	d106      	bne.n	80101b8 <_printf_common+0x48>
 80101aa:	f104 0a19 	add.w	sl, r4, #25
 80101ae:	68e3      	ldr	r3, [r4, #12]
 80101b0:	6832      	ldr	r2, [r6, #0]
 80101b2:	1a9b      	subs	r3, r3, r2
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	dc26      	bgt.n	8010206 <_printf_common+0x96>
 80101b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101bc:	1e13      	subs	r3, r2, #0
 80101be:	6822      	ldr	r2, [r4, #0]
 80101c0:	bf18      	it	ne
 80101c2:	2301      	movne	r3, #1
 80101c4:	0692      	lsls	r2, r2, #26
 80101c6:	d42b      	bmi.n	8010220 <_printf_common+0xb0>
 80101c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101cc:	4649      	mov	r1, r9
 80101ce:	4638      	mov	r0, r7
 80101d0:	47c0      	blx	r8
 80101d2:	3001      	adds	r0, #1
 80101d4:	d01e      	beq.n	8010214 <_printf_common+0xa4>
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	68e5      	ldr	r5, [r4, #12]
 80101da:	6832      	ldr	r2, [r6, #0]
 80101dc:	f003 0306 	and.w	r3, r3, #6
 80101e0:	2b04      	cmp	r3, #4
 80101e2:	bf08      	it	eq
 80101e4:	1aad      	subeq	r5, r5, r2
 80101e6:	68a3      	ldr	r3, [r4, #8]
 80101e8:	6922      	ldr	r2, [r4, #16]
 80101ea:	bf0c      	ite	eq
 80101ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101f0:	2500      	movne	r5, #0
 80101f2:	4293      	cmp	r3, r2
 80101f4:	bfc4      	itt	gt
 80101f6:	1a9b      	subgt	r3, r3, r2
 80101f8:	18ed      	addgt	r5, r5, r3
 80101fa:	2600      	movs	r6, #0
 80101fc:	341a      	adds	r4, #26
 80101fe:	42b5      	cmp	r5, r6
 8010200:	d11a      	bne.n	8010238 <_printf_common+0xc8>
 8010202:	2000      	movs	r0, #0
 8010204:	e008      	b.n	8010218 <_printf_common+0xa8>
 8010206:	2301      	movs	r3, #1
 8010208:	4652      	mov	r2, sl
 801020a:	4649      	mov	r1, r9
 801020c:	4638      	mov	r0, r7
 801020e:	47c0      	blx	r8
 8010210:	3001      	adds	r0, #1
 8010212:	d103      	bne.n	801021c <_printf_common+0xac>
 8010214:	f04f 30ff 	mov.w	r0, #4294967295
 8010218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021c:	3501      	adds	r5, #1
 801021e:	e7c6      	b.n	80101ae <_printf_common+0x3e>
 8010220:	18e1      	adds	r1, r4, r3
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	2030      	movs	r0, #48	; 0x30
 8010226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801022a:	4422      	add	r2, r4
 801022c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010234:	3302      	adds	r3, #2
 8010236:	e7c7      	b.n	80101c8 <_printf_common+0x58>
 8010238:	2301      	movs	r3, #1
 801023a:	4622      	mov	r2, r4
 801023c:	4649      	mov	r1, r9
 801023e:	4638      	mov	r0, r7
 8010240:	47c0      	blx	r8
 8010242:	3001      	adds	r0, #1
 8010244:	d0e6      	beq.n	8010214 <_printf_common+0xa4>
 8010246:	3601      	adds	r6, #1
 8010248:	e7d9      	b.n	80101fe <_printf_common+0x8e>
	...

0801024c <_printf_i>:
 801024c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010250:	7e0f      	ldrb	r7, [r1, #24]
 8010252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010254:	2f78      	cmp	r7, #120	; 0x78
 8010256:	4691      	mov	r9, r2
 8010258:	4680      	mov	r8, r0
 801025a:	460c      	mov	r4, r1
 801025c:	469a      	mov	sl, r3
 801025e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010262:	d807      	bhi.n	8010274 <_printf_i+0x28>
 8010264:	2f62      	cmp	r7, #98	; 0x62
 8010266:	d80a      	bhi.n	801027e <_printf_i+0x32>
 8010268:	2f00      	cmp	r7, #0
 801026a:	f000 80d8 	beq.w	801041e <_printf_i+0x1d2>
 801026e:	2f58      	cmp	r7, #88	; 0x58
 8010270:	f000 80a3 	beq.w	80103ba <_printf_i+0x16e>
 8010274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801027c:	e03a      	b.n	80102f4 <_printf_i+0xa8>
 801027e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010282:	2b15      	cmp	r3, #21
 8010284:	d8f6      	bhi.n	8010274 <_printf_i+0x28>
 8010286:	a101      	add	r1, pc, #4	; (adr r1, 801028c <_printf_i+0x40>)
 8010288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801028c:	080102e5 	.word	0x080102e5
 8010290:	080102f9 	.word	0x080102f9
 8010294:	08010275 	.word	0x08010275
 8010298:	08010275 	.word	0x08010275
 801029c:	08010275 	.word	0x08010275
 80102a0:	08010275 	.word	0x08010275
 80102a4:	080102f9 	.word	0x080102f9
 80102a8:	08010275 	.word	0x08010275
 80102ac:	08010275 	.word	0x08010275
 80102b0:	08010275 	.word	0x08010275
 80102b4:	08010275 	.word	0x08010275
 80102b8:	08010405 	.word	0x08010405
 80102bc:	08010329 	.word	0x08010329
 80102c0:	080103e7 	.word	0x080103e7
 80102c4:	08010275 	.word	0x08010275
 80102c8:	08010275 	.word	0x08010275
 80102cc:	08010427 	.word	0x08010427
 80102d0:	08010275 	.word	0x08010275
 80102d4:	08010329 	.word	0x08010329
 80102d8:	08010275 	.word	0x08010275
 80102dc:	08010275 	.word	0x08010275
 80102e0:	080103ef 	.word	0x080103ef
 80102e4:	682b      	ldr	r3, [r5, #0]
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	602a      	str	r2, [r5, #0]
 80102ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102f4:	2301      	movs	r3, #1
 80102f6:	e0a3      	b.n	8010440 <_printf_i+0x1f4>
 80102f8:	6820      	ldr	r0, [r4, #0]
 80102fa:	6829      	ldr	r1, [r5, #0]
 80102fc:	0606      	lsls	r6, r0, #24
 80102fe:	f101 0304 	add.w	r3, r1, #4
 8010302:	d50a      	bpl.n	801031a <_printf_i+0xce>
 8010304:	680e      	ldr	r6, [r1, #0]
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	2e00      	cmp	r6, #0
 801030a:	da03      	bge.n	8010314 <_printf_i+0xc8>
 801030c:	232d      	movs	r3, #45	; 0x2d
 801030e:	4276      	negs	r6, r6
 8010310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010314:	485e      	ldr	r0, [pc, #376]	; (8010490 <_printf_i+0x244>)
 8010316:	230a      	movs	r3, #10
 8010318:	e019      	b.n	801034e <_printf_i+0x102>
 801031a:	680e      	ldr	r6, [r1, #0]
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010322:	bf18      	it	ne
 8010324:	b236      	sxthne	r6, r6
 8010326:	e7ef      	b.n	8010308 <_printf_i+0xbc>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	6820      	ldr	r0, [r4, #0]
 801032c:	1d19      	adds	r1, r3, #4
 801032e:	6029      	str	r1, [r5, #0]
 8010330:	0601      	lsls	r1, r0, #24
 8010332:	d501      	bpl.n	8010338 <_printf_i+0xec>
 8010334:	681e      	ldr	r6, [r3, #0]
 8010336:	e002      	b.n	801033e <_printf_i+0xf2>
 8010338:	0646      	lsls	r6, r0, #25
 801033a:	d5fb      	bpl.n	8010334 <_printf_i+0xe8>
 801033c:	881e      	ldrh	r6, [r3, #0]
 801033e:	4854      	ldr	r0, [pc, #336]	; (8010490 <_printf_i+0x244>)
 8010340:	2f6f      	cmp	r7, #111	; 0x6f
 8010342:	bf0c      	ite	eq
 8010344:	2308      	moveq	r3, #8
 8010346:	230a      	movne	r3, #10
 8010348:	2100      	movs	r1, #0
 801034a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801034e:	6865      	ldr	r5, [r4, #4]
 8010350:	60a5      	str	r5, [r4, #8]
 8010352:	2d00      	cmp	r5, #0
 8010354:	bfa2      	ittt	ge
 8010356:	6821      	ldrge	r1, [r4, #0]
 8010358:	f021 0104 	bicge.w	r1, r1, #4
 801035c:	6021      	strge	r1, [r4, #0]
 801035e:	b90e      	cbnz	r6, 8010364 <_printf_i+0x118>
 8010360:	2d00      	cmp	r5, #0
 8010362:	d04d      	beq.n	8010400 <_printf_i+0x1b4>
 8010364:	4615      	mov	r5, r2
 8010366:	fbb6 f1f3 	udiv	r1, r6, r3
 801036a:	fb03 6711 	mls	r7, r3, r1, r6
 801036e:	5dc7      	ldrb	r7, [r0, r7]
 8010370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010374:	4637      	mov	r7, r6
 8010376:	42bb      	cmp	r3, r7
 8010378:	460e      	mov	r6, r1
 801037a:	d9f4      	bls.n	8010366 <_printf_i+0x11a>
 801037c:	2b08      	cmp	r3, #8
 801037e:	d10b      	bne.n	8010398 <_printf_i+0x14c>
 8010380:	6823      	ldr	r3, [r4, #0]
 8010382:	07de      	lsls	r6, r3, #31
 8010384:	d508      	bpl.n	8010398 <_printf_i+0x14c>
 8010386:	6923      	ldr	r3, [r4, #16]
 8010388:	6861      	ldr	r1, [r4, #4]
 801038a:	4299      	cmp	r1, r3
 801038c:	bfde      	ittt	le
 801038e:	2330      	movle	r3, #48	; 0x30
 8010390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010398:	1b52      	subs	r2, r2, r5
 801039a:	6122      	str	r2, [r4, #16]
 801039c:	f8cd a000 	str.w	sl, [sp]
 80103a0:	464b      	mov	r3, r9
 80103a2:	aa03      	add	r2, sp, #12
 80103a4:	4621      	mov	r1, r4
 80103a6:	4640      	mov	r0, r8
 80103a8:	f7ff fee2 	bl	8010170 <_printf_common>
 80103ac:	3001      	adds	r0, #1
 80103ae:	d14c      	bne.n	801044a <_printf_i+0x1fe>
 80103b0:	f04f 30ff 	mov.w	r0, #4294967295
 80103b4:	b004      	add	sp, #16
 80103b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ba:	4835      	ldr	r0, [pc, #212]	; (8010490 <_printf_i+0x244>)
 80103bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80103c0:	6829      	ldr	r1, [r5, #0]
 80103c2:	6823      	ldr	r3, [r4, #0]
 80103c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80103c8:	6029      	str	r1, [r5, #0]
 80103ca:	061d      	lsls	r5, r3, #24
 80103cc:	d514      	bpl.n	80103f8 <_printf_i+0x1ac>
 80103ce:	07df      	lsls	r7, r3, #31
 80103d0:	bf44      	itt	mi
 80103d2:	f043 0320 	orrmi.w	r3, r3, #32
 80103d6:	6023      	strmi	r3, [r4, #0]
 80103d8:	b91e      	cbnz	r6, 80103e2 <_printf_i+0x196>
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	f023 0320 	bic.w	r3, r3, #32
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	2310      	movs	r3, #16
 80103e4:	e7b0      	b.n	8010348 <_printf_i+0xfc>
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	f043 0320 	orr.w	r3, r3, #32
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	2378      	movs	r3, #120	; 0x78
 80103f0:	4828      	ldr	r0, [pc, #160]	; (8010494 <_printf_i+0x248>)
 80103f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103f6:	e7e3      	b.n	80103c0 <_printf_i+0x174>
 80103f8:	0659      	lsls	r1, r3, #25
 80103fa:	bf48      	it	mi
 80103fc:	b2b6      	uxthmi	r6, r6
 80103fe:	e7e6      	b.n	80103ce <_printf_i+0x182>
 8010400:	4615      	mov	r5, r2
 8010402:	e7bb      	b.n	801037c <_printf_i+0x130>
 8010404:	682b      	ldr	r3, [r5, #0]
 8010406:	6826      	ldr	r6, [r4, #0]
 8010408:	6961      	ldr	r1, [r4, #20]
 801040a:	1d18      	adds	r0, r3, #4
 801040c:	6028      	str	r0, [r5, #0]
 801040e:	0635      	lsls	r5, r6, #24
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	d501      	bpl.n	8010418 <_printf_i+0x1cc>
 8010414:	6019      	str	r1, [r3, #0]
 8010416:	e002      	b.n	801041e <_printf_i+0x1d2>
 8010418:	0670      	lsls	r0, r6, #25
 801041a:	d5fb      	bpl.n	8010414 <_printf_i+0x1c8>
 801041c:	8019      	strh	r1, [r3, #0]
 801041e:	2300      	movs	r3, #0
 8010420:	6123      	str	r3, [r4, #16]
 8010422:	4615      	mov	r5, r2
 8010424:	e7ba      	b.n	801039c <_printf_i+0x150>
 8010426:	682b      	ldr	r3, [r5, #0]
 8010428:	1d1a      	adds	r2, r3, #4
 801042a:	602a      	str	r2, [r5, #0]
 801042c:	681d      	ldr	r5, [r3, #0]
 801042e:	6862      	ldr	r2, [r4, #4]
 8010430:	2100      	movs	r1, #0
 8010432:	4628      	mov	r0, r5
 8010434:	f7f6 f894 	bl	8006560 <memchr>
 8010438:	b108      	cbz	r0, 801043e <_printf_i+0x1f2>
 801043a:	1b40      	subs	r0, r0, r5
 801043c:	6060      	str	r0, [r4, #4]
 801043e:	6863      	ldr	r3, [r4, #4]
 8010440:	6123      	str	r3, [r4, #16]
 8010442:	2300      	movs	r3, #0
 8010444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010448:	e7a8      	b.n	801039c <_printf_i+0x150>
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	462a      	mov	r2, r5
 801044e:	4649      	mov	r1, r9
 8010450:	4640      	mov	r0, r8
 8010452:	47d0      	blx	sl
 8010454:	3001      	adds	r0, #1
 8010456:	d0ab      	beq.n	80103b0 <_printf_i+0x164>
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	079b      	lsls	r3, r3, #30
 801045c:	d413      	bmi.n	8010486 <_printf_i+0x23a>
 801045e:	68e0      	ldr	r0, [r4, #12]
 8010460:	9b03      	ldr	r3, [sp, #12]
 8010462:	4298      	cmp	r0, r3
 8010464:	bfb8      	it	lt
 8010466:	4618      	movlt	r0, r3
 8010468:	e7a4      	b.n	80103b4 <_printf_i+0x168>
 801046a:	2301      	movs	r3, #1
 801046c:	4632      	mov	r2, r6
 801046e:	4649      	mov	r1, r9
 8010470:	4640      	mov	r0, r8
 8010472:	47d0      	blx	sl
 8010474:	3001      	adds	r0, #1
 8010476:	d09b      	beq.n	80103b0 <_printf_i+0x164>
 8010478:	3501      	adds	r5, #1
 801047a:	68e3      	ldr	r3, [r4, #12]
 801047c:	9903      	ldr	r1, [sp, #12]
 801047e:	1a5b      	subs	r3, r3, r1
 8010480:	42ab      	cmp	r3, r5
 8010482:	dcf2      	bgt.n	801046a <_printf_i+0x21e>
 8010484:	e7eb      	b.n	801045e <_printf_i+0x212>
 8010486:	2500      	movs	r5, #0
 8010488:	f104 0619 	add.w	r6, r4, #25
 801048c:	e7f5      	b.n	801047a <_printf_i+0x22e>
 801048e:	bf00      	nop
 8010490:	08011969 	.word	0x08011969
 8010494:	0801197a 	.word	0x0801197a

08010498 <_sbrk_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d06      	ldr	r5, [pc, #24]	; (80104b4 <_sbrk_r+0x1c>)
 801049c:	2300      	movs	r3, #0
 801049e:	4604      	mov	r4, r0
 80104a0:	4608      	mov	r0, r1
 80104a2:	602b      	str	r3, [r5, #0]
 80104a4:	f7f8 f812 	bl	80084cc <_sbrk>
 80104a8:	1c43      	adds	r3, r0, #1
 80104aa:	d102      	bne.n	80104b2 <_sbrk_r+0x1a>
 80104ac:	682b      	ldr	r3, [r5, #0]
 80104ae:	b103      	cbz	r3, 80104b2 <_sbrk_r+0x1a>
 80104b0:	6023      	str	r3, [r4, #0]
 80104b2:	bd38      	pop	{r3, r4, r5, pc}
 80104b4:	20001394 	.word	0x20001394

080104b8 <siprintf>:
 80104b8:	b40e      	push	{r1, r2, r3}
 80104ba:	b500      	push	{lr}
 80104bc:	b09c      	sub	sp, #112	; 0x70
 80104be:	ab1d      	add	r3, sp, #116	; 0x74
 80104c0:	9002      	str	r0, [sp, #8]
 80104c2:	9006      	str	r0, [sp, #24]
 80104c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104c8:	4809      	ldr	r0, [pc, #36]	; (80104f0 <siprintf+0x38>)
 80104ca:	9107      	str	r1, [sp, #28]
 80104cc:	9104      	str	r1, [sp, #16]
 80104ce:	4909      	ldr	r1, [pc, #36]	; (80104f4 <siprintf+0x3c>)
 80104d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d4:	9105      	str	r1, [sp, #20]
 80104d6:	6800      	ldr	r0, [r0, #0]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	a902      	add	r1, sp, #8
 80104dc:	f000 fbb2 	bl	8010c44 <_svfiprintf_r>
 80104e0:	9b02      	ldr	r3, [sp, #8]
 80104e2:	2200      	movs	r2, #0
 80104e4:	701a      	strb	r2, [r3, #0]
 80104e6:	b01c      	add	sp, #112	; 0x70
 80104e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104ec:	b003      	add	sp, #12
 80104ee:	4770      	bx	lr
 80104f0:	2000003c 	.word	0x2000003c
 80104f4:	ffff0208 	.word	0xffff0208

080104f8 <strchr>:
 80104f8:	b2c9      	uxtb	r1, r1
 80104fa:	4603      	mov	r3, r0
 80104fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010500:	b11a      	cbz	r2, 801050a <strchr+0x12>
 8010502:	428a      	cmp	r2, r1
 8010504:	d1f9      	bne.n	80104fa <strchr+0x2>
 8010506:	4618      	mov	r0, r3
 8010508:	4770      	bx	lr
 801050a:	2900      	cmp	r1, #0
 801050c:	bf18      	it	ne
 801050e:	2300      	movne	r3, #0
 8010510:	e7f9      	b.n	8010506 <strchr+0xe>
	...

08010514 <__swbuf_r>:
 8010514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010516:	460e      	mov	r6, r1
 8010518:	4614      	mov	r4, r2
 801051a:	4605      	mov	r5, r0
 801051c:	b118      	cbz	r0, 8010526 <__swbuf_r+0x12>
 801051e:	6983      	ldr	r3, [r0, #24]
 8010520:	b90b      	cbnz	r3, 8010526 <__swbuf_r+0x12>
 8010522:	f000 f9d9 	bl	80108d8 <__sinit>
 8010526:	4b21      	ldr	r3, [pc, #132]	; (80105ac <__swbuf_r+0x98>)
 8010528:	429c      	cmp	r4, r3
 801052a:	d12b      	bne.n	8010584 <__swbuf_r+0x70>
 801052c:	686c      	ldr	r4, [r5, #4]
 801052e:	69a3      	ldr	r3, [r4, #24]
 8010530:	60a3      	str	r3, [r4, #8]
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	071a      	lsls	r2, r3, #28
 8010536:	d52f      	bpl.n	8010598 <__swbuf_r+0x84>
 8010538:	6923      	ldr	r3, [r4, #16]
 801053a:	b36b      	cbz	r3, 8010598 <__swbuf_r+0x84>
 801053c:	6923      	ldr	r3, [r4, #16]
 801053e:	6820      	ldr	r0, [r4, #0]
 8010540:	1ac0      	subs	r0, r0, r3
 8010542:	6963      	ldr	r3, [r4, #20]
 8010544:	b2f6      	uxtb	r6, r6
 8010546:	4283      	cmp	r3, r0
 8010548:	4637      	mov	r7, r6
 801054a:	dc04      	bgt.n	8010556 <__swbuf_r+0x42>
 801054c:	4621      	mov	r1, r4
 801054e:	4628      	mov	r0, r5
 8010550:	f000 f92e 	bl	80107b0 <_fflush_r>
 8010554:	bb30      	cbnz	r0, 80105a4 <__swbuf_r+0x90>
 8010556:	68a3      	ldr	r3, [r4, #8]
 8010558:	3b01      	subs	r3, #1
 801055a:	60a3      	str	r3, [r4, #8]
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	6022      	str	r2, [r4, #0]
 8010562:	701e      	strb	r6, [r3, #0]
 8010564:	6963      	ldr	r3, [r4, #20]
 8010566:	3001      	adds	r0, #1
 8010568:	4283      	cmp	r3, r0
 801056a:	d004      	beq.n	8010576 <__swbuf_r+0x62>
 801056c:	89a3      	ldrh	r3, [r4, #12]
 801056e:	07db      	lsls	r3, r3, #31
 8010570:	d506      	bpl.n	8010580 <__swbuf_r+0x6c>
 8010572:	2e0a      	cmp	r6, #10
 8010574:	d104      	bne.n	8010580 <__swbuf_r+0x6c>
 8010576:	4621      	mov	r1, r4
 8010578:	4628      	mov	r0, r5
 801057a:	f000 f919 	bl	80107b0 <_fflush_r>
 801057e:	b988      	cbnz	r0, 80105a4 <__swbuf_r+0x90>
 8010580:	4638      	mov	r0, r7
 8010582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010584:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <__swbuf_r+0x9c>)
 8010586:	429c      	cmp	r4, r3
 8010588:	d101      	bne.n	801058e <__swbuf_r+0x7a>
 801058a:	68ac      	ldr	r4, [r5, #8]
 801058c:	e7cf      	b.n	801052e <__swbuf_r+0x1a>
 801058e:	4b09      	ldr	r3, [pc, #36]	; (80105b4 <__swbuf_r+0xa0>)
 8010590:	429c      	cmp	r4, r3
 8010592:	bf08      	it	eq
 8010594:	68ec      	ldreq	r4, [r5, #12]
 8010596:	e7ca      	b.n	801052e <__swbuf_r+0x1a>
 8010598:	4621      	mov	r1, r4
 801059a:	4628      	mov	r0, r5
 801059c:	f000 f80c 	bl	80105b8 <__swsetup_r>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d0cb      	beq.n	801053c <__swbuf_r+0x28>
 80105a4:	f04f 37ff 	mov.w	r7, #4294967295
 80105a8:	e7ea      	b.n	8010580 <__swbuf_r+0x6c>
 80105aa:	bf00      	nop
 80105ac:	080119ac 	.word	0x080119ac
 80105b0:	080119cc 	.word	0x080119cc
 80105b4:	0801198c 	.word	0x0801198c

080105b8 <__swsetup_r>:
 80105b8:	4b32      	ldr	r3, [pc, #200]	; (8010684 <__swsetup_r+0xcc>)
 80105ba:	b570      	push	{r4, r5, r6, lr}
 80105bc:	681d      	ldr	r5, [r3, #0]
 80105be:	4606      	mov	r6, r0
 80105c0:	460c      	mov	r4, r1
 80105c2:	b125      	cbz	r5, 80105ce <__swsetup_r+0x16>
 80105c4:	69ab      	ldr	r3, [r5, #24]
 80105c6:	b913      	cbnz	r3, 80105ce <__swsetup_r+0x16>
 80105c8:	4628      	mov	r0, r5
 80105ca:	f000 f985 	bl	80108d8 <__sinit>
 80105ce:	4b2e      	ldr	r3, [pc, #184]	; (8010688 <__swsetup_r+0xd0>)
 80105d0:	429c      	cmp	r4, r3
 80105d2:	d10f      	bne.n	80105f4 <__swsetup_r+0x3c>
 80105d4:	686c      	ldr	r4, [r5, #4]
 80105d6:	89a3      	ldrh	r3, [r4, #12]
 80105d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105dc:	0719      	lsls	r1, r3, #28
 80105de:	d42c      	bmi.n	801063a <__swsetup_r+0x82>
 80105e0:	06dd      	lsls	r5, r3, #27
 80105e2:	d411      	bmi.n	8010608 <__swsetup_r+0x50>
 80105e4:	2309      	movs	r3, #9
 80105e6:	6033      	str	r3, [r6, #0]
 80105e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105ec:	81a3      	strh	r3, [r4, #12]
 80105ee:	f04f 30ff 	mov.w	r0, #4294967295
 80105f2:	e03e      	b.n	8010672 <__swsetup_r+0xba>
 80105f4:	4b25      	ldr	r3, [pc, #148]	; (801068c <__swsetup_r+0xd4>)
 80105f6:	429c      	cmp	r4, r3
 80105f8:	d101      	bne.n	80105fe <__swsetup_r+0x46>
 80105fa:	68ac      	ldr	r4, [r5, #8]
 80105fc:	e7eb      	b.n	80105d6 <__swsetup_r+0x1e>
 80105fe:	4b24      	ldr	r3, [pc, #144]	; (8010690 <__swsetup_r+0xd8>)
 8010600:	429c      	cmp	r4, r3
 8010602:	bf08      	it	eq
 8010604:	68ec      	ldreq	r4, [r5, #12]
 8010606:	e7e6      	b.n	80105d6 <__swsetup_r+0x1e>
 8010608:	0758      	lsls	r0, r3, #29
 801060a:	d512      	bpl.n	8010632 <__swsetup_r+0x7a>
 801060c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801060e:	b141      	cbz	r1, 8010622 <__swsetup_r+0x6a>
 8010610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010614:	4299      	cmp	r1, r3
 8010616:	d002      	beq.n	801061e <__swsetup_r+0x66>
 8010618:	4630      	mov	r0, r6
 801061a:	f7ff fb6f 	bl	800fcfc <_free_r>
 801061e:	2300      	movs	r3, #0
 8010620:	6363      	str	r3, [r4, #52]	; 0x34
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010628:	81a3      	strh	r3, [r4, #12]
 801062a:	2300      	movs	r3, #0
 801062c:	6063      	str	r3, [r4, #4]
 801062e:	6923      	ldr	r3, [r4, #16]
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	f043 0308 	orr.w	r3, r3, #8
 8010638:	81a3      	strh	r3, [r4, #12]
 801063a:	6923      	ldr	r3, [r4, #16]
 801063c:	b94b      	cbnz	r3, 8010652 <__swsetup_r+0x9a>
 801063e:	89a3      	ldrh	r3, [r4, #12]
 8010640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010648:	d003      	beq.n	8010652 <__swsetup_r+0x9a>
 801064a:	4621      	mov	r1, r4
 801064c:	4630      	mov	r0, r6
 801064e:	f000 fa09 	bl	8010a64 <__smakebuf_r>
 8010652:	89a0      	ldrh	r0, [r4, #12]
 8010654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010658:	f010 0301 	ands.w	r3, r0, #1
 801065c:	d00a      	beq.n	8010674 <__swsetup_r+0xbc>
 801065e:	2300      	movs	r3, #0
 8010660:	60a3      	str	r3, [r4, #8]
 8010662:	6963      	ldr	r3, [r4, #20]
 8010664:	425b      	negs	r3, r3
 8010666:	61a3      	str	r3, [r4, #24]
 8010668:	6923      	ldr	r3, [r4, #16]
 801066a:	b943      	cbnz	r3, 801067e <__swsetup_r+0xc6>
 801066c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010670:	d1ba      	bne.n	80105e8 <__swsetup_r+0x30>
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	0781      	lsls	r1, r0, #30
 8010676:	bf58      	it	pl
 8010678:	6963      	ldrpl	r3, [r4, #20]
 801067a:	60a3      	str	r3, [r4, #8]
 801067c:	e7f4      	b.n	8010668 <__swsetup_r+0xb0>
 801067e:	2000      	movs	r0, #0
 8010680:	e7f7      	b.n	8010672 <__swsetup_r+0xba>
 8010682:	bf00      	nop
 8010684:	2000003c 	.word	0x2000003c
 8010688:	080119ac 	.word	0x080119ac
 801068c:	080119cc 	.word	0x080119cc
 8010690:	0801198c 	.word	0x0801198c

08010694 <abort>:
 8010694:	b508      	push	{r3, lr}
 8010696:	2006      	movs	r0, #6
 8010698:	f000 fbfc 	bl	8010e94 <raise>
 801069c:	2001      	movs	r0, #1
 801069e:	f7f7 fe9d 	bl	80083dc <_exit>
	...

080106a4 <__sflush_r>:
 80106a4:	898a      	ldrh	r2, [r1, #12]
 80106a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106aa:	4605      	mov	r5, r0
 80106ac:	0710      	lsls	r0, r2, #28
 80106ae:	460c      	mov	r4, r1
 80106b0:	d458      	bmi.n	8010764 <__sflush_r+0xc0>
 80106b2:	684b      	ldr	r3, [r1, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	dc05      	bgt.n	80106c4 <__sflush_r+0x20>
 80106b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	dc02      	bgt.n	80106c4 <__sflush_r+0x20>
 80106be:	2000      	movs	r0, #0
 80106c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106c6:	2e00      	cmp	r6, #0
 80106c8:	d0f9      	beq.n	80106be <__sflush_r+0x1a>
 80106ca:	2300      	movs	r3, #0
 80106cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80106d0:	682f      	ldr	r7, [r5, #0]
 80106d2:	602b      	str	r3, [r5, #0]
 80106d4:	d032      	beq.n	801073c <__sflush_r+0x98>
 80106d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	075a      	lsls	r2, r3, #29
 80106dc:	d505      	bpl.n	80106ea <__sflush_r+0x46>
 80106de:	6863      	ldr	r3, [r4, #4]
 80106e0:	1ac0      	subs	r0, r0, r3
 80106e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106e4:	b10b      	cbz	r3, 80106ea <__sflush_r+0x46>
 80106e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106e8:	1ac0      	subs	r0, r0, r3
 80106ea:	2300      	movs	r3, #0
 80106ec:	4602      	mov	r2, r0
 80106ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106f0:	6a21      	ldr	r1, [r4, #32]
 80106f2:	4628      	mov	r0, r5
 80106f4:	47b0      	blx	r6
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	d106      	bne.n	801070a <__sflush_r+0x66>
 80106fc:	6829      	ldr	r1, [r5, #0]
 80106fe:	291d      	cmp	r1, #29
 8010700:	d82c      	bhi.n	801075c <__sflush_r+0xb8>
 8010702:	4a2a      	ldr	r2, [pc, #168]	; (80107ac <__sflush_r+0x108>)
 8010704:	40ca      	lsrs	r2, r1
 8010706:	07d6      	lsls	r6, r2, #31
 8010708:	d528      	bpl.n	801075c <__sflush_r+0xb8>
 801070a:	2200      	movs	r2, #0
 801070c:	6062      	str	r2, [r4, #4]
 801070e:	04d9      	lsls	r1, r3, #19
 8010710:	6922      	ldr	r2, [r4, #16]
 8010712:	6022      	str	r2, [r4, #0]
 8010714:	d504      	bpl.n	8010720 <__sflush_r+0x7c>
 8010716:	1c42      	adds	r2, r0, #1
 8010718:	d101      	bne.n	801071e <__sflush_r+0x7a>
 801071a:	682b      	ldr	r3, [r5, #0]
 801071c:	b903      	cbnz	r3, 8010720 <__sflush_r+0x7c>
 801071e:	6560      	str	r0, [r4, #84]	; 0x54
 8010720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010722:	602f      	str	r7, [r5, #0]
 8010724:	2900      	cmp	r1, #0
 8010726:	d0ca      	beq.n	80106be <__sflush_r+0x1a>
 8010728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801072c:	4299      	cmp	r1, r3
 801072e:	d002      	beq.n	8010736 <__sflush_r+0x92>
 8010730:	4628      	mov	r0, r5
 8010732:	f7ff fae3 	bl	800fcfc <_free_r>
 8010736:	2000      	movs	r0, #0
 8010738:	6360      	str	r0, [r4, #52]	; 0x34
 801073a:	e7c1      	b.n	80106c0 <__sflush_r+0x1c>
 801073c:	6a21      	ldr	r1, [r4, #32]
 801073e:	2301      	movs	r3, #1
 8010740:	4628      	mov	r0, r5
 8010742:	47b0      	blx	r6
 8010744:	1c41      	adds	r1, r0, #1
 8010746:	d1c7      	bne.n	80106d8 <__sflush_r+0x34>
 8010748:	682b      	ldr	r3, [r5, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d0c4      	beq.n	80106d8 <__sflush_r+0x34>
 801074e:	2b1d      	cmp	r3, #29
 8010750:	d001      	beq.n	8010756 <__sflush_r+0xb2>
 8010752:	2b16      	cmp	r3, #22
 8010754:	d101      	bne.n	801075a <__sflush_r+0xb6>
 8010756:	602f      	str	r7, [r5, #0]
 8010758:	e7b1      	b.n	80106be <__sflush_r+0x1a>
 801075a:	89a3      	ldrh	r3, [r4, #12]
 801075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010760:	81a3      	strh	r3, [r4, #12]
 8010762:	e7ad      	b.n	80106c0 <__sflush_r+0x1c>
 8010764:	690f      	ldr	r7, [r1, #16]
 8010766:	2f00      	cmp	r7, #0
 8010768:	d0a9      	beq.n	80106be <__sflush_r+0x1a>
 801076a:	0793      	lsls	r3, r2, #30
 801076c:	680e      	ldr	r6, [r1, #0]
 801076e:	bf08      	it	eq
 8010770:	694b      	ldreq	r3, [r1, #20]
 8010772:	600f      	str	r7, [r1, #0]
 8010774:	bf18      	it	ne
 8010776:	2300      	movne	r3, #0
 8010778:	eba6 0807 	sub.w	r8, r6, r7
 801077c:	608b      	str	r3, [r1, #8]
 801077e:	f1b8 0f00 	cmp.w	r8, #0
 8010782:	dd9c      	ble.n	80106be <__sflush_r+0x1a>
 8010784:	6a21      	ldr	r1, [r4, #32]
 8010786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010788:	4643      	mov	r3, r8
 801078a:	463a      	mov	r2, r7
 801078c:	4628      	mov	r0, r5
 801078e:	47b0      	blx	r6
 8010790:	2800      	cmp	r0, #0
 8010792:	dc06      	bgt.n	80107a2 <__sflush_r+0xfe>
 8010794:	89a3      	ldrh	r3, [r4, #12]
 8010796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801079a:	81a3      	strh	r3, [r4, #12]
 801079c:	f04f 30ff 	mov.w	r0, #4294967295
 80107a0:	e78e      	b.n	80106c0 <__sflush_r+0x1c>
 80107a2:	4407      	add	r7, r0
 80107a4:	eba8 0800 	sub.w	r8, r8, r0
 80107a8:	e7e9      	b.n	801077e <__sflush_r+0xda>
 80107aa:	bf00      	nop
 80107ac:	20400001 	.word	0x20400001

080107b0 <_fflush_r>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	690b      	ldr	r3, [r1, #16]
 80107b4:	4605      	mov	r5, r0
 80107b6:	460c      	mov	r4, r1
 80107b8:	b913      	cbnz	r3, 80107c0 <_fflush_r+0x10>
 80107ba:	2500      	movs	r5, #0
 80107bc:	4628      	mov	r0, r5
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	b118      	cbz	r0, 80107ca <_fflush_r+0x1a>
 80107c2:	6983      	ldr	r3, [r0, #24]
 80107c4:	b90b      	cbnz	r3, 80107ca <_fflush_r+0x1a>
 80107c6:	f000 f887 	bl	80108d8 <__sinit>
 80107ca:	4b14      	ldr	r3, [pc, #80]	; (801081c <_fflush_r+0x6c>)
 80107cc:	429c      	cmp	r4, r3
 80107ce:	d11b      	bne.n	8010808 <_fflush_r+0x58>
 80107d0:	686c      	ldr	r4, [r5, #4]
 80107d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d0ef      	beq.n	80107ba <_fflush_r+0xa>
 80107da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80107dc:	07d0      	lsls	r0, r2, #31
 80107de:	d404      	bmi.n	80107ea <_fflush_r+0x3a>
 80107e0:	0599      	lsls	r1, r3, #22
 80107e2:	d402      	bmi.n	80107ea <_fflush_r+0x3a>
 80107e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107e6:	f000 f915 	bl	8010a14 <__retarget_lock_acquire_recursive>
 80107ea:	4628      	mov	r0, r5
 80107ec:	4621      	mov	r1, r4
 80107ee:	f7ff ff59 	bl	80106a4 <__sflush_r>
 80107f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107f4:	07da      	lsls	r2, r3, #31
 80107f6:	4605      	mov	r5, r0
 80107f8:	d4e0      	bmi.n	80107bc <_fflush_r+0xc>
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	059b      	lsls	r3, r3, #22
 80107fe:	d4dd      	bmi.n	80107bc <_fflush_r+0xc>
 8010800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010802:	f000 f908 	bl	8010a16 <__retarget_lock_release_recursive>
 8010806:	e7d9      	b.n	80107bc <_fflush_r+0xc>
 8010808:	4b05      	ldr	r3, [pc, #20]	; (8010820 <_fflush_r+0x70>)
 801080a:	429c      	cmp	r4, r3
 801080c:	d101      	bne.n	8010812 <_fflush_r+0x62>
 801080e:	68ac      	ldr	r4, [r5, #8]
 8010810:	e7df      	b.n	80107d2 <_fflush_r+0x22>
 8010812:	4b04      	ldr	r3, [pc, #16]	; (8010824 <_fflush_r+0x74>)
 8010814:	429c      	cmp	r4, r3
 8010816:	bf08      	it	eq
 8010818:	68ec      	ldreq	r4, [r5, #12]
 801081a:	e7da      	b.n	80107d2 <_fflush_r+0x22>
 801081c:	080119ac 	.word	0x080119ac
 8010820:	080119cc 	.word	0x080119cc
 8010824:	0801198c 	.word	0x0801198c

08010828 <std>:
 8010828:	2300      	movs	r3, #0
 801082a:	b510      	push	{r4, lr}
 801082c:	4604      	mov	r4, r0
 801082e:	e9c0 3300 	strd	r3, r3, [r0]
 8010832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010836:	6083      	str	r3, [r0, #8]
 8010838:	8181      	strh	r1, [r0, #12]
 801083a:	6643      	str	r3, [r0, #100]	; 0x64
 801083c:	81c2      	strh	r2, [r0, #14]
 801083e:	6183      	str	r3, [r0, #24]
 8010840:	4619      	mov	r1, r3
 8010842:	2208      	movs	r2, #8
 8010844:	305c      	adds	r0, #92	; 0x5c
 8010846:	f7ff fa51 	bl	800fcec <memset>
 801084a:	4b05      	ldr	r3, [pc, #20]	; (8010860 <std+0x38>)
 801084c:	6263      	str	r3, [r4, #36]	; 0x24
 801084e:	4b05      	ldr	r3, [pc, #20]	; (8010864 <std+0x3c>)
 8010850:	62a3      	str	r3, [r4, #40]	; 0x28
 8010852:	4b05      	ldr	r3, [pc, #20]	; (8010868 <std+0x40>)
 8010854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010856:	4b05      	ldr	r3, [pc, #20]	; (801086c <std+0x44>)
 8010858:	6224      	str	r4, [r4, #32]
 801085a:	6323      	str	r3, [r4, #48]	; 0x30
 801085c:	bd10      	pop	{r4, pc}
 801085e:	bf00      	nop
 8010860:	08010ecd 	.word	0x08010ecd
 8010864:	08010eef 	.word	0x08010eef
 8010868:	08010f27 	.word	0x08010f27
 801086c:	08010f4b 	.word	0x08010f4b

08010870 <_cleanup_r>:
 8010870:	4901      	ldr	r1, [pc, #4]	; (8010878 <_cleanup_r+0x8>)
 8010872:	f000 b8af 	b.w	80109d4 <_fwalk_reent>
 8010876:	bf00      	nop
 8010878:	080107b1 	.word	0x080107b1

0801087c <__sfmoreglue>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	2268      	movs	r2, #104	; 0x68
 8010880:	1e4d      	subs	r5, r1, #1
 8010882:	4355      	muls	r5, r2
 8010884:	460e      	mov	r6, r1
 8010886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801088a:	f7ff faa3 	bl	800fdd4 <_malloc_r>
 801088e:	4604      	mov	r4, r0
 8010890:	b140      	cbz	r0, 80108a4 <__sfmoreglue+0x28>
 8010892:	2100      	movs	r1, #0
 8010894:	e9c0 1600 	strd	r1, r6, [r0]
 8010898:	300c      	adds	r0, #12
 801089a:	60a0      	str	r0, [r4, #8]
 801089c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80108a0:	f7ff fa24 	bl	800fcec <memset>
 80108a4:	4620      	mov	r0, r4
 80108a6:	bd70      	pop	{r4, r5, r6, pc}

080108a8 <__sfp_lock_acquire>:
 80108a8:	4801      	ldr	r0, [pc, #4]	; (80108b0 <__sfp_lock_acquire+0x8>)
 80108aa:	f000 b8b3 	b.w	8010a14 <__retarget_lock_acquire_recursive>
 80108ae:	bf00      	nop
 80108b0:	20001391 	.word	0x20001391

080108b4 <__sfp_lock_release>:
 80108b4:	4801      	ldr	r0, [pc, #4]	; (80108bc <__sfp_lock_release+0x8>)
 80108b6:	f000 b8ae 	b.w	8010a16 <__retarget_lock_release_recursive>
 80108ba:	bf00      	nop
 80108bc:	20001391 	.word	0x20001391

080108c0 <__sinit_lock_acquire>:
 80108c0:	4801      	ldr	r0, [pc, #4]	; (80108c8 <__sinit_lock_acquire+0x8>)
 80108c2:	f000 b8a7 	b.w	8010a14 <__retarget_lock_acquire_recursive>
 80108c6:	bf00      	nop
 80108c8:	20001392 	.word	0x20001392

080108cc <__sinit_lock_release>:
 80108cc:	4801      	ldr	r0, [pc, #4]	; (80108d4 <__sinit_lock_release+0x8>)
 80108ce:	f000 b8a2 	b.w	8010a16 <__retarget_lock_release_recursive>
 80108d2:	bf00      	nop
 80108d4:	20001392 	.word	0x20001392

080108d8 <__sinit>:
 80108d8:	b510      	push	{r4, lr}
 80108da:	4604      	mov	r4, r0
 80108dc:	f7ff fff0 	bl	80108c0 <__sinit_lock_acquire>
 80108e0:	69a3      	ldr	r3, [r4, #24]
 80108e2:	b11b      	cbz	r3, 80108ec <__sinit+0x14>
 80108e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e8:	f7ff bff0 	b.w	80108cc <__sinit_lock_release>
 80108ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80108f0:	6523      	str	r3, [r4, #80]	; 0x50
 80108f2:	4b13      	ldr	r3, [pc, #76]	; (8010940 <__sinit+0x68>)
 80108f4:	4a13      	ldr	r2, [pc, #76]	; (8010944 <__sinit+0x6c>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80108fa:	42a3      	cmp	r3, r4
 80108fc:	bf04      	itt	eq
 80108fe:	2301      	moveq	r3, #1
 8010900:	61a3      	streq	r3, [r4, #24]
 8010902:	4620      	mov	r0, r4
 8010904:	f000 f820 	bl	8010948 <__sfp>
 8010908:	6060      	str	r0, [r4, #4]
 801090a:	4620      	mov	r0, r4
 801090c:	f000 f81c 	bl	8010948 <__sfp>
 8010910:	60a0      	str	r0, [r4, #8]
 8010912:	4620      	mov	r0, r4
 8010914:	f000 f818 	bl	8010948 <__sfp>
 8010918:	2200      	movs	r2, #0
 801091a:	60e0      	str	r0, [r4, #12]
 801091c:	2104      	movs	r1, #4
 801091e:	6860      	ldr	r0, [r4, #4]
 8010920:	f7ff ff82 	bl	8010828 <std>
 8010924:	68a0      	ldr	r0, [r4, #8]
 8010926:	2201      	movs	r2, #1
 8010928:	2109      	movs	r1, #9
 801092a:	f7ff ff7d 	bl	8010828 <std>
 801092e:	68e0      	ldr	r0, [r4, #12]
 8010930:	2202      	movs	r2, #2
 8010932:	2112      	movs	r1, #18
 8010934:	f7ff ff78 	bl	8010828 <std>
 8010938:	2301      	movs	r3, #1
 801093a:	61a3      	str	r3, [r4, #24]
 801093c:	e7d2      	b.n	80108e4 <__sinit+0xc>
 801093e:	bf00      	nop
 8010940:	08011954 	.word	0x08011954
 8010944:	08010871 	.word	0x08010871

08010948 <__sfp>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	4607      	mov	r7, r0
 801094c:	f7ff ffac 	bl	80108a8 <__sfp_lock_acquire>
 8010950:	4b1e      	ldr	r3, [pc, #120]	; (80109cc <__sfp+0x84>)
 8010952:	681e      	ldr	r6, [r3, #0]
 8010954:	69b3      	ldr	r3, [r6, #24]
 8010956:	b913      	cbnz	r3, 801095e <__sfp+0x16>
 8010958:	4630      	mov	r0, r6
 801095a:	f7ff ffbd 	bl	80108d8 <__sinit>
 801095e:	3648      	adds	r6, #72	; 0x48
 8010960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010964:	3b01      	subs	r3, #1
 8010966:	d503      	bpl.n	8010970 <__sfp+0x28>
 8010968:	6833      	ldr	r3, [r6, #0]
 801096a:	b30b      	cbz	r3, 80109b0 <__sfp+0x68>
 801096c:	6836      	ldr	r6, [r6, #0]
 801096e:	e7f7      	b.n	8010960 <__sfp+0x18>
 8010970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010974:	b9d5      	cbnz	r5, 80109ac <__sfp+0x64>
 8010976:	4b16      	ldr	r3, [pc, #88]	; (80109d0 <__sfp+0x88>)
 8010978:	60e3      	str	r3, [r4, #12]
 801097a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801097e:	6665      	str	r5, [r4, #100]	; 0x64
 8010980:	f000 f847 	bl	8010a12 <__retarget_lock_init_recursive>
 8010984:	f7ff ff96 	bl	80108b4 <__sfp_lock_release>
 8010988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801098c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010990:	6025      	str	r5, [r4, #0]
 8010992:	61a5      	str	r5, [r4, #24]
 8010994:	2208      	movs	r2, #8
 8010996:	4629      	mov	r1, r5
 8010998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801099c:	f7ff f9a6 	bl	800fcec <memset>
 80109a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80109a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80109a8:	4620      	mov	r0, r4
 80109aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ac:	3468      	adds	r4, #104	; 0x68
 80109ae:	e7d9      	b.n	8010964 <__sfp+0x1c>
 80109b0:	2104      	movs	r1, #4
 80109b2:	4638      	mov	r0, r7
 80109b4:	f7ff ff62 	bl	801087c <__sfmoreglue>
 80109b8:	4604      	mov	r4, r0
 80109ba:	6030      	str	r0, [r6, #0]
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1d5      	bne.n	801096c <__sfp+0x24>
 80109c0:	f7ff ff78 	bl	80108b4 <__sfp_lock_release>
 80109c4:	230c      	movs	r3, #12
 80109c6:	603b      	str	r3, [r7, #0]
 80109c8:	e7ee      	b.n	80109a8 <__sfp+0x60>
 80109ca:	bf00      	nop
 80109cc:	08011954 	.word	0x08011954
 80109d0:	ffff0001 	.word	0xffff0001

080109d4 <_fwalk_reent>:
 80109d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d8:	4606      	mov	r6, r0
 80109da:	4688      	mov	r8, r1
 80109dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109e0:	2700      	movs	r7, #0
 80109e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109e6:	f1b9 0901 	subs.w	r9, r9, #1
 80109ea:	d505      	bpl.n	80109f8 <_fwalk_reent+0x24>
 80109ec:	6824      	ldr	r4, [r4, #0]
 80109ee:	2c00      	cmp	r4, #0
 80109f0:	d1f7      	bne.n	80109e2 <_fwalk_reent+0xe>
 80109f2:	4638      	mov	r0, r7
 80109f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109f8:	89ab      	ldrh	r3, [r5, #12]
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d907      	bls.n	8010a0e <_fwalk_reent+0x3a>
 80109fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a02:	3301      	adds	r3, #1
 8010a04:	d003      	beq.n	8010a0e <_fwalk_reent+0x3a>
 8010a06:	4629      	mov	r1, r5
 8010a08:	4630      	mov	r0, r6
 8010a0a:	47c0      	blx	r8
 8010a0c:	4307      	orrs	r7, r0
 8010a0e:	3568      	adds	r5, #104	; 0x68
 8010a10:	e7e9      	b.n	80109e6 <_fwalk_reent+0x12>

08010a12 <__retarget_lock_init_recursive>:
 8010a12:	4770      	bx	lr

08010a14 <__retarget_lock_acquire_recursive>:
 8010a14:	4770      	bx	lr

08010a16 <__retarget_lock_release_recursive>:
 8010a16:	4770      	bx	lr

08010a18 <__swhatbuf_r>:
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	460e      	mov	r6, r1
 8010a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a20:	2900      	cmp	r1, #0
 8010a22:	b096      	sub	sp, #88	; 0x58
 8010a24:	4614      	mov	r4, r2
 8010a26:	461d      	mov	r5, r3
 8010a28:	da08      	bge.n	8010a3c <__swhatbuf_r+0x24>
 8010a2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	602a      	str	r2, [r5, #0]
 8010a32:	061a      	lsls	r2, r3, #24
 8010a34:	d410      	bmi.n	8010a58 <__swhatbuf_r+0x40>
 8010a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a3a:	e00e      	b.n	8010a5a <__swhatbuf_r+0x42>
 8010a3c:	466a      	mov	r2, sp
 8010a3e:	f000 faab 	bl	8010f98 <_fstat_r>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	dbf1      	blt.n	8010a2a <__swhatbuf_r+0x12>
 8010a46:	9a01      	ldr	r2, [sp, #4]
 8010a48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a50:	425a      	negs	r2, r3
 8010a52:	415a      	adcs	r2, r3
 8010a54:	602a      	str	r2, [r5, #0]
 8010a56:	e7ee      	b.n	8010a36 <__swhatbuf_r+0x1e>
 8010a58:	2340      	movs	r3, #64	; 0x40
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	6023      	str	r3, [r4, #0]
 8010a5e:	b016      	add	sp, #88	; 0x58
 8010a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a64 <__smakebuf_r>:
 8010a64:	898b      	ldrh	r3, [r1, #12]
 8010a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a68:	079d      	lsls	r5, r3, #30
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	460c      	mov	r4, r1
 8010a6e:	d507      	bpl.n	8010a80 <__smakebuf_r+0x1c>
 8010a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	6123      	str	r3, [r4, #16]
 8010a78:	2301      	movs	r3, #1
 8010a7a:	6163      	str	r3, [r4, #20]
 8010a7c:	b002      	add	sp, #8
 8010a7e:	bd70      	pop	{r4, r5, r6, pc}
 8010a80:	ab01      	add	r3, sp, #4
 8010a82:	466a      	mov	r2, sp
 8010a84:	f7ff ffc8 	bl	8010a18 <__swhatbuf_r>
 8010a88:	9900      	ldr	r1, [sp, #0]
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7ff f9a1 	bl	800fdd4 <_malloc_r>
 8010a92:	b948      	cbnz	r0, 8010aa8 <__smakebuf_r+0x44>
 8010a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a98:	059a      	lsls	r2, r3, #22
 8010a9a:	d4ef      	bmi.n	8010a7c <__smakebuf_r+0x18>
 8010a9c:	f023 0303 	bic.w	r3, r3, #3
 8010aa0:	f043 0302 	orr.w	r3, r3, #2
 8010aa4:	81a3      	strh	r3, [r4, #12]
 8010aa6:	e7e3      	b.n	8010a70 <__smakebuf_r+0xc>
 8010aa8:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <__smakebuf_r+0x7c>)
 8010aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010aac:	89a3      	ldrh	r3, [r4, #12]
 8010aae:	6020      	str	r0, [r4, #0]
 8010ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ab4:	81a3      	strh	r3, [r4, #12]
 8010ab6:	9b00      	ldr	r3, [sp, #0]
 8010ab8:	6163      	str	r3, [r4, #20]
 8010aba:	9b01      	ldr	r3, [sp, #4]
 8010abc:	6120      	str	r0, [r4, #16]
 8010abe:	b15b      	cbz	r3, 8010ad8 <__smakebuf_r+0x74>
 8010ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	f000 fa79 	bl	8010fbc <_isatty_r>
 8010aca:	b128      	cbz	r0, 8010ad8 <__smakebuf_r+0x74>
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	f023 0303 	bic.w	r3, r3, #3
 8010ad2:	f043 0301 	orr.w	r3, r3, #1
 8010ad6:	81a3      	strh	r3, [r4, #12]
 8010ad8:	89a0      	ldrh	r0, [r4, #12]
 8010ada:	4305      	orrs	r5, r0
 8010adc:	81a5      	strh	r5, [r4, #12]
 8010ade:	e7cd      	b.n	8010a7c <__smakebuf_r+0x18>
 8010ae0:	08010871 	.word	0x08010871

08010ae4 <memmove>:
 8010ae4:	4288      	cmp	r0, r1
 8010ae6:	b510      	push	{r4, lr}
 8010ae8:	eb01 0402 	add.w	r4, r1, r2
 8010aec:	d902      	bls.n	8010af4 <memmove+0x10>
 8010aee:	4284      	cmp	r4, r0
 8010af0:	4623      	mov	r3, r4
 8010af2:	d807      	bhi.n	8010b04 <memmove+0x20>
 8010af4:	1e43      	subs	r3, r0, #1
 8010af6:	42a1      	cmp	r1, r4
 8010af8:	d008      	beq.n	8010b0c <memmove+0x28>
 8010afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b02:	e7f8      	b.n	8010af6 <memmove+0x12>
 8010b04:	4402      	add	r2, r0
 8010b06:	4601      	mov	r1, r0
 8010b08:	428a      	cmp	r2, r1
 8010b0a:	d100      	bne.n	8010b0e <memmove+0x2a>
 8010b0c:	bd10      	pop	{r4, pc}
 8010b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b16:	e7f7      	b.n	8010b08 <memmove+0x24>

08010b18 <__malloc_lock>:
 8010b18:	4801      	ldr	r0, [pc, #4]	; (8010b20 <__malloc_lock+0x8>)
 8010b1a:	f7ff bf7b 	b.w	8010a14 <__retarget_lock_acquire_recursive>
 8010b1e:	bf00      	nop
 8010b20:	20001390 	.word	0x20001390

08010b24 <__malloc_unlock>:
 8010b24:	4801      	ldr	r0, [pc, #4]	; (8010b2c <__malloc_unlock+0x8>)
 8010b26:	f7ff bf76 	b.w	8010a16 <__retarget_lock_release_recursive>
 8010b2a:	bf00      	nop
 8010b2c:	20001390 	.word	0x20001390

08010b30 <_realloc_r>:
 8010b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b34:	4680      	mov	r8, r0
 8010b36:	4614      	mov	r4, r2
 8010b38:	460e      	mov	r6, r1
 8010b3a:	b921      	cbnz	r1, 8010b46 <_realloc_r+0x16>
 8010b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b40:	4611      	mov	r1, r2
 8010b42:	f7ff b947 	b.w	800fdd4 <_malloc_r>
 8010b46:	b92a      	cbnz	r2, 8010b54 <_realloc_r+0x24>
 8010b48:	f7ff f8d8 	bl	800fcfc <_free_r>
 8010b4c:	4625      	mov	r5, r4
 8010b4e:	4628      	mov	r0, r5
 8010b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b54:	f000 fa54 	bl	8011000 <_malloc_usable_size_r>
 8010b58:	4284      	cmp	r4, r0
 8010b5a:	4607      	mov	r7, r0
 8010b5c:	d802      	bhi.n	8010b64 <_realloc_r+0x34>
 8010b5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b62:	d812      	bhi.n	8010b8a <_realloc_r+0x5a>
 8010b64:	4621      	mov	r1, r4
 8010b66:	4640      	mov	r0, r8
 8010b68:	f7ff f934 	bl	800fdd4 <_malloc_r>
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0ed      	beq.n	8010b4e <_realloc_r+0x1e>
 8010b72:	42bc      	cmp	r4, r7
 8010b74:	4622      	mov	r2, r4
 8010b76:	4631      	mov	r1, r6
 8010b78:	bf28      	it	cs
 8010b7a:	463a      	movcs	r2, r7
 8010b7c:	f7ff f8a8 	bl	800fcd0 <memcpy>
 8010b80:	4631      	mov	r1, r6
 8010b82:	4640      	mov	r0, r8
 8010b84:	f7ff f8ba 	bl	800fcfc <_free_r>
 8010b88:	e7e1      	b.n	8010b4e <_realloc_r+0x1e>
 8010b8a:	4635      	mov	r5, r6
 8010b8c:	e7df      	b.n	8010b4e <_realloc_r+0x1e>

08010b8e <__ssputs_r>:
 8010b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b92:	688e      	ldr	r6, [r1, #8]
 8010b94:	429e      	cmp	r6, r3
 8010b96:	4682      	mov	sl, r0
 8010b98:	460c      	mov	r4, r1
 8010b9a:	4690      	mov	r8, r2
 8010b9c:	461f      	mov	r7, r3
 8010b9e:	d838      	bhi.n	8010c12 <__ssputs_r+0x84>
 8010ba0:	898a      	ldrh	r2, [r1, #12]
 8010ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ba6:	d032      	beq.n	8010c0e <__ssputs_r+0x80>
 8010ba8:	6825      	ldr	r5, [r4, #0]
 8010baa:	6909      	ldr	r1, [r1, #16]
 8010bac:	eba5 0901 	sub.w	r9, r5, r1
 8010bb0:	6965      	ldr	r5, [r4, #20]
 8010bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bba:	3301      	adds	r3, #1
 8010bbc:	444b      	add	r3, r9
 8010bbe:	106d      	asrs	r5, r5, #1
 8010bc0:	429d      	cmp	r5, r3
 8010bc2:	bf38      	it	cc
 8010bc4:	461d      	movcc	r5, r3
 8010bc6:	0553      	lsls	r3, r2, #21
 8010bc8:	d531      	bpl.n	8010c2e <__ssputs_r+0xa0>
 8010bca:	4629      	mov	r1, r5
 8010bcc:	f7ff f902 	bl	800fdd4 <_malloc_r>
 8010bd0:	4606      	mov	r6, r0
 8010bd2:	b950      	cbnz	r0, 8010bea <__ssputs_r+0x5c>
 8010bd4:	230c      	movs	r3, #12
 8010bd6:	f8ca 3000 	str.w	r3, [sl]
 8010bda:	89a3      	ldrh	r3, [r4, #12]
 8010bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010be0:	81a3      	strh	r3, [r4, #12]
 8010be2:	f04f 30ff 	mov.w	r0, #4294967295
 8010be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bea:	6921      	ldr	r1, [r4, #16]
 8010bec:	464a      	mov	r2, r9
 8010bee:	f7ff f86f 	bl	800fcd0 <memcpy>
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bfc:	81a3      	strh	r3, [r4, #12]
 8010bfe:	6126      	str	r6, [r4, #16]
 8010c00:	6165      	str	r5, [r4, #20]
 8010c02:	444e      	add	r6, r9
 8010c04:	eba5 0509 	sub.w	r5, r5, r9
 8010c08:	6026      	str	r6, [r4, #0]
 8010c0a:	60a5      	str	r5, [r4, #8]
 8010c0c:	463e      	mov	r6, r7
 8010c0e:	42be      	cmp	r6, r7
 8010c10:	d900      	bls.n	8010c14 <__ssputs_r+0x86>
 8010c12:	463e      	mov	r6, r7
 8010c14:	6820      	ldr	r0, [r4, #0]
 8010c16:	4632      	mov	r2, r6
 8010c18:	4641      	mov	r1, r8
 8010c1a:	f7ff ff63 	bl	8010ae4 <memmove>
 8010c1e:	68a3      	ldr	r3, [r4, #8]
 8010c20:	1b9b      	subs	r3, r3, r6
 8010c22:	60a3      	str	r3, [r4, #8]
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	4433      	add	r3, r6
 8010c28:	6023      	str	r3, [r4, #0]
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e7db      	b.n	8010be6 <__ssputs_r+0x58>
 8010c2e:	462a      	mov	r2, r5
 8010c30:	f7ff ff7e 	bl	8010b30 <_realloc_r>
 8010c34:	4606      	mov	r6, r0
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d1e1      	bne.n	8010bfe <__ssputs_r+0x70>
 8010c3a:	6921      	ldr	r1, [r4, #16]
 8010c3c:	4650      	mov	r0, sl
 8010c3e:	f7ff f85d 	bl	800fcfc <_free_r>
 8010c42:	e7c7      	b.n	8010bd4 <__ssputs_r+0x46>

08010c44 <_svfiprintf_r>:
 8010c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c48:	4698      	mov	r8, r3
 8010c4a:	898b      	ldrh	r3, [r1, #12]
 8010c4c:	061b      	lsls	r3, r3, #24
 8010c4e:	b09d      	sub	sp, #116	; 0x74
 8010c50:	4607      	mov	r7, r0
 8010c52:	460d      	mov	r5, r1
 8010c54:	4614      	mov	r4, r2
 8010c56:	d50e      	bpl.n	8010c76 <_svfiprintf_r+0x32>
 8010c58:	690b      	ldr	r3, [r1, #16]
 8010c5a:	b963      	cbnz	r3, 8010c76 <_svfiprintf_r+0x32>
 8010c5c:	2140      	movs	r1, #64	; 0x40
 8010c5e:	f7ff f8b9 	bl	800fdd4 <_malloc_r>
 8010c62:	6028      	str	r0, [r5, #0]
 8010c64:	6128      	str	r0, [r5, #16]
 8010c66:	b920      	cbnz	r0, 8010c72 <_svfiprintf_r+0x2e>
 8010c68:	230c      	movs	r3, #12
 8010c6a:	603b      	str	r3, [r7, #0]
 8010c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c70:	e0d1      	b.n	8010e16 <_svfiprintf_r+0x1d2>
 8010c72:	2340      	movs	r3, #64	; 0x40
 8010c74:	616b      	str	r3, [r5, #20]
 8010c76:	2300      	movs	r3, #0
 8010c78:	9309      	str	r3, [sp, #36]	; 0x24
 8010c7a:	2320      	movs	r3, #32
 8010c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c84:	2330      	movs	r3, #48	; 0x30
 8010c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e30 <_svfiprintf_r+0x1ec>
 8010c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c8e:	f04f 0901 	mov.w	r9, #1
 8010c92:	4623      	mov	r3, r4
 8010c94:	469a      	mov	sl, r3
 8010c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c9a:	b10a      	cbz	r2, 8010ca0 <_svfiprintf_r+0x5c>
 8010c9c:	2a25      	cmp	r2, #37	; 0x25
 8010c9e:	d1f9      	bne.n	8010c94 <_svfiprintf_r+0x50>
 8010ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8010ca4:	d00b      	beq.n	8010cbe <_svfiprintf_r+0x7a>
 8010ca6:	465b      	mov	r3, fp
 8010ca8:	4622      	mov	r2, r4
 8010caa:	4629      	mov	r1, r5
 8010cac:	4638      	mov	r0, r7
 8010cae:	f7ff ff6e 	bl	8010b8e <__ssputs_r>
 8010cb2:	3001      	adds	r0, #1
 8010cb4:	f000 80aa 	beq.w	8010e0c <_svfiprintf_r+0x1c8>
 8010cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cba:	445a      	add	r2, fp
 8010cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8010cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f000 80a2 	beq.w	8010e0c <_svfiprintf_r+0x1c8>
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f04f 32ff 	mov.w	r2, #4294967295
 8010cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cd2:	f10a 0a01 	add.w	sl, sl, #1
 8010cd6:	9304      	str	r3, [sp, #16]
 8010cd8:	9307      	str	r3, [sp, #28]
 8010cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cde:	931a      	str	r3, [sp, #104]	; 0x68
 8010ce0:	4654      	mov	r4, sl
 8010ce2:	2205      	movs	r2, #5
 8010ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce8:	4851      	ldr	r0, [pc, #324]	; (8010e30 <_svfiprintf_r+0x1ec>)
 8010cea:	f7f5 fc39 	bl	8006560 <memchr>
 8010cee:	9a04      	ldr	r2, [sp, #16]
 8010cf0:	b9d8      	cbnz	r0, 8010d2a <_svfiprintf_r+0xe6>
 8010cf2:	06d0      	lsls	r0, r2, #27
 8010cf4:	bf44      	itt	mi
 8010cf6:	2320      	movmi	r3, #32
 8010cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cfc:	0711      	lsls	r1, r2, #28
 8010cfe:	bf44      	itt	mi
 8010d00:	232b      	movmi	r3, #43	; 0x2b
 8010d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d06:	f89a 3000 	ldrb.w	r3, [sl]
 8010d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8010d0c:	d015      	beq.n	8010d3a <_svfiprintf_r+0xf6>
 8010d0e:	9a07      	ldr	r2, [sp, #28]
 8010d10:	4654      	mov	r4, sl
 8010d12:	2000      	movs	r0, #0
 8010d14:	f04f 0c0a 	mov.w	ip, #10
 8010d18:	4621      	mov	r1, r4
 8010d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d1e:	3b30      	subs	r3, #48	; 0x30
 8010d20:	2b09      	cmp	r3, #9
 8010d22:	d94e      	bls.n	8010dc2 <_svfiprintf_r+0x17e>
 8010d24:	b1b0      	cbz	r0, 8010d54 <_svfiprintf_r+0x110>
 8010d26:	9207      	str	r2, [sp, #28]
 8010d28:	e014      	b.n	8010d54 <_svfiprintf_r+0x110>
 8010d2a:	eba0 0308 	sub.w	r3, r0, r8
 8010d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8010d32:	4313      	orrs	r3, r2
 8010d34:	9304      	str	r3, [sp, #16]
 8010d36:	46a2      	mov	sl, r4
 8010d38:	e7d2      	b.n	8010ce0 <_svfiprintf_r+0x9c>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	1d19      	adds	r1, r3, #4
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	9103      	str	r1, [sp, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bfbb      	ittet	lt
 8010d46:	425b      	neglt	r3, r3
 8010d48:	f042 0202 	orrlt.w	r2, r2, #2
 8010d4c:	9307      	strge	r3, [sp, #28]
 8010d4e:	9307      	strlt	r3, [sp, #28]
 8010d50:	bfb8      	it	lt
 8010d52:	9204      	strlt	r2, [sp, #16]
 8010d54:	7823      	ldrb	r3, [r4, #0]
 8010d56:	2b2e      	cmp	r3, #46	; 0x2e
 8010d58:	d10c      	bne.n	8010d74 <_svfiprintf_r+0x130>
 8010d5a:	7863      	ldrb	r3, [r4, #1]
 8010d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d5e:	d135      	bne.n	8010dcc <_svfiprintf_r+0x188>
 8010d60:	9b03      	ldr	r3, [sp, #12]
 8010d62:	1d1a      	adds	r2, r3, #4
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	9203      	str	r2, [sp, #12]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bfb8      	it	lt
 8010d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d70:	3402      	adds	r4, #2
 8010d72:	9305      	str	r3, [sp, #20]
 8010d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010e40 <_svfiprintf_r+0x1fc>
 8010d78:	7821      	ldrb	r1, [r4, #0]
 8010d7a:	2203      	movs	r2, #3
 8010d7c:	4650      	mov	r0, sl
 8010d7e:	f7f5 fbef 	bl	8006560 <memchr>
 8010d82:	b140      	cbz	r0, 8010d96 <_svfiprintf_r+0x152>
 8010d84:	2340      	movs	r3, #64	; 0x40
 8010d86:	eba0 000a 	sub.w	r0, r0, sl
 8010d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8010d8e:	9b04      	ldr	r3, [sp, #16]
 8010d90:	4303      	orrs	r3, r0
 8010d92:	3401      	adds	r4, #1
 8010d94:	9304      	str	r3, [sp, #16]
 8010d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d9a:	4826      	ldr	r0, [pc, #152]	; (8010e34 <_svfiprintf_r+0x1f0>)
 8010d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010da0:	2206      	movs	r2, #6
 8010da2:	f7f5 fbdd 	bl	8006560 <memchr>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d038      	beq.n	8010e1c <_svfiprintf_r+0x1d8>
 8010daa:	4b23      	ldr	r3, [pc, #140]	; (8010e38 <_svfiprintf_r+0x1f4>)
 8010dac:	bb1b      	cbnz	r3, 8010df6 <_svfiprintf_r+0x1b2>
 8010dae:	9b03      	ldr	r3, [sp, #12]
 8010db0:	3307      	adds	r3, #7
 8010db2:	f023 0307 	bic.w	r3, r3, #7
 8010db6:	3308      	adds	r3, #8
 8010db8:	9303      	str	r3, [sp, #12]
 8010dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dbc:	4433      	add	r3, r6
 8010dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8010dc0:	e767      	b.n	8010c92 <_svfiprintf_r+0x4e>
 8010dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	2001      	movs	r0, #1
 8010dca:	e7a5      	b.n	8010d18 <_svfiprintf_r+0xd4>
 8010dcc:	2300      	movs	r3, #0
 8010dce:	3401      	adds	r4, #1
 8010dd0:	9305      	str	r3, [sp, #20]
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	f04f 0c0a 	mov.w	ip, #10
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dde:	3a30      	subs	r2, #48	; 0x30
 8010de0:	2a09      	cmp	r2, #9
 8010de2:	d903      	bls.n	8010dec <_svfiprintf_r+0x1a8>
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d0c5      	beq.n	8010d74 <_svfiprintf_r+0x130>
 8010de8:	9105      	str	r1, [sp, #20]
 8010dea:	e7c3      	b.n	8010d74 <_svfiprintf_r+0x130>
 8010dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8010df0:	4604      	mov	r4, r0
 8010df2:	2301      	movs	r3, #1
 8010df4:	e7f0      	b.n	8010dd8 <_svfiprintf_r+0x194>
 8010df6:	ab03      	add	r3, sp, #12
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	462a      	mov	r2, r5
 8010dfc:	4b0f      	ldr	r3, [pc, #60]	; (8010e3c <_svfiprintf_r+0x1f8>)
 8010dfe:	a904      	add	r1, sp, #16
 8010e00:	4638      	mov	r0, r7
 8010e02:	f3af 8000 	nop.w
 8010e06:	1c42      	adds	r2, r0, #1
 8010e08:	4606      	mov	r6, r0
 8010e0a:	d1d6      	bne.n	8010dba <_svfiprintf_r+0x176>
 8010e0c:	89ab      	ldrh	r3, [r5, #12]
 8010e0e:	065b      	lsls	r3, r3, #25
 8010e10:	f53f af2c 	bmi.w	8010c6c <_svfiprintf_r+0x28>
 8010e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e16:	b01d      	add	sp, #116	; 0x74
 8010e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1c:	ab03      	add	r3, sp, #12
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	462a      	mov	r2, r5
 8010e22:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <_svfiprintf_r+0x1f8>)
 8010e24:	a904      	add	r1, sp, #16
 8010e26:	4638      	mov	r0, r7
 8010e28:	f7ff fa10 	bl	801024c <_printf_i>
 8010e2c:	e7eb      	b.n	8010e06 <_svfiprintf_r+0x1c2>
 8010e2e:	bf00      	nop
 8010e30:	08011958 	.word	0x08011958
 8010e34:	08011962 	.word	0x08011962
 8010e38:	00000000 	.word	0x00000000
 8010e3c:	08010b8f 	.word	0x08010b8f
 8010e40:	0801195e 	.word	0x0801195e

08010e44 <_raise_r>:
 8010e44:	291f      	cmp	r1, #31
 8010e46:	b538      	push	{r3, r4, r5, lr}
 8010e48:	4604      	mov	r4, r0
 8010e4a:	460d      	mov	r5, r1
 8010e4c:	d904      	bls.n	8010e58 <_raise_r+0x14>
 8010e4e:	2316      	movs	r3, #22
 8010e50:	6003      	str	r3, [r0, #0]
 8010e52:	f04f 30ff 	mov.w	r0, #4294967295
 8010e56:	bd38      	pop	{r3, r4, r5, pc}
 8010e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e5a:	b112      	cbz	r2, 8010e62 <_raise_r+0x1e>
 8010e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e60:	b94b      	cbnz	r3, 8010e76 <_raise_r+0x32>
 8010e62:	4620      	mov	r0, r4
 8010e64:	f000 f830 	bl	8010ec8 <_getpid_r>
 8010e68:	462a      	mov	r2, r5
 8010e6a:	4601      	mov	r1, r0
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e72:	f000 b817 	b.w	8010ea4 <_kill_r>
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d00a      	beq.n	8010e90 <_raise_r+0x4c>
 8010e7a:	1c59      	adds	r1, r3, #1
 8010e7c:	d103      	bne.n	8010e86 <_raise_r+0x42>
 8010e7e:	2316      	movs	r3, #22
 8010e80:	6003      	str	r3, [r0, #0]
 8010e82:	2001      	movs	r0, #1
 8010e84:	e7e7      	b.n	8010e56 <_raise_r+0x12>
 8010e86:	2400      	movs	r4, #0
 8010e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	4798      	blx	r3
 8010e90:	2000      	movs	r0, #0
 8010e92:	e7e0      	b.n	8010e56 <_raise_r+0x12>

08010e94 <raise>:
 8010e94:	4b02      	ldr	r3, [pc, #8]	; (8010ea0 <raise+0xc>)
 8010e96:	4601      	mov	r1, r0
 8010e98:	6818      	ldr	r0, [r3, #0]
 8010e9a:	f7ff bfd3 	b.w	8010e44 <_raise_r>
 8010e9e:	bf00      	nop
 8010ea0:	2000003c 	.word	0x2000003c

08010ea4 <_kill_r>:
 8010ea4:	b538      	push	{r3, r4, r5, lr}
 8010ea6:	4d07      	ldr	r5, [pc, #28]	; (8010ec4 <_kill_r+0x20>)
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	4604      	mov	r4, r0
 8010eac:	4608      	mov	r0, r1
 8010eae:	4611      	mov	r1, r2
 8010eb0:	602b      	str	r3, [r5, #0]
 8010eb2:	f7f7 fa83 	bl	80083bc <_kill>
 8010eb6:	1c43      	adds	r3, r0, #1
 8010eb8:	d102      	bne.n	8010ec0 <_kill_r+0x1c>
 8010eba:	682b      	ldr	r3, [r5, #0]
 8010ebc:	b103      	cbz	r3, 8010ec0 <_kill_r+0x1c>
 8010ebe:	6023      	str	r3, [r4, #0]
 8010ec0:	bd38      	pop	{r3, r4, r5, pc}
 8010ec2:	bf00      	nop
 8010ec4:	20001394 	.word	0x20001394

08010ec8 <_getpid_r>:
 8010ec8:	f7f7 ba70 	b.w	80083ac <_getpid>

08010ecc <__sread>:
 8010ecc:	b510      	push	{r4, lr}
 8010ece:	460c      	mov	r4, r1
 8010ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ed4:	f000 f89c 	bl	8011010 <_read_r>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	bfab      	itete	ge
 8010edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ede:	89a3      	ldrhlt	r3, [r4, #12]
 8010ee0:	181b      	addge	r3, r3, r0
 8010ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ee6:	bfac      	ite	ge
 8010ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010eea:	81a3      	strhlt	r3, [r4, #12]
 8010eec:	bd10      	pop	{r4, pc}

08010eee <__swrite>:
 8010eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef2:	461f      	mov	r7, r3
 8010ef4:	898b      	ldrh	r3, [r1, #12]
 8010ef6:	05db      	lsls	r3, r3, #23
 8010ef8:	4605      	mov	r5, r0
 8010efa:	460c      	mov	r4, r1
 8010efc:	4616      	mov	r6, r2
 8010efe:	d505      	bpl.n	8010f0c <__swrite+0x1e>
 8010f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f04:	2302      	movs	r3, #2
 8010f06:	2200      	movs	r2, #0
 8010f08:	f000 f868 	bl	8010fdc <_lseek_r>
 8010f0c:	89a3      	ldrh	r3, [r4, #12]
 8010f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f16:	81a3      	strh	r3, [r4, #12]
 8010f18:	4632      	mov	r2, r6
 8010f1a:	463b      	mov	r3, r7
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f22:	f000 b817 	b.w	8010f54 <_write_r>

08010f26 <__sseek>:
 8010f26:	b510      	push	{r4, lr}
 8010f28:	460c      	mov	r4, r1
 8010f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f2e:	f000 f855 	bl	8010fdc <_lseek_r>
 8010f32:	1c43      	adds	r3, r0, #1
 8010f34:	89a3      	ldrh	r3, [r4, #12]
 8010f36:	bf15      	itete	ne
 8010f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f42:	81a3      	strheq	r3, [r4, #12]
 8010f44:	bf18      	it	ne
 8010f46:	81a3      	strhne	r3, [r4, #12]
 8010f48:	bd10      	pop	{r4, pc}

08010f4a <__sclose>:
 8010f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f4e:	f000 b813 	b.w	8010f78 <_close_r>
	...

08010f54 <_write_r>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	4d07      	ldr	r5, [pc, #28]	; (8010f74 <_write_r+0x20>)
 8010f58:	4604      	mov	r4, r0
 8010f5a:	4608      	mov	r0, r1
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	2200      	movs	r2, #0
 8010f60:	602a      	str	r2, [r5, #0]
 8010f62:	461a      	mov	r2, r3
 8010f64:	f7f7 fa61 	bl	800842a <_write>
 8010f68:	1c43      	adds	r3, r0, #1
 8010f6a:	d102      	bne.n	8010f72 <_write_r+0x1e>
 8010f6c:	682b      	ldr	r3, [r5, #0]
 8010f6e:	b103      	cbz	r3, 8010f72 <_write_r+0x1e>
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	20001394 	.word	0x20001394

08010f78 <_close_r>:
 8010f78:	b538      	push	{r3, r4, r5, lr}
 8010f7a:	4d06      	ldr	r5, [pc, #24]	; (8010f94 <_close_r+0x1c>)
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	4604      	mov	r4, r0
 8010f80:	4608      	mov	r0, r1
 8010f82:	602b      	str	r3, [r5, #0]
 8010f84:	f7f7 fa6d 	bl	8008462 <_close>
 8010f88:	1c43      	adds	r3, r0, #1
 8010f8a:	d102      	bne.n	8010f92 <_close_r+0x1a>
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	b103      	cbz	r3, 8010f92 <_close_r+0x1a>
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	bd38      	pop	{r3, r4, r5, pc}
 8010f94:	20001394 	.word	0x20001394

08010f98 <_fstat_r>:
 8010f98:	b538      	push	{r3, r4, r5, lr}
 8010f9a:	4d07      	ldr	r5, [pc, #28]	; (8010fb8 <_fstat_r+0x20>)
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	4608      	mov	r0, r1
 8010fa2:	4611      	mov	r1, r2
 8010fa4:	602b      	str	r3, [r5, #0]
 8010fa6:	f7f7 fa68 	bl	800847a <_fstat>
 8010faa:	1c43      	adds	r3, r0, #1
 8010fac:	d102      	bne.n	8010fb4 <_fstat_r+0x1c>
 8010fae:	682b      	ldr	r3, [r5, #0]
 8010fb0:	b103      	cbz	r3, 8010fb4 <_fstat_r+0x1c>
 8010fb2:	6023      	str	r3, [r4, #0]
 8010fb4:	bd38      	pop	{r3, r4, r5, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20001394 	.word	0x20001394

08010fbc <_isatty_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4d06      	ldr	r5, [pc, #24]	; (8010fd8 <_isatty_r+0x1c>)
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	4608      	mov	r0, r1
 8010fc6:	602b      	str	r3, [r5, #0]
 8010fc8:	f7f7 fa67 	bl	800849a <_isatty>
 8010fcc:	1c43      	adds	r3, r0, #1
 8010fce:	d102      	bne.n	8010fd6 <_isatty_r+0x1a>
 8010fd0:	682b      	ldr	r3, [r5, #0]
 8010fd2:	b103      	cbz	r3, 8010fd6 <_isatty_r+0x1a>
 8010fd4:	6023      	str	r3, [r4, #0]
 8010fd6:	bd38      	pop	{r3, r4, r5, pc}
 8010fd8:	20001394 	.word	0x20001394

08010fdc <_lseek_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	4d07      	ldr	r5, [pc, #28]	; (8010ffc <_lseek_r+0x20>)
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	4608      	mov	r0, r1
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	602a      	str	r2, [r5, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	f7f7 fa60 	bl	80084b0 <_lseek>
 8010ff0:	1c43      	adds	r3, r0, #1
 8010ff2:	d102      	bne.n	8010ffa <_lseek_r+0x1e>
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	b103      	cbz	r3, 8010ffa <_lseek_r+0x1e>
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	bd38      	pop	{r3, r4, r5, pc}
 8010ffc:	20001394 	.word	0x20001394

08011000 <_malloc_usable_size_r>:
 8011000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011004:	1f18      	subs	r0, r3, #4
 8011006:	2b00      	cmp	r3, #0
 8011008:	bfbc      	itt	lt
 801100a:	580b      	ldrlt	r3, [r1, r0]
 801100c:	18c0      	addlt	r0, r0, r3
 801100e:	4770      	bx	lr

08011010 <_read_r>:
 8011010:	b538      	push	{r3, r4, r5, lr}
 8011012:	4d07      	ldr	r5, [pc, #28]	; (8011030 <_read_r+0x20>)
 8011014:	4604      	mov	r4, r0
 8011016:	4608      	mov	r0, r1
 8011018:	4611      	mov	r1, r2
 801101a:	2200      	movs	r2, #0
 801101c:	602a      	str	r2, [r5, #0]
 801101e:	461a      	mov	r2, r3
 8011020:	f7f7 f9e6 	bl	80083f0 <_read>
 8011024:	1c43      	adds	r3, r0, #1
 8011026:	d102      	bne.n	801102e <_read_r+0x1e>
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	b103      	cbz	r3, 801102e <_read_r+0x1e>
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	bd38      	pop	{r3, r4, r5, pc}
 8011030:	20001394 	.word	0x20001394

08011034 <_init>:
 8011034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011036:	bf00      	nop
 8011038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801103a:	bc08      	pop	{r3}
 801103c:	469e      	mov	lr, r3
 801103e:	4770      	bx	lr

08011040 <_fini>:
 8011040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011042:	bf00      	nop
 8011044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011046:	bc08      	pop	{r3}
 8011048:	469e      	mov	lr, r3
 801104a:	4770      	bx	lr
